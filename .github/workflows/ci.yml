# =====================================================
# RAG Interface - Continuous Integration Workflow
# =====================================================
# This workflow runs comprehensive CI checks for the RAG Interface project
# Can be tested locally using: act -j test
# =====================================================

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  POETRY_VERSION: "1.6.1"

jobs:
  # =====================================================
  # Backend Testing and Quality Checks
  # =====================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up environment
      run: |
        cp .env.dev .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/15" >> .env.test
        echo "TESTING=true" >> .env.test

    - name: Run backend unit tests
      run: |
        source venv/bin/activate
        export PYTHONPATH=$PWD
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --junit-xml=test-results/backend-unit.xml \
          -v

    - name: Run backend integration tests
      run: |
        source venv/bin/activate
        export PYTHONPATH=$PWD
        pytest tests/integration/ \
          --junit-xml=test-results/backend-integration.xml \
          -v
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          test-results/
          htmlcov/
          coverage.xml

  # =====================================================
  # Backend Code Quality
  # =====================================================
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv
        key: ${{ runner.os }}-python-quality-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install black isort flake8 mypy bandit autoflake pyupgrade

    - name: Run Black formatting check
      run: |
        source venv/bin/activate
        black --check --diff src/ tests/

    - name: Run isort import sorting check
      run: |
        source venv/bin/activate
        isort --check-only --diff src/ tests/

    - name: Run Flake8 linting
      run: |
        source venv/bin/activate
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      run: |
        source venv/bin/activate
        mypy src/ --ignore-missing-imports

    - name: Run Bandit security scan
      run: |
        source venv/bin/activate
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-quality-reports
        path: |
          bandit-report.json

  # =====================================================
  # Frontend Testing and Quality Checks
  # =====================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend unit tests
      working-directory: frontend
      run: |
        npm run test:coverage -- \
          --reporter=verbose \
          --reporter=junit \
          --outputFile=../test-results/frontend-unit.xml

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Run TypeScript type checking
      working-directory: frontend
      run: npx tsc --noEmit

    - name: Run frontend build test
      working-directory: frontend
      run: npm run build

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          test-results/
          frontend/coverage/
          frontend/dist/

  # =====================================================
  # End-to-End Tests
  # =====================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        # Backend dependencies
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Frontend dependencies
        cd frontend
        npm ci
        npx playwright install

    - name: Start services
      run: |
        # Copy environment file
        cp .env.dev .env.local
        
        # Start development environment
        chmod +x scripts/dev-start.sh
        scripts/dev-start.sh &
        
        # Wait for services to be ready
        sleep 60

    - name: Run E2E tests
      working-directory: frontend
      run: |
        npm run test:e2e -- \
          --reporter=junit \
          --output-dir=../test-results/e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/e2e/
          frontend/test-results/

  # =====================================================
  # Security Scanning
  # =====================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================================
  # Build and Package
  # =====================================================
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman

    - name: Build backend Podman images
      run: |
        podman build -f deployment/podman/Dockerfile.error-reporting-service -t rag-interface/ers:${{ github.sha }} .
        podman build -f deployment/podman/Dockerfile.rag-integration-service -t rag-interface/ris:${{ github.sha }} .

    - name: Build frontend Podman image
      run: |
        podman build -f deployment/podman/Dockerfile.frontend -t rag-interface/frontend:${{ github.sha }} frontend/

    - name: Save Podman images
      run: |
        podman save rag-interface/ers:${{ github.sha }} | gzip > ers-image.tar.gz
        podman save rag-interface/ris:${{ github.sha }} | gzip > ris-image.tar.gz
        podman save rag-interface/frontend:${{ github.sha }} | gzip > frontend-image.tar.gz

    - name: Upload Podman images
      uses: actions/upload-artifact@v3
      with:
        name: podman-images
        path: |
          ers-image.tar.gz
          ris-image.tar.gz
          frontend-image.tar.gz
