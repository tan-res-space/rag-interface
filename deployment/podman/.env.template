# =====================================================
# RAG Interface System - Environment Configuration Template
# =====================================================
# Copy this file to .env and customize the values for your environment
# 
# IMPORTANT: 
# - Change all default passwords before production deployment
# - Keep this file secure and never commit it to version control
# - Use strong, unique passwords for all services
#
# Author: RAG Interface Deployment Team
# Version: 1.0
# Date: 2025-01-20
# =====================================================

# =====================================================
# BUILD CONFIGURATION
# =====================================================
BUILD_DATE=2025-01-20T00:00:00Z
VCS_REF=main
ENVIRONMENT=production

# =====================================================
# DATABASE CONFIGURATION
# =====================================================

# PostgreSQL Main Database
POSTGRES_PASSWORD=postgres_secure_2025_CHANGE_ME
POSTGRES_PORT=5432

# Service Database Passwords (CHANGE THESE!)
# Note: All services now connect to the same database (rag_interface_db) with different schemas
ERS_DB_PASSWORD=ers_secure_password_2025_CHANGE_ME
UMS_DB_PASSWORD=ums_secure_password_2025_CHANGE_ME
VS_DB_PASSWORD=vs_secure_password_2025_CHANGE_ME
CES_DB_PASSWORD=ces_secure_password_2025_CHANGE_ME
RIS_DB_PASSWORD=ris_secure_password_2025_CHANGE_ME

# Database Name (unified database for all services)
DATABASE_NAME=rag_interface_db

# =====================================================
# REDIS CONFIGURATION
# =====================================================
REDIS_PASSWORD=redis_secure_2025_CHANGE_ME
REDIS_PORT=6379

# =====================================================
# SERVICE PORTS
# =====================================================
ERS_PORT=8000          # Error Reporting Service
UMS_PORT=8001          # User Management Service
RIS_PORT=8002          # RAG Integration Service
CES_PORT=8003          # Correction Engine Service
VS_PORT=8004           # Verification Service
FRONTEND_PORT=3000     # Frontend Application

# =====================================================
# SECURITY CONFIGURATION
# =====================================================

# JWT Configuration (CHANGE THIS!)
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production-make-it-very-long-and-random

# API Keys (REQUIRED for RAG functionality)
OPENAI_API_KEY=your-openai-api-key-here
PINECONE_API_KEY=your-pinecone-api-key-here

# =====================================================
# APPLICATION CONFIGURATION
# =====================================================

# Logging
LOG_LEVEL=INFO         # DEBUG, INFO, WARNING, ERROR, CRITICAL
DEBUG=false

# Frontend Configuration
FRONTEND_API_URL=http://localhost:3000

# =====================================================
# EXTERNAL SERVICES (Optional)
# =====================================================

# Email Configuration (for notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@domain.com
SMTP_PASSWORD=your-email-password
SMTP_USE_TLS=true

# Monitoring (Optional)
SENTRY_DSN=your-sentry-dsn-here

# =====================================================
# PERFORMANCE TUNING
# =====================================================

# Worker Configuration
UVICORN_WORKERS=4
GUNICORN_WORKERS=4

# Database Connection Pooling
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20

# Redis Connection Pooling
REDIS_POOL_SIZE=10

# =====================================================
# DEVELOPMENT OVERRIDES
# =====================================================
# Uncomment these for development environment

# ENVIRONMENT=development
# DEBUG=true
# LOG_LEVEL=DEBUG
# POSTGRES_PASSWORD=postgres
# REDIS_PASSWORD=redis
# JWT_SECRET_KEY=dev-secret-key

# =====================================================
# SECURITY NOTES
# =====================================================
#
# 1. Password Requirements:
#    - Minimum 16 characters
#    - Include uppercase, lowercase, numbers, and symbols
#    - Use unique passwords for each service
#
# 2. JWT Secret Key:
#    - Minimum 32 characters
#    - Use cryptographically secure random generation
#    - Example: openssl rand -base64 32
#
# 3. API Keys:
#    - Obtain from respective service providers
#    - Store securely and rotate regularly
#    - Monitor usage and set appropriate limits
#
# 4. Network Security:
#    - Use firewall rules to restrict access
#    - Enable SSL/TLS for all connections
#    - Consider using a reverse proxy
#
# =====================================================
