version: '3.8'

# =====================================================
# RAG Interface - Local Development Environment
# =====================================================
# Enhanced Docker Compose for local development with:
# - Hot-reload for both frontend and backend
# - Development-optimized configurations
# - All required services (PostgreSQL, Redis, Vector DB)
# - Volume mounts for live code editing
# - Debug ports exposed
# =====================================================

services:
  # =====================================================
  # Infrastructure Services
  # =====================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-rag_interface_dev}
      POSTGRES_USER: ${DB_USER:-rag_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./deployment/database/postgresql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - rag-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rag_user} -d ${DATABASE_NAME:-rag_interface_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: rag-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_2025} --appendonly yes
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - rag-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =====================================================
  # Backend Services (Development Mode)
  # =====================================================

  error-reporting-service:
    image: python:3.11-slim
    container_name: ers-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Derror_reporting
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6380/0
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app
      - ers_venv:/app/venv
    ports:
      - "${ERS_PORT:-8010}:8000"
      - "${ERS_DEBUG_PORT:-5688}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles &&
        pip install -r requirements.txt &&
        uvicorn src.error_reporting_service.main:app
        --host 0.0.0.0
        --port 8000
        --reload
        --reload-dir /app/src/error_reporting_service
        --log-level debug
      "

  user-management-service:
    image: python:3.11-slim
    container_name: ums-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Duser_management
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6380/1
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app
      - WATCHFILES_FORCE_POLLING=true
    volumes:
      - .:/app
      - ums_venv:/app/venv
    ports:
      - "${UMS_PORT:-8011}:8001"
      - "${UMS_DEBUG_PORT:-5689}:5679"
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles &&
        pip install -r requirements.txt &&
        uvicorn src.user_management_service.main:app
        --host 0.0.0.0
        --port 8001
        --reload
        --reload-dir /app/src/user_management_service
        --log-level debug
      "

  rag-integration-service:
    image: python:3.11-slim
    container_name: ris-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Drag_integration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6380/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app
      - WATCHFILES_FORCE_POLLING=true
    volumes:
      - .:/app
      - ris_venv:/app/venv
    ports:
      - "${RIS_PORT:-8012}:8002"
      - "${RIS_DEBUG_PORT:-5690}:5680"
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles &&
        pip install -r requirements.txt &&
        uvicorn src.rag_integration_service.main:app
        --host 0.0.0.0
        --port 8002
        --reload
        --reload-dir /app/src/rag_integration_service
        --log-level debug
      "

  # =====================================================
  # Frontend Service (Development Mode)
  # =====================================================

  frontend:
    image: node:20-alpine
    container_name: rag-frontend-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8010
      - VITE_UMS_API_URL=http://localhost:8011
      - VITE_RIS_API_URL=http://localhost:8012
      - CHOKIDAR_USEPOLLING=true  # For hot-reload in containers
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    networks:
      - rag-dev-network
    command: >
      sh -c "
        npm install &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "

  # =====================================================
  # Additional Services (Optional - can be enabled as needed)
  # =====================================================
  # Note: These services are commented out to simplify initial setup
  # Uncomment and configure as needed for your specific requirements

  # =====================================================
  # Development Tools
  # =====================================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: rag-mailhog-dev
    restart: unless-stopped
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"  # Web UI
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP
    networks:
      - rag-dev-network

  adminer:
    image: adminer:latest
    container_name: rag-adminer-dev
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - rag-dev-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: rag-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:2:${REDIS_PASSWORD:-dev_redis_2025}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - rag-dev-network
    depends_on:
      - redis

# =====================================================
# Networks and Volumes
# =====================================================

networks:
  rag-dev-network:
    driver: bridge
    name: rag-dev-network

volumes:
  postgres_dev_data:
    name: rag_postgres_dev_data
  redis_dev_data:
    name: rag_redis_dev_data
  ers_venv:
    name: rag_ers_venv
  ums_venv:
    name: rag_ums_venv
  ris_venv:
    name: rag_ris_venv
  frontend_node_modules:
    name: rag_frontend_node_modules
