This is a Value added service for the Medical Transcriptionists (MTs) and Quality Assurance (QA) personnel.

The transcription software works in two steps:
1. Transcription: The audio is transcribed into text called the ASR drafts. Done by an ASR model.
2. Post-Processing: The ASR draft is post-processed to correct errors and improve quality. Done by Medical Transcription Specialists (MTS).
3. QA: The post-processed text is reviewed by QA team and errors are corrected.

We have to plan for implementing the following use cases.
Steps:
1. QA noticing a specific error for a specific speaker in the ASR Draft.
2. QA identifies the speaker with one of the four type (called buckets):
    a. No Touch (denote as "no_touch"): The ASR draft is of very high quality and no corrections are required.
    b. Low Touch (denote as "low_touch"): The ASR draft is of high quality and minimal corrections are required by MTs.
    c. Medium Touch (denote as "medium_touch"): The ASR draft is of medium quality and some corrections are required.
    d. High Touch (denote as "high_touch"): The ASR draft is of low quality and significant corrections are required.

2. QA selects and submits that error for better handling, target is to correct that error from next draft onwards.
3. QA submits the error and corresponding corrections into vector db along with relevant metadata 
    for more targeted search. Few of the key metadata are as follows:
    a. speaker id (an identity provided by the user since user has the knowledge of the speaker)
    b. source system or client id (user input) 
    c. speaker bucket (selected from the dropdown)
    d. audio quality (user input: good, fair, poor)
    e. speaker clarity (user input: clear, somewhat clear, unclear, very unclear)
    f. background noise (none, low, medium, high)
    g. number of speakers (one, two, three, four, five)
    h. overlapping speech (yes, no)
    i. requires specialized knowledge (yes, no)
    j. additional notes
4. Once a speaker is added to the system, we should be able to view the history of errors for that speaker.
5. That speaker should show up in the "Speaker Bucket Overview" of the Dashboard. 
6. And we should be able to view the ASR performance of that speaker over time whether its improving or not. 
    That is the speaker is moving to a better bucket or not.
4. From next draft onwards for that specific speaker the same error should be rectified.
5. QA should be provided a way to verify that the error is rectified in the next draft. 
    We have to pull the jobs for the same spekers from InstaNote Database and appy RAG based correction to the drafts.

Contraints:
1. The MTSs and QAs cannot copy and paste any part of the drafts.

Advantages:
Saves Time: Current feed-back loop is too long which can be much shorter. QA guys submits an error and wait for days to actually validate that the reported problem is resolved or not.
Better QA Coverage: QA Team can focus on more important errors and less on repetitive errors.