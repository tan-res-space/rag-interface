version: '3.8'

# =====================================================
# RAG Interface - Local Development Environment
# =====================================================
# Enhanced Podman Compose for local development with:
# - Hot-reload for both frontend and backend
# - Development-optimized configurations
# - All required services (PostgreSQL, Redis, Vector DB)
# - Volume mounts for live code editing
# - Debug ports exposed
# - Rootless container support
# =====================================================

services:
  # =====================================================
  # Infrastructure Services
  # =====================================================
  
  postgres:
    image: docker.io/library/postgres:15-alpine
    container_name: rag-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-rag_interface_dev}
      POSTGRES_USER: ${DB_USER:-rag_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data:Z
      - ./deployment/database/postgresql/init:/docker-entrypoint-initdb.d:ro,Z
    networks:
      - rag-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rag_user} -d ${DATABASE_NAME:-rag_interface_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: docker.io/library/redis:7-alpine
    container_name: rag-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_2025} --appendonly yes
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_dev_data:/data:Z
    networks:
      - rag-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # =====================================================
  # Backend Services (Development Mode)
  # =====================================================

  api-gateway:
    image: docker.io/library/python:3.11-slim
    container_name: api-gateway-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true
    volumes:
      - .:/app:Z
    ports:
      - "${GATEWAY_PORT:-8000}:8000"
      - "${GATEWAY_DEBUG_PORT:-5687}:5678"
    networks:
      - rag-dev-network
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy httpx &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn api_gateway.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/api_gateway --log-level debug
      "

  error-reporting-service:
    image: docker.io/library/python:3.11-slim
    container_name: rag-ers-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Derror_reporting
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app:Z
      - ers_venv:/app/venv:Z
    ports:
      - "${ERS_PORT:-8010}:8000"
      - "${ERS_DEBUG_PORT:-5678}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn error_reporting_service.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/error_reporting_service
      "

  user-management-service:
    image: docker.io/library/python:3.11-slim
    container_name: rag-ums-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Duser_management
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6379/1
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app:Z
      - ums_venv:/app/venv:Z
    ports:
      - "${UMS_PORT:-8011}:8000"
      - "${UMS_DEBUG_PORT:-5679}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn user_management_service.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/user_management_service
      "

  rag-integration-service:
    image: docker.io/library/python:3.11-slim
    container_name: rag-ris-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Drag_integration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6379/2
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app:Z
      - ris_venv:/app/venv:Z
    ports:
      - "${RIS_PORT:-8012}:8000"
      - "${RIS_DEBUG_PORT:-5680}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn rag_integration_service.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/rag_integration_service
      "

  correction-engine-service:
    image: docker.io/library/python:3.11-slim
    container_name: rag-ces-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Dcorrection_engine
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6379/3
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app:Z
      - ces_venv:/app/venv:Z
    ports:
      - "${CES_PORT:-8013}:8000"
      - "${CES_DEBUG_PORT:-5681}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn correction_engine_service.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/correction_engine_service
      "

  verification-service:
    image: docker.io/library/python:3.11-slim
    container_name: rag-vs-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-rag_user}:${DB_PASSWORD:-dev_password_2025}@postgres:5432/${DATABASE_NAME:-rag_interface_dev}?options=-csearch_path%3Dverification
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_2025}@redis:6379/4
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - DEBUG=true
      - PYTHONPATH=/app/src:/app
      - WATCHFILES_FORCE_POLLING=true  # For hot-reload in containers
    volumes:
      - .:/app:Z
      - vs_venv:/app/venv:Z
    ports:
      - "${VS_PORT:-8014}:8000"
      - "${VS_DEBUG_PORT:-5682}:5678"  # Debug port
    networks:
      - rag-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc curl &&
        python -m venv venv &&
        . venv/bin/activate &&
        pip install --upgrade pip &&
        pip install fastapi uvicorn[standard] watchfiles debugpy &&
        pip install -r requirements.txt &&
        cd /app/src &&
        uvicorn verification_service.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src/verification_service
      "

  # =====================================================
  # Frontend Service (Development Mode)
  # =====================================================

  frontend:
    image: docker.io/library/node:20-alpine
    container_name: rag-frontend-dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:${GATEWAY_PORT:-8000}
      - VITE_UMS_API_URL=http://localhost:8011
      - VITE_RIS_API_URL=http://localhost:8012
      - CHOKIDAR_USEPOLLING=true  # For hot-reload in containers
    volumes:
      - ./frontend:/app:Z
      - frontend_node_modules:/app/node_modules:Z
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    networks:
      - rag-dev-network
    command: >
      sh -c "
        npm install &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================================
  # Development Tools
  # =====================================================

  mailhog:
    image: docker.io/mailhog/mailhog:latest
    container_name: rag-mailhog-dev
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - rag-dev-network

  adminer:
    image: docker.io/library/adminer:latest
    container_name: rag-adminer-dev
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - rag-dev-network
    depends_on:
      - postgres

  redis-commander:
    image: docker.io/rediscommander/redis-commander:latest
    container_name: rag-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:1:${REDIS_PASSWORD:-dev_redis_2025}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - rag-dev-network
    depends_on:
      - redis

# =====================================================
# Networks
# =====================================================
networks:
  rag-dev-network:
    driver: bridge
    name: rag_dev_network

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres_dev_data:
    name: rag_postgres_dev_data
  redis_dev_data:
    name: rag_redis_dev_data
  ers_venv:
    name: rag_ers_venv
  ums_venv:
    name: rag_ums_venv
  ris_venv:
    name: rag_ris_venv
  ces_venv:
    name: rag_ces_venv
  vs_venv:
    name: rag_vs_venv
  frontend_node_modules:
    name: rag_frontend_node_modules
