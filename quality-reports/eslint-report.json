[{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/accessibility.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'h2' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'h3' is assigned a value but never used.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'focusedElement' is assigned a value but never used.","line":143,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Accessibility Tests', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.locator('input[name=\"username\"]').fill('admin');\n    await page.locator('input[name=\"password\"]').fill('AdminPassword123!');\n    await page.locator('button[type=\"submit\"]').click();\n    await expect(page).toHaveURL(/.*\\/dashboard/);\n  });\n\n  test('should have proper heading hierarchy', async ({ page }) => {\n    // Check for proper heading structure\n    const h1 = page.locator('h1');\n    const h2 = page.locator('h2');\n    const h3 = page.locator('h3');\n    \n    // Should have at least one h1\n    await expect(h1).toHaveCount({ min: 1 });\n    \n    // Headings should be in logical order\n    if (await h1.count() > 0) {\n      await expect(h1.first()).toBeVisible();\n    }\n  });\n\n  test('should have proper ARIA labels and roles', async ({ page }) => {\n    // Check for navigation landmarks\n    const nav = page.locator('nav, [role=\"navigation\"]');\n    if (await nav.count() > 0) {\n      await expect(nav).toBeVisible();\n    }\n    \n    // Check for main content area\n    const main = page.locator('main, [role=\"main\"]');\n    if (await main.count() > 0) {\n      await expect(main).toBeVisible();\n    }\n    \n    // Check for buttons with proper labels\n    const buttons = page.locator('button');\n    for (let i = 0; i < Math.min(await buttons.count(), 5); i++) {\n      const button = buttons.nth(i);\n      const hasText = await button.textContent();\n      const hasAriaLabel = await button.getAttribute('aria-label');\n      const hasAriaLabelledBy = await button.getAttribute('aria-labelledby');\n      \n      // Button should have accessible name\n      expect(hasText || hasAriaLabel || hasAriaLabelledBy).toBeTruthy();\n    }\n  });\n\n  test('should support keyboard navigation', async ({ page }) => {\n    // Test tab navigation\n    await page.keyboard.press('Tab');\n    \n    // Should focus on first focusable element\n    const focusedElement = page.locator(':focus');\n    await expect(focusedElement).toBeVisible();\n    \n    // Continue tabbing through elements\n    for (let i = 0; i < 5; i++) {\n      await page.keyboard.press('Tab');\n      const currentFocus = page.locator(':focus');\n      await expect(currentFocus).toBeVisible();\n    }\n  });\n\n  test('should have sufficient color contrast', async ({ page }) => {\n    // This is a basic check - full color contrast testing requires specialized tools\n    // Check that text is visible against backgrounds\n    const textElements = page.locator('p, span, div, h1, h2, h3, h4, h5, h6, button, a');\n    \n    for (let i = 0; i < Math.min(await textElements.count(), 10); i++) {\n      const element = textElements.nth(i);\n      const text = await element.textContent();\n      \n      if (text && text.trim().length > 0) {\n        await expect(element).toBeVisible();\n      }\n    }\n  });\n\n  test('should have proper form labels', async ({ page }) => {\n    await page.goto('/error-reporting');\n    \n    // Check that form inputs have labels\n    const inputs = page.locator('input, textarea, select');\n    \n    for (let i = 0; i < Math.min(await inputs.count(), 5); i++) {\n      const input = inputs.nth(i);\n      const id = await input.getAttribute('id');\n      const ariaLabel = await input.getAttribute('aria-label');\n      const ariaLabelledBy = await input.getAttribute('aria-labelledby');\n      \n      if (id) {\n        // Check for associated label\n        const label = page.locator(`label[for=\"${id}\"]`);\n        const hasLabel = await label.count() > 0;\n        \n        // Input should have label or aria-label\n        expect(hasLabel || ariaLabel || ariaLabelledBy).toBeTruthy();\n      }\n    }\n  });\n\n  test('should support screen reader announcements', async ({ page }) => {\n    // Check for live regions\n    const liveRegions = page.locator('[aria-live], [role=\"status\"], [role=\"alert\"]');\n    \n    if (await liveRegions.count() > 0) {\n      await expect(liveRegions.first()).toBeVisible();\n    }\n    \n    // Check for proper announcements on dynamic content\n    await page.goto('/verification');\n    \n    // Look for status messages that should be announced\n    const statusMessages = page.locator('[role=\"status\"], [aria-live=\"polite\"], [aria-live=\"assertive\"]');\n    if (await statusMessages.count() > 0) {\n      await expect(statusMessages.first()).toBeVisible();\n    }\n  });\n\n  test('should have proper focus management', async ({ page }) => {\n    // Test focus trap in modals\n    await page.goto('/admin');\n    \n    // Try to open a modal/dialog\n    const modalTrigger = page.locator('button:has-text(\"Details\"), button:has-text(\"Edit\"), [data-testid*=\"open\"]');\n    \n    if (await modalTrigger.count() > 0) {\n      await modalTrigger.click();\n      \n      // Check if modal opened\n      const modal = page.locator('[role=\"dialog\"], .modal');\n      if (await modal.count() > 0) {\n        await expect(modal).toBeVisible();\n        \n        // Focus should be trapped within modal\n        await page.keyboard.press('Tab');\n        const focusedElement = page.locator(':focus');\n        \n        // Focused element should be within modal\n        const isWithinModal = await modal.locator(':focus').count() > 0;\n        expect(isWithinModal).toBeTruthy();\n      }\n    }\n  });\n\n  test('should support high contrast mode', async ({ page }) => {\n    // Simulate high contrast mode\n    await page.emulateMedia({ colorScheme: 'dark' });\n    \n    // Check that content is still visible\n    await expect(page.locator('body')).toBeVisible();\n    await expect(page.locator('h1, h2, h3').first()).toBeVisible();\n    \n    // Reset to light mode\n    await page.emulateMedia({ colorScheme: 'light' });\n    await expect(page.locator('body')).toBeVisible();\n  });\n\n  test('should have proper error announcements', async ({ page }) => {\n    await page.goto('/error-reporting');\n    \n    // Try to submit form without required fields\n    const submitButton = page.locator('button[type=\"submit\"], button:has-text(\"Submit\")');\n    \n    if (await submitButton.count() > 0) {\n      await submitButton.click();\n      \n      // Check for error announcements\n      const errorMessages = page.locator('[role=\"alert\"], [aria-live=\"assertive\"], .error-message');\n      if (await errorMessages.count() > 0) {\n        await expect(errorMessages.first()).toBeVisible();\n      }\n    }\n  });\n\n  test('should support zoom up to 200%', async ({ page }) => {\n    // Test page at 200% zoom\n    await page.setViewportSize({ width: 640, height: 480 }); // Simulate 200% zoom\n    \n    // Content should still be accessible\n    await expect(page.locator('body')).toBeVisible();\n    await expect(page.locator('h1, h2, h3').first()).toBeVisible();\n    \n    // Navigation should still work\n    const navLinks = page.locator('nav a, .navigation a');\n    if (await navLinks.count() > 0) {\n      await expect(navLinks.first()).toBeVisible();\n    }\n  });\n\n  test('should have proper skip links', async ({ page }) => {\n    // Check for skip to main content link\n    await page.keyboard.press('Tab');\n    \n    const skipLink = page.locator('a:has-text(\"Skip to main\"), a:has-text(\"Skip to content\"), .skip-link');\n    \n    if (await skipLink.count() > 0) {\n      await expect(skipLink).toBeFocused();\n      \n      // Skip link should work\n      await skipLink.click();\n      \n      const mainContent = page.locator('main, [role=\"main\"], #main-content');\n      if (await mainContent.count() > 0) {\n        await expect(mainContent).toBeFocused();\n      }\n    }\n  });\n\n  test('should have descriptive link text', async ({ page }) => {\n    // Check that links have descriptive text\n    const links = page.locator('a');\n    \n    for (let i = 0; i < Math.min(await links.count(), 10); i++) {\n      const link = links.nth(i);\n      const text = await link.textContent();\n      const ariaLabel = await link.getAttribute('aria-label');\n      const title = await link.getAttribute('title');\n      \n      // Link should have descriptive text (not just \"click here\" or \"read more\")\n      const hasDescriptiveText = text && !text.match(/^(click here|read more|more|link)$/i);\n      const hasAriaLabel = ariaLabel && ariaLabel.length > 0;\n      const hasTitle = title && title.length > 0;\n      \n      expect(hasDescriptiveText || hasAriaLabel || hasTitle).toBeTruthy();\n    }\n  });\n\n  test('should support reduced motion preferences', async ({ page }) => {\n    // Simulate reduced motion preference\n    await page.emulateMedia({ reducedMotion: 'reduce' });\n    \n    // Check that animations are reduced or disabled\n    // This is more of a CSS test, but we can check that content is still functional\n    await expect(page.locator('body')).toBeVisible();\n    \n    // Navigate between pages to ensure transitions work\n    await page.goto('/error-reporting');\n    await expect(page.locator('text=/error.*report/i')).toBeVisible();\n    \n    await page.goto('/verification');\n    await expect(page.locator('text=/verification/i')).toBeVisible();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/auth-fixed.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/error-reporting.spec.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":225,"column":50,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":225,"endColumn":51,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8912,8913],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8912,8912],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Error Reporting Interface', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login and navigate to error reporting\n    await page.goto('/login');\n    await page.locator('input[name=\"username\"]').fill('admin');\n    await page.locator('input[name=\"password\"]').fill('AdminPassword123!');\n    await page.locator('button[type=\"submit\"]').click();\n    await expect(page).toHaveURL(/.*\\/dashboard/);\n\n    // Navigate to error reporting page\n    await page.goto('/error-reporting');\n  });\n\n  test('should display error reporting interface', async ({ page }) => {\n    // Check for error reporting elements\n    await expect(page.locator('text=/error.*report|report.*error/i')).toBeVisible();\n    \n    // Should show text input areas\n    await expect(page.locator('textarea, [contenteditable], .text-editor')).toBeVisible();\n  });\n\n  test('should support text selection for error reporting', async ({ page }) => {\n    // Look for text content that can be selected\n    const textArea = page.locator('textarea, [contenteditable], .text-content').first();\n    \n    if (await textArea.count() > 0) {\n      // Add some sample text\n      await textArea.fill('The patient has diabetis and high blod pressure.');\n      \n      // Select the word \"diabetis\"\n      await textArea.focus();\n      await page.keyboard.press('Control+A'); // Select all\n      \n      // Should be able to select text\n      await expect(textArea).toBeFocused();\n    }\n  });\n\n  test('should categorize errors by type', async ({ page }) => {\n    // Look for error categorization controls\n    const categorySelect = page.locator('select[name*=\"category\"], [aria-label*=\"category\"], .error-category');\n    \n    if (await categorySelect.count() > 0) {\n      await categorySelect.click();\n      \n      // Should show error categories\n      await expect(page.locator('option:has-text(\"Medical Terminology\"), option:has-text(\"Spelling\"), option:has-text(\"Grammar\")')).toBeVisible();\n      \n      // Select medical terminology\n      await page.locator('option:has-text(\"Medical Terminology\")').click();\n      \n      // Category should be selected\n      await expect(categorySelect).toHaveValue(/medical|terminology/i);\n    }\n  });\n\n  test('should set error severity levels', async ({ page }) => {\n    // Look for severity controls\n    const severitySelect = page.locator('select[name*=\"severity\"], [aria-label*=\"severity\"], .severity-level');\n    \n    if (await severitySelect.count() > 0) {\n      await severitySelect.click();\n      \n      // Should show severity options\n      await expect(page.locator('option:has-text(\"Low\"), option:has-text(\"Medium\"), option:has-text(\"High\"), option:has-text(\"Critical\")')).toBeVisible();\n      \n      // Select high severity\n      await page.locator('option:has-text(\"High\")').click();\n      \n      // Severity should be selected\n      await expect(severitySelect).toHaveValue(/high/i);\n    }\n  });\n\n  test('should add error descriptions and comments', async ({ page }) => {\n    // Find description input\n    const descriptionInput = page.locator('textarea[name*=\"description\"], input[name*=\"description\"], [aria-label*=\"description\"]');\n    \n    if (await descriptionInput.count() > 0) {\n      await descriptionInput.fill('Medical term \"diabetis\" should be \"diabetes\". This is a common spelling error that affects medical accuracy.');\n      \n      // Verify description was entered\n      await expect(descriptionInput).toHaveValue(/Medical term.*diabetis.*should be.*diabetes/);\n    }\n  });\n\n  test('should submit error reports successfully', async ({ page }) => {\n    // Fill out error report form\n    const textArea = page.locator('textarea, [contenteditable]').first();\n    if (await textArea.count() > 0) {\n      await textArea.fill('The patient has diabetis and high blod pressure.');\n    }\n    \n    // Select category\n    const categorySelect = page.locator('select[name*=\"category\"], [aria-label*=\"category\"]');\n    if (await categorySelect.count() > 0) {\n      await categorySelect.selectOption('Medical Terminology');\n    }\n    \n    // Select severity\n    const severitySelect = page.locator('select[name*=\"severity\"], [aria-label*=\"severity\"]');\n    if (await severitySelect.count() > 0) {\n      await severitySelect.selectOption('High');\n    }\n    \n    // Add description\n    const descriptionInput = page.locator('textarea[name*=\"description\"], [aria-label*=\"description\"]');\n    if (await descriptionInput.count() > 0) {\n      await descriptionInput.fill('Spelling error in medical terminology');\n    }\n    \n    // Submit the report\n    const submitButton = page.locator('button:has-text(\"Submit\"), button:has-text(\"Report Error\"), button[type=\"submit\"]');\n    if (await submitButton.count() > 0) {\n      await submitButton.click();\n      \n      // Should show success message\n      await expect(page.locator('text=/submitted|success|reported.*successfully/i')).toBeVisible();\n    }\n  });\n\n  test('should validate required fields', async ({ page }) => {\n    // Try to submit without filling required fields\n    const submitButton = page.locator('button:has-text(\"Submit\"), button:has-text(\"Report Error\"), button[type=\"submit\"]');\n    \n    if (await submitButton.count() > 0) {\n      await submitButton.click();\n      \n      // Should show validation errors\n      await expect(page.locator('text=/required|please.*fill|validation.*error/i')).toBeVisible();\n    }\n  });\n\n  test('should save error reports as drafts', async ({ page }) => {\n    // Fill partial information\n    const textArea = page.locator('textarea, [contenteditable]').first();\n    if (await textArea.count() > 0) {\n      await textArea.fill('Work in progress error report...');\n    }\n    \n    // Save as draft\n    const draftButton = page.locator('button:has-text(\"Save Draft\"), button:has-text(\"Draft\"), [aria-label*=\"draft\"]');\n    if (await draftButton.count() > 0) {\n      await draftButton.click();\n      \n      // Should show draft saved message\n      await expect(page.locator('text=/draft.*saved|saved.*draft/i')).toBeVisible();\n    }\n  });\n\n  test('should support text highlighting and annotation', async ({ page }) => {\n    // Add text content\n    const textArea = page.locator('textarea, [contenteditable]').first();\n    if (await textArea.count() > 0) {\n      await textArea.fill('The patient has diabetis and high blod pressure.');\n      \n      // Try to select specific text for highlighting\n      await textArea.focus();\n      \n      // Double-click to select word\n      await page.locator('text=/diabetis/i').dblclick();\n      \n      // Look for highlighting tools\n      const highlightButton = page.locator('button:has-text(\"Highlight\"), .highlight-tool, [aria-label*=\"highlight\"]');\n      if (await highlightButton.count() > 0) {\n        await highlightButton.click();\n        \n        // Text should be highlighted (visual verification)\n        await expect(page.locator('.highlighted, .error-highlight')).toBeVisible();\n      }\n    }\n  });\n\n  test('should display error history and previous reports', async ({ page }) => {\n    // Look for error history section\n    const historySection = page.locator('.error-history, .previous-reports, [data-testid*=\"history\"]');\n    \n    if (await historySection.count() > 0) {\n      await expect(historySection).toBeVisible();\n      \n      // Should show previous error reports\n      await expect(page.locator('text=/previous.*reports|error.*history/i')).toBeVisible();\n    }\n  });\n\n  test('should support error report filtering and search', async ({ page }) => {\n    // Look for search functionality\n    const searchInput = page.locator('input[type=\"search\"], input[placeholder*=\"search\"], [aria-label*=\"search\"]');\n    \n    if (await searchInput.count() > 0) {\n      await searchInput.fill('medical terminology');\n      \n      // Should filter results\n      await expect(page.locator('text=/medical.*terminology/i')).toBeVisible();\n    }\n    \n    // Look for filter controls\n    const filterButton = page.locator('button:has-text(\"Filter\"), select[name*=\"filter\"], [aria-label*=\"filter\"]');\n    if (await filterButton.count() > 0) {\n      await filterButton.click();\n      \n      // Should show filter options\n      await expect(page.locator('text=/category|severity|date/i')).toBeVisible();\n    }\n  });\n\n  test('should handle file attachments for error context', async ({ page }) => {\n    // Look for file upload functionality\n    const fileInput = page.locator('input[type=\"file\"], .file-upload, [aria-label*=\"upload\"]');\n    \n    if (await fileInput.count() > 0) {\n      // Create a test file\n      const testFile = Buffer.from('Test audio file content');\n      \n      // Upload file\n      await fileInput.setInputFiles({\n        name: 'test-audio.wav',\n        mimeType: 'audio/wav',\n        buffer: testFile\n      });\n      \n      // Should show uploaded file\n      await expect(page.locator('text=/test-audio\\.wav|uploaded.*successfully/i')).toBeVisible();\n    }\n  });\n\n  test('should provide error reporting analytics', async ({ page }) => {\n    // Look for analytics or statistics section\n    const analyticsSection = page.locator('.analytics, .statistics, .error-stats, [data-testid*=\"analytics\"]');\n    \n    if (await analyticsSection.count() > 0) {\n      await expect(analyticsSection).toBeVisible();\n      \n      // Should show error metrics\n      await expect(page.locator('text=/total.*errors|error.*count|statistics/i')).toBeVisible();\n    }\n  });\n\n  test('should support collaborative error review', async ({ page }) => {\n    // Look for collaboration features\n    const reviewSection = page.locator('.error-review, .collaboration, [data-testid*=\"review\"]');\n    \n    if (await reviewSection.count() > 0) {\n      await expect(reviewSection).toBeVisible();\n      \n      // Should show review status\n      await expect(page.locator('text=/pending.*review|reviewed|approved/i')).toBeVisible();\n    }\n  });\n\n  test('should handle error reporting in different languages', async ({ page }) => {\n    // Look for language selection\n    const languageSelect = page.locator('select[name*=\"language\"], [aria-label*=\"language\"], .language-selector');\n    \n    if (await languageSelect.count() > 0) {\n      await languageSelect.click();\n      \n      // Should show language options\n      await expect(page.locator('option:has-text(\"English\"), option:has-text(\"Spanish\"), option:has-text(\"French\")')).toBeVisible();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/mt-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/navigation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/speaker-management.spec.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":18,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":18,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[732,733],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[732,732],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":30,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":30,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1276,1277],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1276,1276],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":180,"column":50,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":180,"endColumn":51,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7186,7187],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7186,7186],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":186,"column":52,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":186,"endColumn":53,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7403,7404],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7403,7403],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\d.","line":212,"column":46,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":212,"endColumn":47,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8306,8307],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8306,8306],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\d.","line":218,"column":48,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":218,"endColumn":49,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8581,8582],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8581,8581],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\d.","line":218,"column":59,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":218,"endColumn":60,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8592,8593],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8592,8592],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\d.","line":218,"column":66,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":218,"endColumn":67,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8599,8600],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8599,8599],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":218,"column":69,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":218,"endColumn":70,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8602,8603],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8602,8602],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\d.","line":218,"column":71,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":218,"endColumn":72,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8604,8605],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8604,8604],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\ntest.describe('Speaker Management Interface', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login and navigate to speaker management\n    await page.goto('/login');\n    await page.locator('input[name=\"username\"]').fill('admin');\n    await page.locator('input[name=\"password\"]').fill('AdminPassword123!');\n    await page.locator('button[type=\"submit\"]').click();\n    await expect(page).toHaveURL(/.*\\/dashboard/);\n\n    // Navigate to speaker management (might be part of admin or separate page)\n    await page.goto('/admin');\n  });\n\n  test('should display speakers list', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/speaker|Dr\\.|SPEAKER_/i', { timeout: 10000 });\n    \n    // Should display speaker information\n    await expect(page.locator('text=/Dr.*John.*Smith|SPEAKER_001/i')).toBeVisible();\n    await expect(page.locator('text=/Dr.*Sarah.*Johnson|SPEAKER_002/i')).toBeVisible();\n    \n    // Should show speaker buckets\n    await expect(page.locator('text=/HIGH.*TOUCH|MEDIUM.*TOUCH/i')).toBeVisible();\n  });\n\n  test('should support speaker search functionality', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/speaker|Dr\\./i', { timeout: 10000 });\n    \n    // Find search input\n    const searchInput = page.locator('input[placeholder*=\"search\"], input[type=\"search\"], [aria-label*=\"search\"]');\n    \n    if (await searchInput.count() > 0) {\n      // Search for specific speaker\n      await searchInput.fill('John');\n      \n      // Should filter results\n      await expect(page.locator('text=/Dr.*John.*Smith/i')).toBeVisible();\n      \n      // Clear search\n      await searchInput.clear();\n      await searchInput.fill('');\n      \n      // Should show all speakers again\n      await expect(page.locator('text=/Dr.*Sarah.*Johnson/i')).toBeVisible();\n    }\n  });\n\n  test('should open speaker details dialog', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/Dr.*John.*Smith/i', { timeout: 10000 });\n    \n    // Click on speaker card or row\n    const speakerCard = page.locator('[data-testid=\"speaker-card\"], .speaker-card, tr:has-text(\"Dr. John Smith\")').first();\n    \n    if (await speakerCard.count() > 0) {\n      await speakerCard.click();\n      \n      // Should open details dialog\n      await expect(page.locator('[role=\"dialog\"], .modal, .speaker-details')).toBeVisible();\n      await expect(page.locator('text=/Speaker.*Details|Details/i')).toBeVisible();\n      await expect(page.locator('text=/SPEAKER_001/i')).toBeVisible();\n    }\n  });\n\n  test('should display speaker statistics', async ({ page }) => {\n    // Look for statistics section\n    const statsSection = page.locator('.statistics, .stats, [data-testid*=\"stats\"]');\n    \n    if (await statsSection.count() > 0) {\n      await expect(statsSection).toBeVisible();\n      \n      // Should show various metrics\n      await expect(page.locator('text=/note.*count|notes|recordings/i')).toBeVisible();\n      await expect(page.locator('text=/ser.*score|error.*rate/i')).toBeVisible();\n    }\n  });\n\n  test('should support speaker filtering by bucket', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/HIGH.*TOUCH|MEDIUM.*TOUCH/i', { timeout: 10000 });\n    \n    // Find filter controls\n    const filterButton = page.locator('button:has-text(\"Filter\"), select[name*=\"bucket\"], [aria-label*=\"filter\"]');\n    \n    if (await filterButton.count() > 0) {\n      await filterButton.click();\n      \n      // Select HIGH TOUCH filter\n      const highTouchOption = page.locator('option:has-text(\"HIGH TOUCH\"), [role=\"option\"]:has-text(\"HIGH TOUCH\")');\n      if (await highTouchOption.count() > 0) {\n        await highTouchOption.click();\n        \n        // Should show only HIGH TOUCH speakers\n        await expect(page.locator('text=/HIGH.*TOUCH/i')).toBeVisible();\n      }\n    }\n  });\n\n  test('should support speaker bucket transitions', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/Dr.*John.*Smith/i', { timeout: 10000 });\n    \n    // Open speaker details\n    const speakerCard = page.locator('[data-testid=\"speaker-card\"], .speaker-card, tr:has-text(\"Dr. John Smith\")').first();\n    \n    if (await speakerCard.count() > 0) {\n      await speakerCard.click();\n      \n      // Look for bucket transition controls\n      const transitionButton = page.locator('button:has-text(\"Move to\"), button:has-text(\"Transition\"), select[name*=\"bucket\"]');\n      \n      if (await transitionButton.count() > 0) {\n        await transitionButton.click();\n        \n        // Select new bucket\n        const newBucketOption = page.locator('option:has-text(\"MEDIUM TOUCH\"), [role=\"option\"]:has-text(\"MEDIUM\")');\n        if (await newBucketOption.count() > 0) {\n          await newBucketOption.click();\n          \n          // Should show confirmation or success message\n          await expect(page.locator('text=/moved|transition.*successful|updated/i')).toBeVisible();\n        }\n      }\n    }\n  });\n\n  test('should display speaker performance metrics', async ({ page }) => {\n    // Open speaker details\n    await page.waitForSelector('text=/Dr.*John.*Smith/i', { timeout: 10000 });\n    const speakerCard = page.locator('[data-testid=\"speaker-card\"], .speaker-card, tr:has-text(\"Dr. John Smith\")').first();\n    \n    if (await speakerCard.count() > 0) {\n      await speakerCard.click();\n      \n      // Should show performance metrics\n      await expect(page.locator('text=/performance|metrics|statistics/i')).toBeVisible();\n      await expect(page.locator('text=/error.*rate|accuracy|quality/i')).toBeVisible();\n    }\n  });\n\n  test('should support data grid interactions', async ({ page }) => {\n    // Wait for data grid to load\n    await page.waitForSelector('[role=\"grid\"], .data-grid, table', { timeout: 10000 });\n    \n    const dataGrid = page.locator('[role=\"grid\"], .data-grid, table').first();\n    \n    if (await dataGrid.count() > 0) {\n      // Test column sorting\n      const sortableHeader = page.locator('th[role=\"columnheader\"], .sortable-header').first();\n      if (await sortableHeader.count() > 0) {\n        await sortableHeader.click();\n        \n        // Should sort the data (visual verification needed)\n        await expect(dataGrid).toBeVisible();\n      }\n      \n      // Test row selection\n      const firstRow = page.locator('tr[role=\"row\"], tbody tr').first();\n      if (await firstRow.count() > 0) {\n        await firstRow.click();\n        \n        // Row should be selected (visual verification)\n        await expect(firstRow).toBeVisible();\n      }\n    }\n  });\n\n  test('should handle pagination in speaker list', async ({ page }) => {\n    // Look for pagination controls\n    const paginationNext = page.locator('button:has-text(\"Next\"), [aria-label*=\"next page\"]');\n    const paginationPrev = page.locator('button:has-text(\"Previous\"), [aria-label*=\"previous page\"]');\n    \n    if (await paginationNext.count() > 0) {\n      await paginationNext.click();\n      \n      // Should load next page\n      await expect(page.locator('text=/speaker|Dr\\./i')).toBeVisible();\n      \n      if (await paginationPrev.count() > 0) {\n        await paginationPrev.click();\n        \n        // Should go back to previous page\n        await expect(page.locator('text=/speaker|Dr\\./i')).toBeVisible();\n      }\n    }\n  });\n\n  test('should export speaker data', async ({ page }) => {\n    // Look for export functionality\n    const exportButton = page.locator('button:has-text(\"Export\"), button:has-text(\"Download\"), [aria-label*=\"export\"]');\n    \n    if (await exportButton.count() > 0) {\n      // Set up download handler\n      const downloadPromise = page.waitForEvent('download');\n      \n      await exportButton.click();\n      \n      // Should trigger download\n      const download = await downloadPromise;\n      expect(download.suggestedFilename()).toMatch(/\\.csv|\\.xlsx|\\.json/);\n    }\n  });\n\n  test('should validate speaker data integrity', async ({ page }) => {\n    // Wait for speakers to load\n    await page.waitForSelector('text=/Dr.*John.*Smith/i', { timeout: 10000 });\n    \n    // Check that speaker IDs are properly formatted\n    await expect(page.locator('text=/SPEAKER_\\d{3}/i')).toBeVisible();\n    \n    // Check that bucket assignments are valid\n    await expect(page.locator('text=/HIGH.*TOUCH|MEDIUM.*TOUCH|LOW.*TOUCH/i')).toBeVisible();\n    \n    // Check that metrics are displayed as numbers\n    const metricElements = page.locator('text=/\\d+.*notes|\\d+.*%|\\d+\\.\\d+/i');\n    if (await metricElements.count() > 0) {\n      await expect(metricElements.first()).toBeVisible();\n    }\n  });\n\n  test('should handle speaker management errors gracefully', async ({ page }) => {\n    // Try to perform an action that might fail\n    const speakerCard = page.locator('[data-testid=\"speaker-card\"], .speaker-card').first();\n    \n    if (await speakerCard.count() > 0) {\n      // Simulate network error by intercepting requests\n      await page.route('**/api/**', route => route.abort());\n      \n      await speakerCard.click();\n      \n      // Should show error message\n      await expect(page.locator('text=/error|failed|unable.*to.*load/i')).toBeVisible();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/e2e/utils/test-helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5627,5630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5627,5630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Page, expect } from '@playwright/test';\n\n/**\n * Common test utilities for Playwright E2E tests\n */\n\nexport class TestHelpers {\n  constructor(private page: Page) {}\n\n  /**\n   * Login with provided credentials\n   */\n  async login(username: string = 'admin', password: string = 'AdminPassword123!') {\n    await this.page.goto('/login');\n    await this.page.locator('input[name=\"username\"]').fill(username);\n    await this.page.locator('input[name=\"password\"]').fill(password);\n    await this.page.locator('button[type=\"submit\"]').click();\n    await expect(this.page).toHaveURL(/.*\\/dashboard/);\n  }\n\n  /**\n   * Wait for loading to complete\n   */\n  async waitForLoading() {\n    // Wait for loading spinners to disappear\n    await this.page.waitForSelector('.loading, [data-testid=\"loading\"]', { state: 'hidden', timeout: 10000 });\n  }\n\n  /**\n   * Navigate to a specific page and wait for it to load\n   */\n  async navigateAndWait(path: string) {\n    await this.page.goto(path);\n    await this.waitForLoading();\n  }\n\n  /**\n   * Fill form field by various selectors\n   */\n  async fillField(fieldName: string, value: string) {\n    const selectors = [\n      `input[name=\"${fieldName}\"]`,\n      `textarea[name=\"${fieldName}\"]`,\n      `select[name=\"${fieldName}\"]`,\n      `[aria-label*=\"${fieldName}\" i]`,\n      `[placeholder*=\"${fieldName}\" i]`\n    ];\n\n    for (const selector of selectors) {\n      const element = this.page.locator(selector);\n      if (await element.count() > 0) {\n        await element.fill(value);\n        return;\n      }\n    }\n    \n    throw new Error(`Could not find field: ${fieldName}`);\n  }\n\n  /**\n   * Click button by text or aria-label\n   */\n  async clickButton(buttonText: string) {\n    const selectors = [\n      `button:has-text(\"${buttonText}\")`,\n      `[role=\"button\"]:has-text(\"${buttonText}\")`,\n      `button[aria-label*=\"${buttonText}\" i]`,\n      `[aria-label*=\"${buttonText}\" i][role=\"button\"]`\n    ];\n\n    for (const selector of selectors) {\n      const element = this.page.locator(selector);\n      if (await element.count() > 0) {\n        await element.click();\n        return;\n      }\n    }\n    \n    throw new Error(`Could not find button: ${buttonText}`);\n  }\n\n  /**\n   * Wait for and verify success message\n   */\n  async expectSuccessMessage(message?: string) {\n    const successSelectors = [\n      'text=/success|successful|saved|submitted/i',\n      '[role=\"alert\"]:has-text(/success/i)',\n      '.success-message, .alert-success'\n    ];\n\n    if (message) {\n      await expect(this.page.locator(`text=/${message}/i`)).toBeVisible();\n    } else {\n      for (const selector of successSelectors) {\n        const element = this.page.locator(selector);\n        if (await element.count() > 0) {\n          await expect(element).toBeVisible();\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * Wait for and verify error message\n   */\n  async expectErrorMessage(message?: string) {\n    const errorSelectors = [\n      'text=/error|failed|invalid|required/i',\n      '[role=\"alert\"]:has-text(/error/i)',\n      '.error-message, .alert-error'\n    ];\n\n    if (message) {\n      await expect(this.page.locator(`text=/${message}/i`)).toBeVisible();\n    } else {\n      for (const selector of errorSelectors) {\n        const element = this.page.locator(selector);\n        if (await element.count() > 0) {\n          await expect(element).toBeVisible();\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * Select option from dropdown\n   */\n  async selectOption(selectName: string, optionValue: string) {\n    const selectors = [\n      `select[name=\"${selectName}\"]`,\n      `[aria-label*=\"${selectName}\" i]`,\n      `[data-testid*=\"${selectName}\"]`\n    ];\n\n    for (const selector of selectors) {\n      const element = this.page.locator(selector);\n      if (await element.count() > 0) {\n        await element.selectOption(optionValue);\n        return;\n      }\n    }\n    \n    throw new Error(`Could not find select: ${selectName}`);\n  }\n\n  /**\n   * Upload file to file input\n   */\n  async uploadFile(fileName: string, content: Buffer, mimeType: string) {\n    const fileInput = this.page.locator('input[type=\"file\"]');\n    await fileInput.setInputFiles({\n      name: fileName,\n      mimeType: mimeType,\n      buffer: content\n    });\n  }\n\n  /**\n   * Take screenshot with timestamp\n   */\n  async takeScreenshot(name: string) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    await this.page.screenshot({ \n      path: `screenshots/${name}-${timestamp}.png`,\n      fullPage: true \n    });\n  }\n\n  /**\n   * Check if element exists without throwing\n   */\n  async elementExists(selector: string): Promise<boolean> {\n    return await this.page.locator(selector).count() > 0;\n  }\n\n  /**\n   * Wait for network requests to complete\n   */\n  async waitForNetworkIdle() {\n    await this.page.waitForLoadState('networkidle');\n  }\n\n  /**\n   * Simulate keyboard shortcuts\n   */\n  async pressShortcut(shortcut: string) {\n    await this.page.keyboard.press(shortcut);\n  }\n\n  /**\n   * Verify page accessibility basics\n   */\n  async checkBasicAccessibility() {\n    // Check for h1\n    await expect(this.page.locator('h1')).toHaveCount({ min: 1 });\n    \n    // Check for main landmark\n    const main = this.page.locator('main, [role=\"main\"]');\n    if (await main.count() > 0) {\n      await expect(main).toBeVisible();\n    }\n    \n    // Check for navigation\n    const nav = this.page.locator('nav, [role=\"navigation\"]');\n    if (await nav.count() > 0) {\n      await expect(nav).toBeVisible();\n    }\n  }\n\n  /**\n   * Mock API responses for testing\n   */\n  async mockApiResponse(url: string, response: any) {\n    await this.page.route(url, route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(response)\n      });\n    });\n  }\n\n  /**\n   * Simulate network error\n   */\n  async simulateNetworkError(urlPattern: string) {\n    await this.page.route(urlPattern, route => route.abort());\n  }\n}\n\n/**\n * Test data generators\n */\nexport class TestData {\n  static generateSpeaker(id: string = 'TEST_001') {\n    return {\n      speaker_id: id,\n      name: `Test Speaker ${id}`,\n      bucket: 'HIGH_TOUCH',\n      note_count: 25,\n      average_ser_score: 15.5,\n      has_sufficient_data: true\n    };\n  }\n\n  static generateValidationItem(id: string = '1') {\n    return {\n      id,\n      original_asr_text: 'The patient has diabetis and high blod pressure.',\n      rag_corrected_text: 'The patient has diabetes and high blood pressure.',\n      final_reference_text: 'The patient has diabetes and high blood pressure.',\n      confidence_score: 0.95\n    };\n  }\n\n  static generateErrorReport() {\n    return {\n      text: 'The patient has diabetis and high blod pressure.',\n      category: 'Medical Terminology',\n      severity: 'High',\n      description: 'Spelling error in medical terminology'\n    };\n  }\n}\n\n/**\n * Page Object Models\n */\nexport class LoginPage {\n  constructor(private page: Page) {}\n\n  async login(username: string, password: string) {\n    await this.page.goto('/login');\n    await this.page.locator('input[name=\"username\"]').fill(username);\n    await this.page.locator('input[name=\"password\"]').fill(password);\n    await this.page.locator('button[type=\"submit\"]').click();\n  }\n}\n\nexport class DashboardPage {\n  constructor(private page: Page) {}\n\n  async navigateToErrorReporting() {\n    await this.page.locator('a[href*=\"error-reporting\"]').click();\n  }\n\n  async navigateToVerification() {\n    await this.page.locator('a[href*=\"verification\"]').click();\n  }\n\n  async navigateToAdmin() {\n    await this.page.locator('a[href*=\"admin\"]').click();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/app/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/app/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/app/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/common.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Common domain types shared across the application\n */\n\nexport interface PaginationParams {\n  page: number;\n  pageSize: number;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  totalCount: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\nexport interface SortParams {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface ApiResponse<T> {\n  data: T;\n  message?: string;\n  success: boolean;\n}\n\nexport interface ApiError {\n  message: string;\n  code?: string;\n  details?: Record<string, any>;\n}\n\nexport type LoadingState = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nexport interface AsyncState<T> {\n  data: T | null;\n  loading: LoadingState;\n  error: string | null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/dashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SessionStatus' is defined but never used.","line":6,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3916,3919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3916,3919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4744,4747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4744,4747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4775,4778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4775,4778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5199,5202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5199,5202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7321,7324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7321,7324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":319,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7352,7355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7352,7355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":322,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7427,7430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7427,7430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7563,7566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7563,7566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard domain types for comprehensive system overview\n */\n\nimport { SpeakerBucket, QualityTrend } from './speaker';\nimport { ImprovementAssessment, SessionStatus } from './mt-validation';\n\nexport interface DashboardMetrics {\n  speaker_statistics: SpeakerBucketStats;\n  ser_metrics: SERMetricsSummary;\n  rag_processing: RAGProcessingSummary;\n  mt_validation: MTValidationSummary;\n  transition_statistics: TransitionStatisticsSummary;\n  services_status: ServicesHealthStatus;\n  timestamp: string;\n}\n\nexport interface SpeakerBucketStats {\n  bucket_distribution: Record<SpeakerBucket, number>;\n  total_speakers: number;\n  quality_metrics: {\n    average_ser_score: number;\n    quality_distribution: Record<string, number>;\n    improvement_trends: Record<QualityTrend, number>;\n  };\n  transition_metrics: {\n    pending_transitions: number;\n    recent_transitions: number;\n    success_rate: number;\n  };\n  data_quality: {\n    speakers_with_sufficient_data: number;\n    data_coverage_percentage: number;\n  };\n}\n\nexport interface SERMetricsSummary {\n  summary: {\n    total_calculations: number;\n    average_ser_score: number;\n    quality_distribution: Record<string, number>;\n    improvement_rate: number;\n  };\n  trends: {\n    daily_calculations: Array<{\n      date: string;\n      count: number;\n      average_score: number;\n    }>;\n    quality_improvement_over_time: Array<{\n      date: string;\n      improvement_percentage: number;\n    }>;\n  };\n  performance: {\n    calculation_speed_ms: number;\n    batch_processing_efficiency: number;\n    error_rate: number;\n  };\n}\n\nexport interface RAGProcessingSummary {\n  summary: {\n    total_speakers_processed: number;\n    total_error_correction_pairs: number;\n    processing_performance: Record<string, number>;\n    active_jobs: number;\n  };\n  quality_metrics: {\n    correction_accuracy: number;\n    confidence_scores: {\n      high_confidence: number;\n      medium_confidence: number;\n      low_confidence: number;\n    };\n    error_pattern_coverage: number;\n  };\n  processing_stats: {\n    average_processing_time_minutes: number;\n    successful_jobs: number;\n    failed_jobs: number;\n    queue_length: number;\n  };\n}\n\nexport interface MTValidationSummary {\n  statistics: {\n    total_sessions: number;\n    active_sessions: number;\n    completed_sessions: number;\n    total_feedback_items: number;\n  };\n  quality_metrics: {\n    average_rating: number;\n    improvement_distribution: Record<ImprovementAssessment, number>;\n    bucket_change_recommendations: number;\n    validation_accuracy: number;\n  };\n  productivity: {\n    average_session_duration_minutes: number;\n    items_per_hour: number;\n    mt_user_count: number;\n    efficiency_score: number;\n  };\n}\n\nexport interface TransitionStatisticsSummary {\n  statistics: {\n    total_requests: number;\n    pending_requests: number;\n    approved_requests: number;\n    rejected_requests: number;\n    approval_rate: number;\n  };\n  trends: {\n    requests_over_time: Array<{\n      date: string;\n      count: number;\n      approval_rate: number;\n    }>;\n    bucket_transition_patterns: Record<string, number>;\n  };\n  impact: {\n    speakers_promoted: number;\n    speakers_demoted: number;\n    quality_improvement_correlation: number;\n    cost_savings_estimate: number;\n  };\n}\n\nexport interface ServicesHealthStatus {\n  user_management: ServiceHealth;\n  verification: ServiceHealth;\n  rag_integration: ServiceHealth;\n  api_gateway: ServiceHealth;\n}\n\nexport interface ServiceHealth {\n  status: 'healthy' | 'degraded' | 'error' | 'unknown';\n  response_time_ms: number;\n  uptime_percentage: number;\n  last_check: string;\n  error_rate: number;\n  details?: {\n    cpu_usage: number;\n    memory_usage: number;\n    disk_usage: number;\n    active_connections: number;\n  };\n}\n\n// Chart and visualization types\nexport interface ChartDataPoint {\n  x: string | number;\n  y: number;\n  label?: string;\n  color?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TimeSeriesData {\n  series: Array<{\n    name: string;\n    data: ChartDataPoint[];\n    color?: string;\n  }>;\n  xAxis: {\n    type: 'datetime' | 'category';\n    title: string;\n  };\n  yAxis: {\n    title: string;\n    format?: string;\n  };\n}\n\nexport interface PieChartData {\n  data: Array<{\n    name: string;\n    value: number;\n    color?: string;\n    percentage?: number;\n  }>;\n  total: number;\n}\n\nexport interface BarChartData {\n  categories: string[];\n  series: Array<{\n    name: string;\n    data: number[];\n    color?: string;\n  }>;\n}\n\n// Dashboard widget types\nexport interface DashboardWidget {\n  id: string;\n  type: 'metric' | 'chart' | 'table' | 'status' | 'progress';\n  title: string;\n  size: 'small' | 'medium' | 'large' | 'full';\n  position: { x: number; y: number; w: number; h: number };\n  data: any;\n  config?: Record<string, any>;\n  refreshInterval?: number;\n  lastUpdated?: string;\n}\n\nexport interface DashboardLayout {\n  id: string;\n  name: string;\n  description?: string;\n  widgets: DashboardWidget[];\n  isDefault: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Real-time update types\nexport interface DashboardUpdate {\n  type: 'metric_update' | 'status_change' | 'alert' | 'refresh';\n  widget_id?: string;\n  data: any;\n  timestamp: string;\n}\n\n// Alert and notification types\nexport interface DashboardAlert {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  timestamp: string;\n  acknowledged: boolean;\n  actions?: Array<{\n    label: string;\n    action: string;\n    primary?: boolean;\n  }>;\n}\n\n// Filter and time range types\nexport interface DashboardFilters {\n  dateRange: {\n    start: string;\n    end: string;\n    preset?: 'today' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  };\n  speakers?: string[];\n  buckets?: SpeakerBucket[];\n  services?: string[];\n  mtUsers?: string[];\n}\n\nexport interface QuickMetric {\n  label: string;\n  value: number | string;\n  unit?: string;\n  trend?: {\n    direction: 'up' | 'down' | 'stable';\n    percentage: number;\n    period: string;\n  };\n  status?: 'good' | 'warning' | 'critical';\n  icon?: string;\n  color?: string;\n}\n\n// Export and reporting types\nexport interface DashboardReport {\n  id: string;\n  title: string;\n  description?: string;\n  filters: DashboardFilters;\n  widgets: string[];\n  format: 'pdf' | 'excel' | 'csv' | 'json';\n  schedule?: {\n    frequency: 'daily' | 'weekly' | 'monthly';\n    time: string;\n    recipients: string[];\n  };\n  createdAt: string;\n  lastGenerated?: string;\n}\n\n// Performance monitoring types\nexport interface PerformanceMetrics {\n  page_load_time: number;\n  api_response_times: Record<string, number>;\n  chart_render_times: Record<string, number>;\n  memory_usage: number;\n  error_count: number;\n  user_interactions: number;\n}\n\n// User preferences for dashboard\nexport interface DashboardPreferences {\n  default_layout: string;\n  refresh_interval: number;\n  theme: 'light' | 'dark' | 'auto';\n  timezone: string;\n  number_format: 'US' | 'EU' | 'custom';\n  chart_animations: boolean;\n  auto_refresh: boolean;\n  notification_settings: {\n    alerts: boolean;\n    email_reports: boolean;\n    push_notifications: boolean;\n  };\n}\n\n// Drill-down and navigation types\nexport interface DrillDownContext {\n  source_widget: string;\n  source_data: any;\n  filters: Record<string, any>;\n  breadcrumb: Array<{\n    label: string;\n    filters: Record<string, any>;\n  }>;\n}\n\nexport interface NavigationAction {\n  type: 'drill_down' | 'filter' | 'navigate' | 'export';\n  target?: string;\n  data?: any;\n  context?: DrillDownContext;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/error-report.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[684,687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[684,687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1008,1011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1008,1011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Report domain types based on Error Reporting Service schemas\n */\n\nexport enum SeverityLevel {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\nexport enum ErrorStatus {\n  PENDING = 'pending',\n  PROCESSED = 'processed',\n  ARCHIVED = 'archived',\n}\n\nexport interface ErrorReport {\n  errorId: string;\n  jobId: string;\n  speakerId: string;\n  reportedBy: string;\n  originalText: string;\n  correctedText: string;\n  errorCategories: string[];\n  severityLevel: SeverityLevel;\n  startPosition: number;\n  endPosition: number;\n  contextNotes?: string;\n  errorTimestamp: string;\n  reportedAt: string;\n  status: ErrorStatus;\n  metadata?: Record<string, any>;\n}\n\nexport interface SubmitErrorReportRequest {\n  jobId: string;\n  speakerId: string;\n  originalText: string;\n  correctedText: string;\n  errorCategories: string[];\n  severityLevel: SeverityLevel;\n  startPosition: number;\n  endPosition: number;\n  reportedBy: string;\n  contextNotes?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ErrorFilters {\n  jobIds?: string[];\n  speakerIds?: string[];\n  errorCategories?: string[];\n  severityLevels?: SeverityLevel[];\n  statuses?: ErrorStatus[];\n  reportedBy?: string[];\n  dateRange?: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport interface SearchErrorsRequest {\n  requestedBy: string;\n  filters: ErrorFilters;\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n  sort: {\n    field: string;\n    direction: 'asc' | 'desc';\n  };\n}\n\nexport interface UpdateErrorReportRequest {\n  errorId: string;\n  updatedBy: string;\n  updates: Partial<Pick<ErrorReport, 'correctedText' | 'errorCategories' | 'severityLevel' | 'contextNotes' | 'status'>>;\n}\n\n// Text selection types for the UI\nexport interface TextSelection {\n  text: string;\n  startPosition: number;\n  endPosition: number;\n  selectionId: string;\n}\n\nexport interface NonContiguousSelection {\n  selections: TextSelection[];\n  combinedText: string;\n}\n\n// Error categorization types\nexport interface ErrorCategory {\n  id: string;\n  name: string;\n  description: string;\n  parentCategory?: string;\n  isActive: boolean;\n}\n\n// Analytics types for error reporting\nexport interface ErrorAnalytics {\n  totalErrors: number;\n  errorsByCategory: Record<string, number>;\n  errorsBySeverity: Record<SeverityLevel, number>;\n  errorsByStatus: Record<ErrorStatus, number>;\n  trendsOverTime: Array<{\n    date: string;\n    count: number;\n  }>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/mt-validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1540,1543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1540,1543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1995,1998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1995,1998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2727,2730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2727,2730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3104,3107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3104,3107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6851,6854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6851,6854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MT Validation domain types\n */\n\nexport enum SessionStatus {\n  PENDING = 'pending',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled'\n}\n\nexport enum ImprovementAssessment {\n  SIGNIFICANT = 'significant',\n  MODERATE = 'moderate',\n  MINIMAL = 'minimal',\n  NONE = 'none',\n  WORSE = 'worse'\n}\n\nexport enum ValidationItemStatus {\n  PENDING = 'pending',\n  IN_REVIEW = 'in_review',\n  COMPLETED = 'completed',\n  SKIPPED = 'skipped'\n}\n\nexport interface SERMetrics {\n  ser_score: number;\n  edit_distance: number;\n  insertions: number;\n  deletions: number;\n  substitutions: number;\n  moves: number;\n  quality_level: 'high' | 'medium' | 'low';\n  is_acceptable_quality: boolean;\n}\n\nexport interface SERComparison {\n  original_ser: SERMetrics;\n  corrected_ser: SERMetrics;\n  improvement: number;\n  improvement_percentage: number;\n  is_significant_improvement: boolean;\n}\n\nexport interface ValidationTestData {\n  data_id: string;\n  speaker_id: string;\n  original_asr_text: string;\n  rag_corrected_text: string;\n  final_reference_text: string;\n  original_ser_metrics: SERMetrics;\n  corrected_ser_metrics: SERMetrics;\n  improvement_metrics: SERComparison;\n  metadata?: Record<string, any>;\n}\n\nexport interface ValidationSession {\n  session_id: string;\n  speaker_id: string;\n  session_name: string;\n  test_data_count: number;\n  status: SessionStatus;\n  mt_user_id?: string;\n  progress_percentage: number;\n  started_at?: string;\n  completed_at?: string;\n  duration_minutes?: number;\n  session_metadata?: Record<string, any>;\n  created_at: string;\n}\n\nexport interface MTFeedback {\n  feedback_id: string;\n  session_id: string;\n  historical_data_id: string;\n  original_asr_text: string;\n  rag_corrected_text: string;\n  final_reference_text: string;\n  mt_feedback_rating: number; // 1-5 scale\n  mt_comments?: string;\n  improvement_assessment: ImprovementAssessment;\n  recommended_for_bucket_change: boolean;\n  ser_comparison: SERComparison;\n  feedback_metadata?: Record<string, any>;\n  created_at: string;\n}\n\nexport interface TextDifference {\n  type: 'equal' | 'insert' | 'delete' | 'replace';\n  originalText: string;\n  correctedText: string;\n  position: {\n    start: number;\n    end: number;\n  };\n  confidence?: number;\n}\n\nexport interface ValidationItem {\n  item_id: string;\n  session_id: string;\n  test_data: ValidationTestData;\n  status: ValidationItemStatus;\n  feedback?: MTFeedback;\n  differences: TextDifference[];\n  review_time_seconds?: number;\n  created_at: string;\n  completed_at?: string;\n}\n\n// Request/Response types\nexport interface StartValidationSessionRequest {\n  speaker_id: string;\n  session_name: string;\n  test_data_ids: string[];\n  mt_user_id: string;\n  session_metadata?: Record<string, any>;\n}\n\nexport interface SubmitMTFeedbackRequest {\n  session_id: string;\n  historical_data_id: string;\n  original_asr_text: string;\n  rag_corrected_text: string;\n  final_reference_text: string;\n  mt_feedback_rating: number;\n  mt_comments?: string;\n  improvement_assessment: ImprovementAssessment;\n  recommended_for_bucket_change: boolean;\n  feedback_metadata?: Record<string, any>;\n}\n\nexport interface CompleteValidationSessionRequest {\n  session_id: string;\n  completion_notes?: string;\n  session_summary?: string;\n}\n\n// UI-specific types\nexport interface ValidationWorkflowState {\n  currentSession: ValidationSession | null;\n  currentItem: ValidationItem | null;\n  currentItemIndex: number;\n  totalItems: number;\n  sessionProgress: number;\n  isReviewing: boolean;\n  showDifferences: boolean;\n  showSERMetrics: boolean;\n  comparisonMode: 'side-by-side' | 'unified' | 'overlay';\n}\n\nexport interface MTValidationFilters {\n  session_status?: SessionStatus;\n  mt_user_id?: string;\n  speaker_id?: string;\n  date_range_start?: string;\n  date_range_end?: string;\n  improvement_assessment?: ImprovementAssessment;\n  rating_min?: number;\n  rating_max?: number;\n}\n\nexport interface ValidationSessionSummary {\n  session: ValidationSession;\n  total_feedback_items: number;\n  average_rating: number;\n  improvement_distribution: Record<ImprovementAssessment, number>;\n  bucket_change_recommendations: number;\n  average_review_time_minutes: number;\n  quality_insights: {\n    significant_improvements: number;\n    areas_for_improvement: string[];\n    overall_assessment: string;\n  };\n}\n\nexport interface MTUserStatistics {\n  mt_user_id: string;\n  total_sessions: number;\n  completed_sessions: number;\n  total_feedback_items: number;\n  average_session_duration_minutes: number;\n  feedback_quality_score: number;\n  bucket_change_recommendations: number;\n  accuracy_score: number;\n  productivity_score: number;\n  recent_activity: Array<{\n    date: string;\n    sessions_completed: number;\n    items_reviewed: number;\n  }>;\n}\n\nexport interface DifferenceHighlightOptions {\n  showInsertions: boolean;\n  showDeletions: boolean;\n  showSubstitutions: boolean;\n  showMoves: boolean;\n  highlightIntensity: 'subtle' | 'medium' | 'strong';\n  colorScheme: 'default' | 'colorblind' | 'high-contrast';\n}\n\nexport interface ValidationKeyboardShortcuts {\n  nextItem: string;\n  previousItem: string;\n  submitFeedback: string;\n  toggleDifferences: string;\n  toggleSERMetrics: string;\n  focusRating: string;\n  focusComments: string;\n  saveAndNext: string;\n}\n\n// Form types\nexport interface MTFeedbackFormData {\n  rating: number;\n  comments: string;\n  improvement_assessment: ImprovementAssessment;\n  recommended_for_bucket_change: boolean;\n  confidence_level: number;\n  review_notes: string;\n}\n\nexport interface ValidationPreferences {\n  auto_advance: boolean;\n  show_ser_metrics_by_default: boolean;\n  highlight_differences_by_default: boolean;\n  default_comparison_mode: 'side-by-side' | 'unified' | 'overlay';\n  keyboard_shortcuts_enabled: boolean;\n  auto_save_feedback: boolean;\n  review_time_tracking: boolean;\n}\n\n// Analytics types\nexport interface ValidationAnalytics {\n  session_id: string;\n  total_review_time_minutes: number;\n  items_per_minute: number;\n  accuracy_metrics: {\n    consistent_ratings: number;\n    rating_variance: number;\n    feedback_quality_score: number;\n  };\n  improvement_insights: {\n    most_common_assessment: ImprovementAssessment;\n    bucket_change_rate: number;\n    quality_trend: 'improving' | 'stable' | 'declining';\n  };\n  efficiency_metrics: {\n    average_time_per_item: number;\n    fastest_review_time: number;\n    slowest_review_time: number;\n    optimal_review_time_range: [number, number];\n  };\n}\n\n// Export types\nexport interface ValidationExportData {\n  session_info: ValidationSession;\n  feedback_items: MTFeedback[];\n  summary_statistics: ValidationSessionSummary;\n  export_timestamp: string;\n  export_format: 'csv' | 'excel' | 'pdf' | 'json';\n}\n\n// Real-time updates\nexport interface ValidationUpdate {\n  type: 'session_progress' | 'item_completed' | 'session_completed' | 'error';\n  session_id: string;\n  data: any;\n  timestamp: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/speaker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[825,828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[825,828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3526,3529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3526,3529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3932,3935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3932,3935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4935,4938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4935,4938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker domain types for bucket management\n */\n\nexport enum SpeakerBucket {\n  HIGH_TOUCH = 'HIGH_TOUCH',\n  MEDIUM_TOUCH = 'MEDIUM_TOUCH',\n  LOW_TOUCH = 'LOW_TOUCH',\n  NO_TOUCH = 'NO_TOUCH'\n}\n\nexport enum QualityTrend {\n  IMPROVING = 'improving',\n  STABLE = 'stable',\n  DECLINING = 'declining',\n  INSUFFICIENT_DATA = 'insufficient_data'\n}\n\nexport enum TransitionStatus {\n  PENDING = 'pending',\n  APPROVED = 'approved',\n  REJECTED = 'rejected',\n  CANCELLED = 'cancelled'\n}\n\nexport interface Speaker {\n  speaker_id: string;\n  speaker_identifier: string;\n  speaker_name: string;\n  current_bucket: SpeakerBucket;\n  recommended_bucket?: SpeakerBucket;\n  note_count: number;\n  average_ser_score: number;\n  quality_trend: QualityTrend;\n  should_transition: boolean;\n  has_sufficient_data: boolean;\n  metadata?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SpeakerSearchFilters {\n  name_pattern?: string;\n  bucket?: SpeakerBucket;\n  min_ser_score?: number;\n  max_ser_score?: number;\n  has_sufficient_data?: boolean;\n  quality_trend?: QualityTrend;\n}\n\nexport interface SpeakerSearchParams extends SpeakerSearchFilters {\n  page?: number;\n  page_size?: number;\n}\n\nexport interface SpeakerListResponse {\n  speakers: Speaker[];\n  total_count: number;\n  page: number;\n  page_size: number;\n  total_pages: number;\n}\n\nexport interface BucketTransitionRequest {\n  request_id: string;\n  speaker_id: string;\n  from_bucket: SpeakerBucket;\n  to_bucket: SpeakerBucket;\n  transition_type: string;\n  transition_reason: string;\n  ser_improvement?: number;\n  status: TransitionStatus;\n  requested_by?: string;\n  approved_by?: string;\n  approval_notes?: string;\n  is_urgent: boolean;\n  priority_score: number;\n  processing_time_hours?: number;\n  created_at: string;\n  approved_at?: string;\n}\n\nexport interface CreateTransitionRequest {\n  speaker_id: string;\n  from_bucket: SpeakerBucket;\n  to_bucket: SpeakerBucket;\n  transition_reason: string;\n  ser_improvement?: number;\n  requested_by: string;\n}\n\nexport interface SpeakerBucketStats {\n  bucket_distribution: Record<SpeakerBucket, number>;\n  total_speakers: number;\n  quality_metrics: {\n    average_ser_score: number;\n    quality_distribution: Record<string, number>;\n    improvement_trends: Record<string, number>;\n  };\n  transition_metrics: {\n    pending_transitions: number;\n    recent_transitions: number;\n    success_rate: number;\n  };\n  data_quality: {\n    speakers_with_sufficient_data: number;\n    data_coverage_percentage: number;\n  };\n}\n\nexport interface SERMetrics {\n  ser_score: number;\n  edit_distance: number;\n  insertions: number;\n  deletions: number;\n  substitutions: number;\n  moves: number;\n  quality_level: 'high' | 'medium' | 'low';\n  is_acceptable_quality: boolean;\n}\n\nexport interface SpeakerSERAnalysis {\n  speaker_id: string;\n  total_calculations: number;\n  average_ser_score: number;\n  quality_distribution: Record<string, number>;\n  historical_trend: Array<{\n    date: string;\n    ser_score: number;\n    note_count: number;\n  }>;\n  improvement_metrics: {\n    trend_direction: QualityTrend;\n    improvement_rate: number;\n    consistency_score: number;\n  };\n  error_pattern_analysis?: {\n    common_errors: Array<{\n      error_type: string;\n      frequency: number;\n      examples: string[];\n    }>;\n    improvement_opportunities: string[];\n  };\n}\n\nexport interface ComprehensiveSpeakerView {\n  speaker: Speaker;\n  ser_analysis?: SpeakerSERAnalysis;\n  error_patterns?: {\n    total_pairs: number;\n    error_statistics: Record<string, any>;\n    error_patterns: Record<string, number>;\n    high_confidence_pairs: number;\n    training_suitable_pairs: number;\n  };\n  transition_history?: BucketTransitionRequest[];\n  timestamp: string;\n}\n\n// UI-specific types\nexport interface SpeakerTableColumn {\n  field: keyof Speaker | 'actions';\n  headerName: string;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n  renderCell?: (params: any) => React.ReactNode;\n}\n\nexport interface SpeakerSelectionState {\n  selectedSpeakers: string[];\n  searchFilters: SpeakerSearchFilters;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n  currentPage: number;\n  pageSize: number;\n}\n\nexport interface BucketVisualizationData {\n  bucket: SpeakerBucket;\n  count: number;\n  percentage: number;\n  averageQuality: number;\n  trend: QualityTrend;\n  color: string;\n}\n\n// API Response types\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: string;\n  };\n  timestamp: string;\n  request_id: string;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    page_size: number;\n    total_count: number;\n    total_pages: number;\n    has_next: boolean;\n    has_previous: boolean;\n  };\n}\n\n// Form types\nexport interface SpeakerFormData {\n  speaker_identifier: string;\n  speaker_name: string;\n  initial_bucket: SpeakerBucket;\n  metadata?: Record<string, any>;\n}\n\nexport interface TransitionRequestFormData {\n  speaker_id: string;\n  to_bucket: SpeakerBucket;\n  transition_reason: string;\n  ser_improvement?: number;\n}\n\n// Filter and search types\nexport interface AdvancedSearchFilters extends SpeakerSearchFilters {\n  created_date_from?: string;\n  created_date_to?: string;\n  last_updated_from?: string;\n  last_updated_to?: string;\n  transition_status?: TransitionStatus;\n  has_pending_transitions?: boolean;\n}\n\nexport interface QuickFilterOption {\n  label: string;\n  value: string;\n  filters: Partial<SpeakerSearchFilters>;\n  count?: number;\n}\n\n// Dashboard types\nexport interface DashboardMetrics {\n  speaker_statistics: SpeakerBucketStats;\n  ser_metrics: {\n    summary: {\n      total_calculations: number;\n      average_ser_score: number;\n      quality_distribution: Record<string, number>;\n    };\n  };\n  rag_processing: {\n    summary: {\n      total_speakers_processed: number;\n      total_error_correction_pairs: number;\n      processing_performance: Record<string, number>;\n    };\n  };\n  transition_statistics: {\n    statistics: {\n      total_requests: number;\n      pending_requests: number;\n      approval_rate: number;\n      urgent_requests: number;\n    };\n  };\n  services_status: Record<string, 'healthy' | 'error' | 'degraded'>;\n  timestamp: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/user.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[732,735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[732,735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1418,1421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1418,1421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1618,1621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1618,1621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1852,1855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1852,1855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User domain types based on User Management Service schemas\n */\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  QA_SUPERVISOR = 'qa_supervisor',\n  QA_PERSONNEL = 'qa_personnel',\n  MTS_PERSONNEL = 'mts_personnel',\n  VIEWER = 'viewer',\n}\n\nexport enum UserStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  SUSPENDED = 'suspended',\n  PENDING = 'pending',\n}\n\nexport interface User {\n  userId: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  roles: UserRole[];\n  permissions: string[];\n  status: UserStatus;\n  department?: string;\n  phoneNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n  lastLogin?: string;\n  isActive: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport interface AuthenticationRequest {\n  username: string;\n  password: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface AuthenticationResponse {\n  accessToken: string;\n  refreshToken: string;\n  tokenType: string;\n  expiresIn: number;\n  user: User;\n}\n\nexport interface TokenValidationResponse {\n  valid: boolean;\n  userId?: string;\n  username?: string;\n  permissions: string[];\n  expiresAt?: string;\n  message: string;\n}\n\nexport interface CreateUserRequest {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  roles: UserRole[];\n  department?: string;\n  phoneNumber?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface UpdateUserRequest {\n  userId: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  department?: string;\n  phoneNumber?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ChangePasswordRequest {\n  userId: string;\n  currentPassword: string;\n  newPassword: string;\n}\n\nexport interface UserAuditLogEntry {\n  id: string;\n  userId: string;\n  action: string;\n  details: Record<string, any>;\n  performedBy: string;\n  timestamp: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/domain/types/verification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/admin/pages/AdminPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/auth/auth-slice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/auth/pages/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1683,1686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1683,1686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1819,1822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1819,1822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Login page component\n */\n\nimport React, { useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress,\n  Container,\n} from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport { useLoginMutation } from '@infrastructure/api/auth-api';\nimport { setCredentials, selectToken } from '../auth-slice';\nimport { addNotification } from '@shared/slices/ui-slice';\n\nconst LoginPage: React.FC = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  \n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const token = useAppSelector(selectToken);\n  \n  const [login, { isLoading }] = useLoginMutation();\n\n  // Redirect if already authenticated\n  if (token) {\n    const from = (location.state as any)?.from?.pathname || '/dashboard';\n    return <Navigate to={from} replace />;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (!username || !password) {\n      setError('Please enter both username and password');\n      return;\n    }\n\n    try {\n      const result = await login({\n        username,\n        password,\n        ipAddress: '', // Could be populated from client\n        userAgent: navigator.userAgent,\n      }).unwrap();\n\n      dispatch(setCredentials(result));\n      dispatch(addNotification({\n        type: 'success',\n        message: 'Successfully logged in',\n      }));\n\n      // Redirect to intended page or dashboard\n      const from = (location.state as any)?.from?.pathname || '/dashboard';\n      window.location.href = from; // Force navigation to trigger auth provider\n    } catch (err: any) {\n      setError(err.data?.message || 'Login failed. Please try again.');\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Paper\n          elevation={3}\n          sx={{\n            padding: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            width: '100%',\n            maxWidth: 400,\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h4\" gutterBottom>\n            RAG Interface\n          </Typography>\n          \n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            Sign in to your account\n          </Typography>\n\n          {error && (\n            <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1, width: '100%' }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              disabled={isLoading}\n            />\n            \n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={isLoading}\n            />\n            \n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled={isLoading}\n            >\n              {isLoading ? <CircularProgress size={24} /> : 'Sign In'}\n            </Button>\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/AlertsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":36,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Alerts Panel Component\n * \n * Side panel for displaying system alerts and notifications\n * with filtering, acknowledgment, and action capabilities.\n */\n\nimport React, { useState } from 'react';\nimport {\n  Drawer,\n  Box,\n  Typography,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Chip,\n  Button,\n  Divider,\n  Alert,\n  ToggleButton,\n  ToggleButtonGroup,\n  Badge,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Info as InfoIcon,\n  Warning as WarningIcon,\n  Error as ErrorIcon,\n  CheckCircle as SuccessIcon,\n  Check as CheckIcon,\n  MarkEmailRead as MarkAllReadIcon,\n  FilterList as FilterIcon,\n} from '@mui/icons-material';\nimport { DashboardAlert } from '@/domain/types/dashboard';\n\ninterface AlertsPanelProps {\n  open: boolean;\n  onClose: () => void;\n  alerts: DashboardAlert[];\n  onAcknowledgeAlert?: (alertId: string) => void;\n  onMarkAllRead?: () => void;\n}\n\ntype AlertFilter = 'all' | 'unread' | 'info' | 'warning' | 'error' | 'success';\n\nexport const AlertsPanel: React.FC<AlertsPanelProps> = ({\n  open,\n  onClose,\n  alerts,\n  onAcknowledgeAlert,\n  onMarkAllRead,\n}) => {\n  const [filter, setFilter] = useState<AlertFilter>('all');\n\n  // Filter alerts based on current filter\n  const filteredAlerts = alerts.filter(alert => {\n    switch (filter) {\n      case 'unread':\n        return !alert.acknowledged;\n      case 'info':\n      case 'warning':\n      case 'error':\n      case 'success':\n        return alert.type === filter;\n      default:\n        return true;\n    }\n  });\n\n  // Get alert icon\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'info': return <InfoIcon color=\"info\" />;\n      case 'warning': return <WarningIcon color=\"warning\" />;\n      case 'error': return <ErrorIcon color=\"error\" />;\n      case 'success': return <SuccessIcon color=\"success\" />;\n      default: return <InfoIcon />;\n    }\n  };\n\n  // Get severity color\n  const getSeverityColor = (severity: string): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' => {\n    switch (severity) {\n      case 'critical': return 'error';\n      case 'high': return 'warning';\n      case 'medium': return 'info';\n      case 'low': return 'success';\n      default: return 'default';\n    }\n  };\n\n  // Format timestamp\n  const formatTimestamp = (timestamp: string) => {\n    const now = new Date();\n    const alertTime = new Date(timestamp);\n    const diffMs = now.getTime() - alertTime.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    \n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    \n    return alertTime.toLocaleDateString();\n  };\n\n  // Handle acknowledge alert\n  const handleAcknowledgeAlert = (alertId: string) => {\n    onAcknowledgeAlert?.(alertId);\n  };\n\n  // Get filter counts\n  const getFilterCounts = () => {\n    return {\n      all: alerts.length,\n      unread: alerts.filter(a => !a.acknowledged).length,\n      info: alerts.filter(a => a.type === 'info').length,\n      warning: alerts.filter(a => a.type === 'warning').length,\n      error: alerts.filter(a => a.type === 'error').length,\n      success: alerts.filter(a => a.type === 'success').length,\n    };\n  };\n\n  const filterCounts = getFilterCounts();\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        sx: { width: 400 }\n      }}\n    >\n      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        {/* Header */}\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Typography variant=\"h6\">\n              System Alerts\n            </Typography>\n            <IconButton onClick={onClose} size=\"small\">\n              <CloseIcon />\n            </IconButton>\n          </Box>\n\n          {/* Filter Buttons */}\n          <ToggleButtonGroup\n            value={filter}\n            exclusive\n            onChange={(_, newFilter) => newFilter && setFilter(newFilter)}\n            size=\"small\"\n            sx={{ mb: 2, flexWrap: 'wrap' }}\n          >\n            <ToggleButton value=\"all\">\n              <Badge badgeContent={filterCounts.all} color=\"primary\" max={99}>\n                All\n              </Badge>\n            </ToggleButton>\n            <ToggleButton value=\"unread\">\n              <Badge badgeContent={filterCounts.unread} color=\"error\" max={99}>\n                Unread\n              </Badge>\n            </ToggleButton>\n            <ToggleButton value=\"error\">\n              <Badge badgeContent={filterCounts.error} color=\"error\" max={99}>\n                Error\n              </Badge>\n            </ToggleButton>\n            <ToggleButton value=\"warning\">\n              <Badge badgeContent={filterCounts.warning} color=\"warning\" max={99}>\n                Warning\n              </Badge>\n            </ToggleButton>\n          </ToggleButtonGroup>\n\n          {/* Actions */}\n          {filterCounts.unread > 0 && (\n            <Button\n              startIcon={<MarkAllReadIcon />}\n              onClick={onMarkAllRead}\n              size=\"small\"\n              variant=\"outlined\"\n              fullWidth\n            >\n              Mark All as Read\n            </Button>\n          )}\n        </Box>\n\n        {/* Alerts List */}\n        <Box sx={{ flex: 1, overflow: 'auto' }}>\n          {filteredAlerts.length === 0 ? (\n            <Box sx={{ p: 3, textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {filter === 'unread' ? 'No unread alerts' : 'No alerts found'}\n              </Typography>\n            </Box>\n          ) : (\n            <List>\n              {filteredAlerts.map((alert, index) => (\n                <React.Fragment key={alert.id}>\n                  <ListItem\n                    sx={{\n                      backgroundColor: alert.acknowledged ? 'transparent' : 'action.hover',\n                      opacity: alert.acknowledged ? 0.7 : 1,\n                    }}\n                  >\n                    <ListItemIcon>\n                      {getAlertIcon(alert.type)}\n                    </ListItemIcon>\n                    \n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>\n                          <Typography variant=\"subtitle2\" fontWeight=\"medium\">\n                            {alert.title}\n                          </Typography>\n                          <Chip\n                            label={alert.severity.toUpperCase()}\n                            size=\"small\"\n                            color={getSeverityColor(alert.severity)}\n                            variant=\"outlined\"\n                          />\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                            {alert.message}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.disabled\">\n                            {alert.source} • {formatTimestamp(alert.timestamp)}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                    \n                    <ListItemSecondaryAction>\n                      {!alert.acknowledged && (\n                        <Tooltip title=\"Mark as read\">\n                          <IconButton\n                            edge=\"end\"\n                            size=\"small\"\n                            onClick={() => handleAcknowledgeAlert(alert.id)}\n                          >\n                            <CheckIcon />\n                          </IconButton>\n                        </Tooltip>\n                      )}\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  \n                  {/* Alert Actions */}\n                  {alert.actions && alert.actions.length > 0 && (\n                    <Box sx={{ px: 2, pb: 1 }}>\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                        {alert.actions.map((action, actionIndex) => (\n                          <Button\n                            key={actionIndex}\n                            size=\"small\"\n                            variant={action.primary ? 'contained' : 'outlined'}\n                            color=\"primary\"\n                            onClick={() => {\n                              // Handle action click\n                              console.log(`Action clicked: ${action.action}`);\n                            }}\n                          >\n                            {action.label}\n                          </Button>\n                        ))}\n                      </Box>\n                    </Box>\n                  )}\n                  \n                  {index < filteredAlerts.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n\n        {/* Footer */}\n        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n          <Typography variant=\"caption\" color=\"text.secondary\" textAlign=\"center\" display=\"block\">\n            {filteredAlerts.length} of {alerts.length} alerts shown\n          </Typography>\n        </Box>\n      </Box>\n    </Drawer>\n  );\n};\n\nexport default AlertsPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/DashboardFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarIcon' is defined but never used.","line":32,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3679,3682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3679,3682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Filters Component\n * \n * Comprehensive filtering dialog for dashboard data\n * with date ranges, speaker selection, and service filters.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  TextField,\n  Autocomplete,\n  ToggleButton,\n  ToggleButtonGroup,\n  IconButton,\n  Divider,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  CalendarToday as CalendarIcon,\n  FilterList as FilterIcon,\n  Clear as ClearIcon,\n} from '@mui/icons-material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DashboardFilters as DashboardFiltersType } from '@/domain/types/dashboard';\nimport { SpeakerBucket } from '@/domain/types/speaker';\n\ninterface DashboardFiltersProps {\n  open: boolean;\n  onClose: () => void;\n  filters: DashboardFiltersType;\n  onApplyFilters?: (filters: DashboardFiltersType) => void;\n}\n\n// Mock data - in real app, this would come from API\nconst mockSpeakers = [\n  { id: '1', name: 'Dr. John Smith', identifier: 'SPEAKER_001' },\n  { id: '2', name: 'Dr. Sarah Johnson', identifier: 'SPEAKER_002' },\n  { id: '3', name: 'Dr. Michael Brown', identifier: 'SPEAKER_003' },\n];\n\nconst mockMTUsers = [\n  { id: '1', name: 'Alice Wilson', email: 'alice@example.com' },\n  { id: '2', name: 'Bob Davis', email: 'bob@example.com' },\n  { id: '3', name: 'Carol Martinez', email: 'carol@example.com' },\n];\n\nconst services = [\n  'user_management',\n  'verification',\n  'rag_integration',\n  'api_gateway',\n];\n\nconst datePresets = [\n  { label: 'Today', value: 'today' },\n  { label: 'Yesterday', value: 'yesterday' },\n  { label: 'Last 7 days', value: 'week' },\n  { label: 'Last 30 days', value: 'month' },\n  { label: 'Last 90 days', value: 'quarter' },\n  { label: 'Last year', value: 'year' },\n  { label: 'Custom', value: 'custom' },\n];\n\nexport const DashboardFilters: React.FC<DashboardFiltersProps> = ({\n  open,\n  onClose,\n  filters,\n  onApplyFilters,\n}) => {\n  const [localFilters, setLocalFilters] = useState<DashboardFiltersType>(filters);\n\n  // Update local filters when props change\n  useEffect(() => {\n    setLocalFilters(filters);\n  }, [filters]);\n\n  // Handle date preset selection\n  const handleDatePresetChange = (preset: string) => {\n    const now = new Date();\n    let start: Date;\n    let end: Date = now;\n\n    switch (preset) {\n      case 'today':\n        start = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        break;\n      case 'yesterday':\n        start = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n        end = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n        break;\n      case 'week':\n        start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n      case 'quarter':\n        start = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        break;\n      case 'year':\n        start = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        return; // Custom - don't change dates\n    }\n\n    setLocalFilters(prev => ({\n      ...prev,\n      dateRange: {\n        start: start.toISOString().split('T')[0],\n        end: end.toISOString().split('T')[0],\n        preset,\n      },\n    }));\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (key: keyof DashboardFiltersType, value: any) => {\n    setLocalFilters(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  // Handle apply filters\n  const handleApply = () => {\n    onApplyFilters?.(localFilters);\n    onClose();\n  };\n\n  // Handle clear filters\n  const handleClear = () => {\n    const clearedFilters: DashboardFiltersType = {\n      dateRange: {\n        start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        end: new Date().toISOString().split('T')[0],\n        preset: 'week',\n      },\n    };\n    setLocalFilters(clearedFilters);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{ sx: { height: '80vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <FilterIcon color=\"primary\" />\n            <Typography variant=\"h6\">Dashboard Filters</Typography>\n          </Box>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <Grid container spacing={3}>\n            {/* Date Range */}\n            <Grid item xs={12}>\n              <Typography variant=\"h6\" gutterBottom>\n                Date Range\n              </Typography>\n              \n              {/* Date Presets */}\n              <Box sx={{ mb: 2 }}>\n                <ToggleButtonGroup\n                  value={localFilters.dateRange?.preset || 'custom'}\n                  exclusive\n                  onChange={(_, value) => value && handleDatePresetChange(value)}\n                  size=\"small\"\n                  sx={{ flexWrap: 'wrap' }}\n                >\n                  {datePresets.map((preset) => (\n                    <ToggleButton key={preset.value} value={preset.value}>\n                      {preset.label}\n                    </ToggleButton>\n                  ))}\n                </ToggleButtonGroup>\n              </Box>\n\n              {/* Custom Date Range */}\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <DatePicker\n                    label=\"Start Date\"\n                    value={localFilters.dateRange?.start ? new Date(localFilters.dateRange.start) : null}\n                    onChange={(date) => {\n                      if (date) {\n                        handleFilterChange('dateRange', {\n                          ...localFilters.dateRange,\n                          start: date.toISOString().split('T')[0],\n                          preset: 'custom',\n                        });\n                      }\n                    }}\n                    renderInput={(params) => <TextField {...params} fullWidth />}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <DatePicker\n                    label=\"End Date\"\n                    value={localFilters.dateRange?.end ? new Date(localFilters.dateRange.end) : null}\n                    onChange={(date) => {\n                      if (date) {\n                        handleFilterChange('dateRange', {\n                          ...localFilters.dateRange,\n                          end: date.toISOString().split('T')[0],\n                          preset: 'custom',\n                        });\n                      }\n                    }}\n                    renderInput={(params) => <TextField {...params} fullWidth />}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n\n            {/* Speakers */}\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h6\" gutterBottom>\n                Speakers\n              </Typography>\n              <Autocomplete\n                multiple\n                options={mockSpeakers}\n                getOptionLabel={(option) => `${option.name} (${option.identifier})`}\n                value={mockSpeakers.filter(speaker => localFilters.speakers?.includes(speaker.id))}\n                onChange={(_, value) => {\n                  handleFilterChange('speakers', value.map(speaker => speaker.id));\n                }}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      variant=\"outlined\"\n                      label={option.name}\n                      {...getTagProps({ index })}\n                      key={option.id}\n                    />\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    placeholder=\"Select speakers...\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n            </Grid>\n\n            {/* Speaker Buckets */}\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h6\" gutterBottom>\n                Speaker Buckets\n              </Typography>\n              <FormControl fullWidth>\n                <InputLabel>Buckets</InputLabel>\n                <Select\n                  multiple\n                  value={localFilters.buckets || []}\n                  onChange={(e) => handleFilterChange('buckets', e.target.value)}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {(selected as SpeakerBucket[]).map((value) => (\n                        <Chip\n                          key={value}\n                          label={value.replace('_', ' ')}\n                          size=\"small\"\n                        />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {Object.values(SpeakerBucket).map((bucket) => (\n                    <MenuItem key={bucket} value={bucket}>\n                      {bucket.replace('_', ' ')}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            {/* Services */}\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h6\" gutterBottom>\n                Services\n              </Typography>\n              <FormControl fullWidth>\n                <InputLabel>Services</InputLabel>\n                <Select\n                  multiple\n                  value={localFilters.services || []}\n                  onChange={(e) => handleFilterChange('services', e.target.value)}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {(selected as string[]).map((value) => (\n                        <Chip\n                          key={value}\n                          label={value.replace('_', ' ')}\n                          size=\"small\"\n                        />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {services.map((service) => (\n                    <MenuItem key={service} value={service}>\n                      {service.replace('_', ' ')}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            {/* MT Users */}\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h6\" gutterBottom>\n                MT Users\n              </Typography>\n              <Autocomplete\n                multiple\n                options={mockMTUsers}\n                getOptionLabel={(option) => `${option.name} (${option.email})`}\n                value={mockMTUsers.filter(user => localFilters.mtUsers?.includes(user.id))}\n                onChange={(_, value) => {\n                  handleFilterChange('mtUsers', value.map(user => user.id));\n                }}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      variant=\"outlined\"\n                      label={option.name}\n                      {...getTagProps({ index })}\n                      key={option.id}\n                    />\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    placeholder=\"Select MT users...\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n        </LocalizationProvider>\n      </DialogContent>\n\n      <DialogActions>\n        <Button\n          startIcon={<ClearIcon />}\n          onClick={handleClear}\n          color=\"secondary\"\n        >\n          Clear All\n        </Button>\n        \n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        \n        <Button\n          onClick={handleApply}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Apply Filters\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DashboardFilters;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/DashboardHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Header Component\n * \n * Header with title, connection status, refresh controls,\n * and quick action buttons.\n */\n\nimport React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Box,\n  IconButton,\n  Tooltip,\n  Chip,\n  CircularProgress,\n  Badge,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Fullscreen as FullscreenIcon,\n  FullscreenExit as FullscreenExitIcon,\n  WifiOff as DisconnectedIcon,\n  Wifi as ConnectedIcon,\n  Schedule as TimeIcon,\n} from '@mui/icons-material';\n\ninterface DashboardHeaderProps {\n  title: string;\n  subtitle?: string;\n  lastUpdated: string;\n  isConnected: boolean;\n  onRefresh: () => void;\n  onToggleFullscreen: () => void;\n  loading?: boolean;\n  isFullscreen?: boolean;\n}\n\nexport const DashboardHeader: React.FC<DashboardHeaderProps> = ({\n  title,\n  subtitle,\n  lastUpdated,\n  isConnected,\n  onRefresh,\n  onToggleFullscreen,\n  loading = false,\n  isFullscreen = false,\n}) => {\n  return (\n    <AppBar position=\"static\" elevation={1} sx={{ backgroundColor: 'background.paper', color: 'text.primary' }}>\n      <Toolbar>\n        {/* Title Section */}\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h5\" component=\"h1\" fontWeight=\"bold\">\n            {title}\n          </Typography>\n          {subtitle && (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {subtitle}\n            </Typography>\n          )}\n        </Box>\n\n        {/* Status and Controls */}\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          {/* Last Updated */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <TimeIcon fontSize=\"small\" color=\"action\" />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Last updated: {lastUpdated}\n            </Typography>\n          </Box>\n\n          {/* Connection Status */}\n          <Tooltip title={isConnected ? 'Connected' : 'Disconnected'}>\n            <Chip\n              icon={isConnected ? <ConnectedIcon /> : <DisconnectedIcon />}\n              label={isConnected ? 'Connected' : 'Disconnected'}\n              color={isConnected ? 'success' : 'error'}\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          </Tooltip>\n\n          {/* Refresh Button */}\n          <Tooltip title=\"Refresh Dashboard\">\n            <IconButton\n              onClick={onRefresh}\n              disabled={loading}\n              color=\"primary\"\n            >\n              {loading ? (\n                <CircularProgress size={24} />\n              ) : (\n                <RefreshIcon />\n              )}\n            </IconButton>\n          </Tooltip>\n\n          {/* Fullscreen Toggle */}\n          <Tooltip title={isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}>\n            <IconButton\n              onClick={onToggleFullscreen}\n              color=\"primary\"\n            >\n              {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default DashboardHeader;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/DashboardSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1721,1724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1721,1724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1971,1974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1971,1974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2086,2089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2086,2089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Settings Component\n * \n * Settings dialog for dashboard preferences, themes,\n * refresh intervals, and notification settings.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Slider,\n  TextField,\n  Divider,\n  IconButton,\n  Tabs,\n  Tab,\n  Alert,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Settings as SettingsIcon,\n  Palette as ThemeIcon,\n  Notifications as NotificationsIcon,\n  Speed as PerformanceIcon,\n} from '@mui/icons-material';\nimport { DashboardPreferences } from '@/domain/types/dashboard';\n\ninterface DashboardSettingsProps {\n  open: boolean;\n  onClose: () => void;\n  preferences: DashboardPreferences;\n  onSavePreferences?: (preferences: DashboardPreferences) => void;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ py: 2 }}>{children}</Box>}\n    </div>\n  );\n};\n\nexport const DashboardSettings: React.FC<DashboardSettingsProps> = ({\n  open,\n  onClose,\n  preferences,\n  onSavePreferences,\n}) => {\n  const [localPreferences, setLocalPreferences] = useState<DashboardPreferences>(preferences);\n  const [activeTab, setActiveTab] = useState(0);\n\n  // Update local preferences when props change\n  useEffect(() => {\n    setLocalPreferences(preferences);\n  }, [preferences]);\n\n  // Handle preference changes\n  const handlePreferenceChange = (key: keyof DashboardPreferences, value: any) => {\n    setLocalPreferences(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  // Handle nested preference changes\n  const handleNestedPreferenceChange = (\n    parentKey: keyof DashboardPreferences,\n    childKey: string,\n    value: any\n  ) => {\n    setLocalPreferences(prev => ({\n      ...prev,\n      [parentKey]: {\n        ...(prev[parentKey] as any),\n        [childKey]: value,\n      },\n    }));\n  };\n\n  // Handle save\n  const handleSave = () => {\n    onSavePreferences?.(localPreferences);\n    onClose();\n  };\n\n  // Handle reset to defaults\n  const handleReset = () => {\n    const defaultPreferences: DashboardPreferences = {\n      default_layout: 'default',\n      refresh_interval: 30000,\n      theme: 'light',\n      timezone: 'UTC',\n      number_format: 'US',\n      chart_animations: true,\n      auto_refresh: true,\n      notification_settings: {\n        alerts: true,\n        email_reports: false,\n        push_notifications: true,\n      },\n    };\n    setLocalPreferences(defaultPreferences);\n  };\n\n  // Format refresh interval for display\n  const formatRefreshInterval = (ms: number) => {\n    const seconds = ms / 1000;\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = seconds / 60;\n    return `${minutes}m`;\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{ sx: { height: '80vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <SettingsIcon color=\"primary\" />\n            <Typography variant=\"h6\">Dashboard Settings</Typography>\n          </Box>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        {/* Tabs */}\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n          <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>\n            <Tab icon={<SettingsIcon />} label=\"General\" />\n            <Tab icon={<ThemeIcon />} label=\"Appearance\" />\n            <Tab icon={<PerformanceIcon />} label=\"Performance\" />\n            <Tab icon={<NotificationsIcon />} label=\"Notifications\" />\n          </Tabs>\n        </Box>\n\n        {/* General Settings */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Default Layout</InputLabel>\n                <Select\n                  value={localPreferences.default_layout}\n                  onChange={(e) => handlePreferenceChange('default_layout', e.target.value)}\n                  label=\"Default Layout\"\n                >\n                  <MenuItem value=\"default\">Default</MenuItem>\n                  <MenuItem value=\"compact\">Compact</MenuItem>\n                  <MenuItem value=\"detailed\">Detailed</MenuItem>\n                  <MenuItem value=\"custom\">Custom</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Timezone</InputLabel>\n                <Select\n                  value={localPreferences.timezone}\n                  onChange={(e) => handlePreferenceChange('timezone', e.target.value)}\n                  label=\"Timezone\"\n                >\n                  <MenuItem value=\"UTC\">UTC</MenuItem>\n                  <MenuItem value=\"America/New_York\">Eastern Time</MenuItem>\n                  <MenuItem value=\"America/Chicago\">Central Time</MenuItem>\n                  <MenuItem value=\"America/Denver\">Mountain Time</MenuItem>\n                  <MenuItem value=\"America/Los_Angeles\">Pacific Time</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Number Format</InputLabel>\n                <Select\n                  value={localPreferences.number_format}\n                  onChange={(e) => handlePreferenceChange('number_format', e.target.value)}\n                  label=\"Number Format\"\n                >\n                  <MenuItem value=\"US\">US (1,234.56)</MenuItem>\n                  <MenuItem value=\"EU\">EU (1.234,56)</MenuItem>\n                  <MenuItem value=\"custom\">Custom</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={localPreferences.auto_refresh}\n                    onChange={(e) => handlePreferenceChange('auto_refresh', e.target.checked)}\n                  />\n                }\n                label=\"Auto-refresh dashboard data\"\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Appearance Settings */}\n        <TabPanel value={activeTab} index={1}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Theme</InputLabel>\n                <Select\n                  value={localPreferences.theme}\n                  onChange={(e) => handlePreferenceChange('theme', e.target.value)}\n                  label=\"Theme\"\n                >\n                  <MenuItem value=\"light\">Light</MenuItem>\n                  <MenuItem value=\"dark\">Dark</MenuItem>\n                  <MenuItem value=\"auto\">Auto (System)</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={localPreferences.chart_animations}\n                    onChange={(e) => handlePreferenceChange('chart_animations', e.target.checked)}\n                  />\n                }\n                label=\"Enable chart animations\"\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                Disable for better performance on slower devices\n              </Typography>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Performance Settings */}\n        <TabPanel value={activeTab} index={2}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Refresh Interval\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                How often to refresh dashboard data: {formatRefreshInterval(localPreferences.refresh_interval)}\n              </Typography>\n              <Slider\n                value={localPreferences.refresh_interval}\n                onChange={(_, value) => handlePreferenceChange('refresh_interval', value)}\n                min={5000}\n                max={300000}\n                step={5000}\n                marks={[\n                  { value: 5000, label: '5s' },\n                  { value: 30000, label: '30s' },\n                  { value: 60000, label: '1m' },\n                  { value: 300000, label: '5m' },\n                ]}\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={formatRefreshInterval}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <Alert severity=\"info\">\n                <Typography variant=\"body2\">\n                  Shorter refresh intervals provide more up-to-date data but may impact performance.\n                  Recommended: 30 seconds for most use cases.\n                </Typography>\n              </Alert>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Notification Settings */}\n        <TabPanel value={activeTab} index={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Alert Notifications\n              </Typography>\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={localPreferences.notification_settings.alerts}\n                    onChange={(e) => handleNestedPreferenceChange(\n                      'notification_settings',\n                      'alerts',\n                      e.target.checked\n                    )}\n                  />\n                }\n                label=\"Show system alerts\"\n              />\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={localPreferences.notification_settings.push_notifications}\n                    onChange={(e) => handleNestedPreferenceChange(\n                      'notification_settings',\n                      'push_notifications',\n                      e.target.checked\n                    )}\n                  />\n                }\n                label=\"Browser push notifications\"\n              />\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={localPreferences.notification_settings.email_reports}\n                    onChange={(e) => handleNestedPreferenceChange(\n                      'notification_settings',\n                      'email_reports',\n                      e.target.checked\n                    )}\n                  />\n                }\n                label=\"Email reports\"\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <Divider sx={{ my: 2 }} />\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Note: Browser notifications require permission. You may need to enable them in your browser settings.\n              </Typography>\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={handleReset} color=\"secondary\">\n          Reset to Defaults\n        </Button>\n        \n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        \n        <Button onClick={handleSave} variant=\"contained\" color=\"primary\">\n          Save Settings\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DashboardSettings;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/MTValidationMetrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CompletedIcon' is defined but never used.","line":25,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MT Validation Metrics Component\n * \n * Metrics overview for medical transcriptionist validation\n * with session statistics and productivity indicators.\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  LinearProgress,\n  Alert,\n  Skeleton,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  PlayArrow as ActiveIcon,\n  CheckCircle as CompletedIcon,\n  Person as UserIcon,\n  Speed as ProductivityIcon,\n  Star as RatingIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport { MTValidationSummary } from '@/domain/types/dashboard';\n\ninterface MTValidationMetricsProps {\n  data?: MTValidationSummary;\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n}\n\nexport const MTValidationMetrics: React.FC<MTValidationMetricsProps> = ({\n  data,\n  loading = false,\n  error,\n  onRefresh,\n}) => {\n  if (loading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader\n          title={<Skeleton variant=\"text\" width={200} />}\n          action={<Skeleton variant=\"circular\" width={40} height={40} />}\n        />\n        <CardContent>\n          {[1, 2, 3].map((i) => (\n            <Box key={i} sx={{ mb: 2 }}>\n              <Skeleton variant=\"text\" width=\"100%\" />\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={8} />\n            </Box>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"MT Validation Metrics\" />\n        <CardContent>\n          <Alert severity=\"error\">{error}</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"MT Validation Metrics\" />\n        <CardContent>\n          <Alert severity=\"info\">No MT validation data available</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const completionRate = (data.statistics.completed_sessions / data.statistics.total_sessions) * 100;\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardHeader\n        title=\"MT Validation Metrics\"\n        subheader={`${data.statistics.total_sessions} total sessions`}\n        action={\n          onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={onRefresh} size=\"small\">\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n          )\n        }\n      />\n      \n      <CardContent>\n        {/* Active Sessions */}\n        <Box sx={{ mb: 3, textAlign: 'center' }}>\n          <Typography variant=\"h3\" fontWeight=\"bold\" color=\"primary.main\">\n            {data.statistics.active_sessions}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Active Sessions\n          </Typography>\n          {data.statistics.active_sessions > 0 && (\n            <Chip\n              icon={<ActiveIcon />}\n              label=\"In Progress\"\n              color=\"primary\"\n              size=\"small\"\n              sx={{ mt: 1 }}\n            />\n          )}\n        </Box>\n\n        {/* Session Statistics */}\n        <Grid container spacing={2} sx={{ mb: 2 }}>\n          <Grid item xs={6}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\n                {data.statistics.completed_sessions}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Completed\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"info.main\">\n                {data.statistics.total_feedback_items.toLocaleString()}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Feedback Items\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n\n        {/* Completion Rate */}\n        <Box sx={{ mb: 2 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Completion Rate\n            </Typography>\n            <Typography variant=\"body2\" fontWeight=\"medium\">\n              {completionRate.toFixed(1)}%\n            </Typography>\n          </Box>\n          <LinearProgress\n            variant=\"determinate\"\n            value={completionRate}\n            color={completionRate > 90 ? 'success' : completionRate > 70 ? 'warning' : 'error'}\n            sx={{ height: 8, borderRadius: 4 }}\n          />\n        </Box>\n\n        {/* Average Rating */}\n        <Box sx={{ mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n            <RatingIcon fontSize=\"small\" color=\"action\" />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Average Rating\n            </Typography>\n          </Box>\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"warning.main\">\n            {data.quality_metrics.average_rating.toFixed(1)}/5\n          </Typography>\n        </Box>\n\n        {/* MT Users */}\n        <Box sx={{ mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n            <UserIcon fontSize=\"small\" color=\"action\" />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Active MT Users\n            </Typography>\n          </Box>\n          <Typography variant=\"h6\" fontWeight=\"bold\">\n            {data.productivity.mt_user_count}\n          </Typography>\n        </Box>\n\n        {/* Productivity Metrics */}\n        <Box sx={{ mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n            <ProductivityIcon fontSize=\"small\" color=\"action\" />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Items per Hour\n            </Typography>\n          </Box>\n          <Typography variant=\"h6\" fontWeight=\"bold\">\n            {data.productivity.items_per_hour.toFixed(1)}\n          </Typography>\n        </Box>\n\n        {/* Bucket Recommendations */}\n        <Box>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Bucket Change Recommendations\n          </Typography>\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"secondary.main\">\n            {data.quality_metrics.bucket_change_recommendations}\n          </Typography>\n        </Box>\n\n        {/* Status Indicators */}\n        <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          {data.quality_metrics.average_rating > 4 && (\n            <Chip\n              icon={<RatingIcon />}\n              label=\"High Quality\"\n              color=\"success\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n          \n          {data.productivity.efficiency_score > 85 && (\n            <Chip\n              icon={<ProductivityIcon />}\n              label=\"High Efficiency\"\n              color=\"info\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n          \n          {data.quality_metrics.bucket_change_recommendations > 0 && (\n            <Chip\n              label=\"Pending Recommendations\"\n              color=\"warning\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MTValidationMetrics;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/QuickMetricsBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Icon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Quick Metrics Bar Component\n * \n * Horizontal bar displaying key metrics with trends\n * and status indicators.\n */\n\nimport React from 'react';\nimport {\n  Box,\n  Paper,\n  Grid,\n  Typography,\n  Chip,\n  Skeleton,\n  Icon,\n} from '@mui/material';\nimport {\n  TrendingUp as TrendUpIcon,\n  TrendingDown as TrendDownIcon,\n  TrendingFlat as TrendFlatIcon,\n  People as PeopleIcon,\n  Assessment as AssessmentIcon,\n  PlayArrow as PlayIcon,\n  SwapHoriz as SwapIcon,\n} from '@mui/icons-material';\nimport { QuickMetric } from '@/domain/types/dashboard';\n\ninterface QuickMetricsBarProps {\n  metrics: QuickMetric[];\n  loading?: boolean;\n}\n\ninterface MetricCardProps {\n  metric: QuickMetric;\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({ metric }) => {\n  const getIcon = (iconName?: string) => {\n    switch (iconName) {\n      case 'people': return <PeopleIcon />;\n      case 'assessment': return <AssessmentIcon />;\n      case 'play_arrow': return <PlayIcon />;\n      case 'swap_horiz': return <SwapIcon />;\n      default: return <AssessmentIcon />;\n    }\n  };\n\n  const getTrendIcon = (direction?: 'up' | 'down' | 'stable') => {\n    switch (direction) {\n      case 'up': return <TrendUpIcon color=\"success\" fontSize=\"small\" />;\n      case 'down': return <TrendDownIcon color=\"error\" fontSize=\"small\" />;\n      case 'stable': return <TrendFlatIcon color=\"info\" fontSize=\"small\" />;\n      default: return null;\n    }\n  };\n\n  const getStatusColor = (status?: 'good' | 'warning' | 'critical') => {\n    switch (status) {\n      case 'good': return 'success';\n      case 'warning': return 'warning';\n      case 'critical': return 'error';\n      default: return 'primary';\n    }\n  };\n\n  return (\n    <Paper\n      elevation={1}\n      sx={{\n        p: 2,\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        borderLeft: 4,\n        borderLeftColor: `${metric.color || 'primary'}.main`,\n        transition: 'all 0.2s ease-in-out',\n        '&:hover': {\n          elevation: 3,\n          transform: 'translateY(-2px)',\n        },\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Box sx={{ color: `${metric.color || 'primary'}.main` }}>\n            {getIcon(metric.icon)}\n          </Box>\n          <Typography variant=\"body2\" color=\"text.secondary\" fontWeight=\"medium\">\n            {metric.label}\n          </Typography>\n        </Box>\n        \n        {metric.status && (\n          <Chip\n            size=\"small\"\n            label={metric.status.toUpperCase()}\n            color={getStatusColor(metric.status)}\n            variant=\"outlined\"\n          />\n        )}\n      </Box>\n\n      <Box sx={{ display: 'flex', alignItems: 'baseline', gap: 1, mb: 1 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" color={`${metric.color || 'primary'}.main`}>\n          {metric.value}\n        </Typography>\n        {metric.unit && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {metric.unit}\n          </Typography>\n        )}\n      </Box>\n\n      {metric.trend && (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          {getTrendIcon(metric.trend.direction)}\n          <Typography\n            variant=\"caption\"\n            color={\n              metric.trend.direction === 'up' ? 'success.main' :\n              metric.trend.direction === 'down' ? 'error.main' : 'text.secondary'\n            }\n            fontWeight=\"medium\"\n          >\n            {metric.trend.direction === 'up' ? '+' : metric.trend.direction === 'down' ? '-' : ''}\n            {metric.trend.percentage.toFixed(1)}% {metric.trend.period}\n          </Typography>\n        </Box>\n      )}\n    </Paper>\n  );\n};\n\nconst MetricSkeleton: React.FC = () => (\n  <Paper elevation={1} sx={{ p: 2, height: '100%' }}>\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n      <Skeleton variant=\"circular\" width={24} height={24} />\n      <Skeleton variant=\"text\" width={100} />\n    </Box>\n    <Skeleton variant=\"text\" width={80} height={40} sx={{ mb: 1 }} />\n    <Skeleton variant=\"text\" width={120} height={20} />\n  </Paper>\n);\n\nexport const QuickMetricsBar: React.FC<QuickMetricsBarProps> = ({\n  metrics,\n  loading = false,\n}) => {\n  if (loading) {\n    return (\n      <Box sx={{ p: 2, backgroundColor: 'background.default' }}>\n        <Grid container spacing={2}>\n          {[1, 2, 3, 4].map((index) => (\n            <Grid item xs={12} sm={6} md={3} key={index}>\n              <MetricSkeleton />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    );\n  }\n\n  if (!metrics || metrics.length === 0) {\n    return (\n      <Box sx={{ p: 2, backgroundColor: 'background.default' }}>\n        <Paper elevation={1} sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            No metrics available\n          </Typography>\n        </Paper>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 2, backgroundColor: 'background.default' }}>\n      <Grid container spacing={2}>\n        {metrics.map((metric, index) => (\n          <Grid item xs={12} sm={6} md={3} key={index}>\n            <MetricCard metric={metric} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default QuickMetricsBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/RAGProcessingStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/SERMetricsChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1726,1729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1726,1729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":158,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":162,"endColumn":13,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4239,5114],"text":"{ const distributionData = Object.entries(data.summary.quality_distribution).map(([quality, count]) => ({\n          quality: quality.charAt(0).toUpperCase() + quality.slice(1),\n          count,\n          percentage: ((count / data.summary.total_calculations) * 100).toFixed(1),\n        }));\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={distributionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"quality\" tick={{ fontSize: 12 }} />\n              <YAxis tick={{ fontSize: 12 }} />\n              <RechartsTooltip content={<CustomTooltip />} />\n              <Bar\n                dataKey=\"count\"\n                fill=\"#9c27b0\"\n                name=\"Count\"\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        ); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SER Metrics Chart Component\n * \n * Interactive chart showing SER metrics trends over time\n * with quality distribution and performance indicators.\n */\n\nimport React, { useState } from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  ToggleButton,\n  ToggleButtonGroup,\n  Alert,\n  Skeleton,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n} from 'recharts';\nimport {\n  TrendingUp as TrendUpIcon,\n  Speed as SpeedIcon,\n  Assessment as AssessmentIcon,\n  Refresh as RefreshIcon,\n  ShowChart as ChartIcon,\n} from '@mui/icons-material';\nimport { SERMetricsSummary } from '@/domain/types/dashboard';\n\ninterface SERMetricsChartProps {\n  data?: SERMetricsSummary;\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n}\n\ntype ChartType = 'trend' | 'improvement' | 'distribution';\n\nexport const SERMetricsChart: React.FC<SERMetricsChartProps> = ({\n  data,\n  loading = false,\n  error,\n  onRefresh,\n}) => {\n  const [chartType, setChartType] = useState<ChartType>('trend');\n\n  // Custom tooltip for charts\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <Box\n          sx={{\n            backgroundColor: 'background.paper',\n            p: 1.5,\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            boxShadow: 2,\n          }}\n        >\n          <Typography variant=\"body2\" fontWeight=\"bold\" gutterBottom>\n            {label}\n          </Typography>\n          {payload.map((entry: any, index: number) => (\n            <Typography\n              key={index}\n              variant=\"body2\"\n              sx={{ color: entry.color }}\n            >\n              {entry.name}: {entry.value.toFixed(2)}\n              {entry.dataKey.includes('percentage') ? '%' : ''}\n            </Typography>\n          ))}\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    if (!data) return null;\n\n    switch (chartType) {\n      case 'trend':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={data.trends.daily_calculations}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"date\" \n                tick={{ fontSize: 12 }}\n                tickFormatter={(value) => new Date(value).toLocaleDateString()}\n              />\n              <YAxis tick={{ fontSize: 12 }} />\n              <RechartsTooltip content={<CustomTooltip />} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"average_score\"\n                stroke=\"#2196f3\"\n                strokeWidth={2}\n                dot={{ fill: '#2196f3', strokeWidth: 2, r: 4 }}\n                name=\"Average SER Score\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"count\"\n                stroke=\"#4caf50\"\n                strokeWidth={2}\n                dot={{ fill: '#4caf50', strokeWidth: 2, r: 4 }}\n                name=\"Calculations Count\"\n                yAxisId=\"right\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n\n      case 'improvement':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={data.trends.quality_improvement_over_time}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"date\" \n                tick={{ fontSize: 12 }}\n                tickFormatter={(value) => new Date(value).toLocaleDateString()}\n              />\n              <YAxis tick={{ fontSize: 12 }} />\n              <RechartsTooltip content={<CustomTooltip />} />\n              <Area\n                type=\"monotone\"\n                dataKey=\"improvement_percentage\"\n                stroke=\"#ff9800\"\n                fill=\"#ff9800\"\n                fillOpacity={0.3}\n                name=\"Quality Improvement\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n\n      case 'distribution':\n        const distributionData = Object.entries(data.summary.quality_distribution).map(([quality, count]) => ({\n          quality: quality.charAt(0).toUpperCase() + quality.slice(1),\n          count,\n          percentage: ((count / data.summary.total_calculations) * 100).toFixed(1),\n        }));\n\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={distributionData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"quality\" tick={{ fontSize: 12 }} />\n              <YAxis tick={{ fontSize: 12 }} />\n              <RechartsTooltip content={<CustomTooltip />} />\n              <Bar\n                dataKey=\"count\"\n                fill=\"#9c27b0\"\n                name=\"Count\"\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader\n          title={<Skeleton variant=\"text\" width={200} />}\n          action={<Skeleton variant=\"circular\" width={40} height={40} />}\n        />\n        <CardContent>\n          <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\n          <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} variant=\"rectangular\" width={100} height={40} />\n            ))}\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"SER Metrics Trends\" />\n        <CardContent>\n          <Alert severity=\"error\">{error}</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"SER Metrics Trends\" />\n        <CardContent>\n          <Alert severity=\"info\">No SER metrics data available</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardHeader\n        title=\"SER Metrics Trends\"\n        subheader={`${data.summary.total_calculations.toLocaleString()} total calculations`}\n        action={\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {onRefresh && (\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={onRefresh} size=\"small\">\n                  <RefreshIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n        }\n      />\n      \n      <CardContent>\n        {/* Chart Type Toggle */}\n        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'center' }}>\n          <ToggleButtonGroup\n            value={chartType}\n            exclusive\n            onChange={(_, newType) => newType && setChartType(newType)}\n            size=\"small\"\n          >\n            <ToggleButton value=\"trend\">\n              <ChartIcon sx={{ mr: 1 }} />\n              Trends\n            </ToggleButton>\n            <ToggleButton value=\"improvement\">\n              <TrendUpIcon sx={{ mr: 1 }} />\n              Improvement\n            </ToggleButton>\n            <ToggleButton value=\"distribution\">\n              <AssessmentIcon sx={{ mr: 1 }} />\n              Distribution\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n\n        {/* Chart */}\n        <Box sx={{ mb: 3 }}>\n          {renderChart()}\n        </Box>\n\n        {/* Summary Statistics */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"primary.main\">\n                {data.summary.average_ser_score.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Average SER Score\n              </Typography>\n            </Box>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"success.main\">\n                {data.summary.improvement_rate.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Improvement Rate\n              </Typography>\n            </Box>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"info.main\">\n                {data.performance.calculation_speed_ms}ms\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Avg Calculation Speed\n              </Typography>\n            </Box>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"warning.main\">\n                {data.performance.error_rate.toFixed(2)}%\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Error Rate\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n\n        {/* Performance Indicators */}\n        <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          <Chip\n            icon={<SpeedIcon />}\n            label={`${data.performance.batch_processing_efficiency.toFixed(1)}% Batch Efficiency`}\n            color=\"info\"\n            variant=\"outlined\"\n            size=\"small\"\n          />\n          \n          {data.performance.error_rate < 1 && (\n            <Chip\n              label=\"Low Error Rate\"\n              color=\"success\"\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          )}\n          \n          {data.summary.improvement_rate > 10 && (\n            <Chip\n              icon={<TrendUpIcon />}\n              label=\"High Improvement Rate\"\n              color=\"success\"\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SERMetricsChart;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/ServicesHealthPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":287,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":308,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10395,10398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10395,10398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11121,11124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11121,11124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Services Health Panel Component\n * \n * Comprehensive health monitoring for all microservices\n * with status indicators and performance metrics.\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  LinearProgress,\n  Alert,\n  Skeleton,\n  IconButton,\n  Tooltip,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@mui/material';\nimport {\n  CheckCircle as HealthyIcon,\n  Warning as WarningIcon,\n  Error as ErrorIcon,\n  Help as UnknownIcon,\n  Refresh as RefreshIcon,\n  ExpandMore as ExpandMoreIcon,\n  Memory as MemoryIcon,\n  Storage as StorageIcon,\n  Speed as SpeedIcon,\n} from '@mui/icons-material';\nimport { ServicesHealthStatus, ServiceHealth } from '@/domain/types/dashboard';\n\ninterface ServicesHealthPanelProps {\n  data?: ServicesHealthStatus;\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n}\n\ninterface ServiceHealthCardProps {\n  serviceName: string;\n  health: ServiceHealth;\n}\n\nconst ServiceHealthCard: React.FC<ServiceHealthCardProps> = ({ serviceName, health }) => {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': return <HealthyIcon color=\"success\" />;\n      case 'degraded': return <WarningIcon color=\"warning\" />;\n      case 'error': return <ErrorIcon color=\"error\" />;\n      default: return <UnknownIcon color=\"disabled\" />;\n    }\n  };\n\n  const getStatusColor = (status: string): 'success' | 'warning' | 'error' | 'default' => {\n    switch (status) {\n      case 'healthy': return 'success';\n      case 'degraded': return 'warning';\n      case 'error': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const formatServiceName = (name: string) => {\n    return name.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const formatLastCheck = (timestamp: string) => {\n    const now = new Date();\n    const lastCheck = new Date(timestamp);\n    const diffMs = now.getTime() - lastCheck.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    \n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    \n    return lastCheck.toLocaleDateString();\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n          {getStatusIcon(health.status)}\n          <Box sx={{ flex: 1 }}>\n            <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n              {formatServiceName(serviceName)}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Last check: {formatLastCheck(health.last_check)}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Chip\n              label={health.status.toUpperCase()}\n              color={getStatusColor(health.status)}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n            <Chip\n              label={`${health.response_time_ms}ms`}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          </Box>\n        </Box>\n      </AccordionSummary>\n      \n      <AccordionDetails>\n        <Grid container spacing={2}>\n          {/* Basic Metrics */}\n          <Grid item xs={12} sm={6}>\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Response Time\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <SpeedIcon fontSize=\"small\" color=\"action\" />\n                <Typography variant=\"body1\" fontWeight=\"medium\">\n                  {health.response_time_ms}ms\n                </Typography>\n              </Box>\n            </Box>\n            \n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Uptime\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Typography variant=\"body1\" fontWeight=\"medium\">\n                  {health.uptime_percentage.toFixed(2)}%\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={health.uptime_percentage}\n                color={health.uptime_percentage > 99 ? 'success' : health.uptime_percentage > 95 ? 'warning' : 'error'}\n                sx={{ mt: 0.5, height: 6, borderRadius: 3 }}\n              />\n            </Box>\n            \n            <Box>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Error Rate\n              </Typography>\n              <Typography variant=\"body1\" fontWeight=\"medium\">\n                {health.error_rate.toFixed(2)}%\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={Math.min(health.error_rate * 10, 100)} // Scale for visibility\n                color={health.error_rate < 1 ? 'success' : health.error_rate < 5 ? 'warning' : 'error'}\n                sx={{ mt: 0.5, height: 6, borderRadius: 3 }}\n              />\n            </Box>\n          </Grid>\n\n          {/* Detailed Metrics */}\n          {health.details && (\n            <Grid item xs={12} sm={6}>\n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  CPU Usage\n                </Typography>\n                <Typography variant=\"body1\" fontWeight=\"medium\">\n                  {health.details.cpu_usage.toFixed(1)}%\n                </Typography>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={health.details.cpu_usage}\n                  color={health.details.cpu_usage < 70 ? 'success' : health.details.cpu_usage < 90 ? 'warning' : 'error'}\n                  sx={{ mt: 0.5, height: 6, borderRadius: 3 }}\n                />\n              </Box>\n              \n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  Memory Usage\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <MemoryIcon fontSize=\"small\" color=\"action\" />\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {health.details.memory_usage.toFixed(1)}%\n                  </Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={health.details.memory_usage}\n                  color={health.details.memory_usage < 70 ? 'success' : health.details.memory_usage < 90 ? 'warning' : 'error'}\n                  sx={{ mt: 0.5, height: 6, borderRadius: 3 }}\n                />\n              </Box>\n              \n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  Disk Usage\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <StorageIcon fontSize=\"small\" color=\"action\" />\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {health.details.disk_usage.toFixed(1)}%\n                  </Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={health.details.disk_usage}\n                  color={health.details.disk_usage < 80 ? 'success' : health.details.disk_usage < 95 ? 'warning' : 'error'}\n                  sx={{ mt: 0.5, height: 6, borderRadius: 3 }}\n                />\n              </Box>\n              \n              <Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  Active Connections\n                </Typography>\n                <Typography variant=\"body1\" fontWeight=\"medium\">\n                  {health.details.active_connections.toLocaleString()}\n                </Typography>\n              </Box>\n            </Grid>\n          )}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport const ServicesHealthPanel: React.FC<ServicesHealthPanelProps> = ({\n  data,\n  loading = false,\n  error,\n  onRefresh,\n}) => {\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader\n          title={<Skeleton variant=\"text\" width={200} />}\n          action={<Skeleton variant=\"circular\" width={40} height={40} />}\n        />\n        <CardContent>\n          {[1, 2, 3, 4].map((i) => (\n            <Box key={i} sx={{ mb: 2 }}>\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={60} />\n            </Box>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader title=\"Services Health\" />\n        <CardContent>\n          <Alert severity=\"error\">{error}</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card>\n        <CardHeader title=\"Services Health\" />\n        <CardContent>\n          <Alert severity=\"info\">No services health data available</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Calculate overall health status\n  const services = Object.entries(data);\n  const healthyServices = services.filter(([_, health]) => health.status === 'healthy').length;\n  const totalServices = services.length;\n  const overallHealthPercentage = (healthyServices / totalServices) * 100;\n\n  const getOverallStatus = () => {\n    if (overallHealthPercentage === 100) return { status: 'All systems operational', color: 'success' };\n    if (overallHealthPercentage >= 75) return { status: 'Minor issues detected', color: 'warning' };\n    return { status: 'Critical issues detected', color: 'error' };\n  };\n\n  const overallStatus = getOverallStatus();\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Services Health\"\n        subheader={`${healthyServices}/${totalServices} services healthy`}\n        action={\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Chip\n              label={overallStatus.status}\n              color={overallStatus.color as any}\n              variant=\"outlined\"\n              size=\"small\"\n            />\n            {onRefresh && (\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={onRefresh} size=\"small\">\n                  <RefreshIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n        }\n      />\n      \n      <CardContent>\n        {/* Overall Health Indicator */}\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Overall System Health\n          </Typography>\n          <LinearProgress\n            variant=\"determinate\"\n            value={overallHealthPercentage}\n            color={overallStatus.color as any}\n            sx={{ height: 8, borderRadius: 4 }}\n          />\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 0.5, display: 'block' }}>\n            {overallHealthPercentage.toFixed(1)}% of services are healthy\n          </Typography>\n        </Box>\n\n        {/* Individual Service Health */}\n        <Box>\n          {services.map(([serviceName, health]) => (\n            <ServiceHealthCard\n              key={serviceName}\n              serviceName={serviceName}\n              health={health}\n            />\n          ))}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ServicesHealthPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/SpeakerBucketOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendUpIcon' is defined but never used.","line":32,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendDownIcon' is defined but never used.","line":33,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendFlatIcon' is defined but never used.","line":34,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1826,1829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1826,1829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Bucket Overview Component\n * \n * Comprehensive overview of speaker bucket distribution\n * with pie chart and detailed statistics.\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  LinearProgress,\n  Alert,\n  Skeleton,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Legend,\n  Tooltip as RechartsTooltip,\n} from 'recharts';\nimport {\n  TrendingUp as TrendUpIcon,\n  TrendingDown as TrendDownIcon,\n  TrendingFlat as TrendFlatIcon,\n  Info as InfoIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport { SpeakerBucketStats } from '@/domain/types/dashboard';\nimport { SpeakerBucket } from '@/domain/types/speaker';\n\ninterface SpeakerBucketOverviewProps {\n  data?: SpeakerBucketStats;\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n}\n\n// Color mapping for speaker buckets\nconst BUCKET_COLORS = {\n  [SpeakerBucket.NO_TOUCH]: '#4caf50',\n  [SpeakerBucket.LOW_TOUCH]: '#8bc34a',\n  [SpeakerBucket.MEDIUM_TOUCH]: '#ff9800',\n  [SpeakerBucket.HIGH_TOUCH]: '#f44336',\n};\n\nconst BUCKET_LABELS = {\n  [SpeakerBucket.NO_TOUCH]: 'No Touch',\n  [SpeakerBucket.LOW_TOUCH]: 'Low Touch',\n  [SpeakerBucket.MEDIUM_TOUCH]: 'Medium Touch',\n  [SpeakerBucket.HIGH_TOUCH]: 'High Touch',\n};\n\nexport const SpeakerBucketOverview: React.FC<SpeakerBucketOverviewProps> = ({\n  data,\n  loading = false,\n  error,\n  onRefresh,\n}) => {\n  // Prepare chart data\n  const chartData = data ? Object.entries(data.bucket_distribution).map(([bucket, count]) => ({\n    name: BUCKET_LABELS[bucket as SpeakerBucket],\n    value: count,\n    color: BUCKET_COLORS[bucket as SpeakerBucket],\n    bucket: bucket,\n  })) : [];\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      const percentage = ((data.value / (chartData.reduce((sum, item) => sum + item.value, 0))) * 100).toFixed(1);\n      \n      return (\n        <Box\n          sx={{\n            backgroundColor: 'background.paper',\n            p: 1,\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            boxShadow: 2,\n          }}\n        >\n          <Typography variant=\"body2\" fontWeight=\"bold\">\n            {data.payload.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {data.value} speakers ({percentage}%)\n          </Typography>\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  if (loading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader\n          title={<Skeleton variant=\"text\" width={200} />}\n          action={<Skeleton variant=\"circular\" width={40} height={40} />}\n        />\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <Skeleton variant=\"circular\" width={200} height={200} sx={{ mx: 'auto' }} />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {[1, 2, 3, 4].map((i) => (\n                <Box key={i} sx={{ mb: 2 }}>\n                  <Skeleton variant=\"text\" width=\"100%\" />\n                  <Skeleton variant=\"rectangular\" width=\"100%\" height={8} />\n                </Box>\n              ))}\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"Speaker Bucket Overview\" />\n        <CardContent>\n          <Alert severity=\"error\">{error}</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"Speaker Bucket Overview\" />\n        <CardContent>\n          <Alert severity=\"info\">No speaker data available</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardHeader\n        title=\"Speaker Bucket Overview\"\n        subheader={`${data.total_speakers} total speakers`}\n        action={\n          onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={onRefresh} size=\"small\">\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n          )\n        }\n      />\n      \n      <CardContent>\n        <Grid container spacing={2}>\n          {/* Pie Chart */}\n          <Grid item xs={12} md={6}>\n            <Box sx={{ height: 250 }}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={chartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                  >\n                    {chartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip content={<CustomTooltip />} />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </Box>\n          </Grid>\n\n          {/* Statistics */}\n          <Grid item xs={12} md={6}>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              {/* Bucket Distribution */}\n              {chartData.map((bucket) => {\n                const percentage = ((bucket.value / data.total_speakers) * 100).toFixed(1);\n                return (\n                  <Box key={bucket.bucket}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {bucket.name}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {bucket.value} ({percentage}%)\n                      </Typography>\n                    </Box>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={parseFloat(percentage)}\n                      sx={{\n                        height: 8,\n                        borderRadius: 4,\n                        backgroundColor: 'grey.200',\n                        '& .MuiLinearProgress-bar': {\n                          backgroundColor: bucket.color,\n                        },\n                      }}\n                    />\n                  </Box>\n                );\n              })}\n            </Box>\n          </Grid>\n\n          {/* Quality Metrics */}\n          <Grid item xs={12}>\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Quality Metrics\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color=\"primary.main\">\n                      {data.quality_metrics.average_ser_score.toFixed(1)}%\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Average SER Score\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color=\"success.main\">\n                      {data.transition_metrics.pending_transitions}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Pending Transitions\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color=\"info.main\">\n                      {data.transition_metrics.success_rate.toFixed(1)}%\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Success Rate\n                    </Typography>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" fontWeight=\"bold\" color=\"warning.main\">\n                      {data.data_quality.data_coverage_percentage.toFixed(1)}%\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Data Coverage\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n          </Grid>\n\n          {/* Transition Insights */}\n          {data.transition_metrics.pending_transitions > 0 && (\n            <Grid item xs={12}>\n              <Alert severity=\"info\" icon={<InfoIcon />}>\n                <Typography variant=\"body2\">\n                  {data.transition_metrics.pending_transitions} speakers are pending bucket transitions. \n                  Review the transition queue for approval decisions.\n                </Typography>\n              </Alert>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SpeakerBucketOverview;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/components/TransitionStatistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TransitionIcon' is defined but never used.","line":24,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RejectedIcon' is defined but never used.","line":28,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Transition Statistics Component\n * \n * Statistics and trends for speaker bucket transitions\n * with approval rates and impact analysis.\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  LinearProgress,\n  Alert,\n  Skeleton,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  SwapHoriz as TransitionIcon,\n  TrendingUp as TrendUpIcon,\n  TrendingDown as TrendDownIcon,\n  CheckCircle as ApprovedIcon,\n  Cancel as RejectedIcon,\n  Pending as PendingIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport { TransitionStatisticsSummary } from '@/domain/types/dashboard';\n\ninterface TransitionStatisticsProps {\n  data?: TransitionStatisticsSummary;\n  loading?: boolean;\n  error?: string | null;\n  onRefresh?: () => void;\n}\n\nexport const TransitionStatistics: React.FC<TransitionStatisticsProps> = ({\n  data,\n  loading = false,\n  error,\n  onRefresh,\n}) => {\n  if (loading) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader\n          title={<Skeleton variant=\"text\" width={200} />}\n          action={<Skeleton variant=\"circular\" width={40} height={40} />}\n        />\n        <CardContent>\n          {[1, 2, 3].map((i) => (\n            <Box key={i} sx={{ mb: 2 }}>\n              <Skeleton variant=\"text\" width=\"100%\" />\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={8} />\n            </Box>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"Transition Statistics\" />\n        <CardContent>\n          <Alert severity=\"error\">{error}</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card sx={{ height: '100%' }}>\n        <CardHeader title=\"Transition Statistics\" />\n        <CardContent>\n          <Alert severity=\"info\">No transition data available</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ height: '100%' }}>\n      <CardHeader\n        title=\"Transition Statistics\"\n        subheader={`${data.statistics.total_requests} total requests`}\n        action={\n          onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={onRefresh} size=\"small\">\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n          )\n        }\n      />\n      \n      <CardContent>\n        {/* Pending Requests */}\n        <Box sx={{ mb: 3, textAlign: 'center' }}>\n          <Typography variant=\"h3\" fontWeight=\"bold\" color=\"warning.main\">\n            {data.statistics.pending_requests}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Pending Requests\n          </Typography>\n          {data.statistics.pending_requests > 0 && (\n            <Chip\n              icon={<PendingIcon />}\n              label=\"Needs Review\"\n              color=\"warning\"\n              size=\"small\"\n              sx={{ mt: 1 }}\n            />\n          )}\n        </Box>\n\n        {/* Request Statistics */}\n        <Grid container spacing={2} sx={{ mb: 2 }}>\n          <Grid item xs={6}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\n                {data.statistics.approved_requests}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Approved\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"error.main\">\n                {data.statistics.rejected_requests}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Rejected\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n\n        {/* Approval Rate */}\n        <Box sx={{ mb: 2 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Approval Rate\n            </Typography>\n            <Typography variant=\"body2\" fontWeight=\"medium\">\n              {data.statistics.approval_rate.toFixed(1)}%\n            </Typography>\n          </Box>\n          <LinearProgress\n            variant=\"determinate\"\n            value={data.statistics.approval_rate}\n            color={data.statistics.approval_rate > 80 ? 'success' : data.statistics.approval_rate > 60 ? 'warning' : 'error'}\n            sx={{ height: 8, borderRadius: 4 }}\n          />\n        </Box>\n\n        {/* Impact Metrics */}\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Speakers Promoted\n          </Typography>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <TrendUpIcon fontSize=\"small\" color=\"success\" />\n            <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\n              {data.impact.speakers_promoted}\n            </Typography>\n          </Box>\n        </Box>\n\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Speakers Demoted\n          </Typography>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <TrendDownIcon fontSize=\"small\" color=\"error\" />\n            <Typography variant=\"h6\" fontWeight=\"bold\" color=\"error.main\">\n              {data.impact.speakers_demoted}\n            </Typography>\n          </Box>\n        </Box>\n\n        {/* Quality Correlation */}\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Quality Improvement Correlation\n          </Typography>\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"info.main\">\n            {data.impact.quality_improvement_correlation.toFixed(2)}\n          </Typography>\n        </Box>\n\n        {/* Cost Savings */}\n        <Box>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Estimated Cost Savings\n          </Typography>\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"secondary.main\">\n            ${data.impact.cost_savings_estimate.toLocaleString()}\n          </Typography>\n        </Box>\n\n        {/* Status Indicators */}\n        <Box sx={{ mt: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          {data.statistics.approval_rate > 80 && (\n            <Chip\n              icon={<ApprovedIcon />}\n              label=\"High Approval Rate\"\n              color=\"success\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n          \n          {data.impact.quality_improvement_correlation > 0.7 && (\n            <Chip\n              label=\"Strong Quality Correlation\"\n              color=\"info\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n          \n          {data.statistics.pending_requests > 10 && (\n            <Chip\n              icon={<PendingIcon />}\n              label=\"High Pending Volume\"\n              color=\"warning\"\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TransitionStatistics;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/dashboard-slice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8036,8039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8036,8039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redux slice for dashboard state management\n */\n\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { dashboardApi } from '@/infrastructure/api/dashboard-api';\nimport {\n  DashboardMetrics,\n  SpeakerBucketStats,\n  SERMetricsSummary,\n  RAGProcessingSummary,\n  MTValidationSummary,\n  TransitionStatisticsSummary,\n  ServicesHealthStatus,\n  DashboardFilters,\n  DashboardLayout,\n  DashboardWidget,\n  DashboardAlert,\n  TimeSeriesData,\n  PieChartData,\n  BarChartData,\n  DashboardPreferences,\n  QuickMetric,\n} from '@/domain/types/dashboard';\n\n// Async thunks\nexport const fetchDashboardOverview = createAsyncThunk(\n  'dashboard/fetchOverview',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getDashboardOverview(filters);\n  }\n);\n\nexport const fetchSpeakerBucketStats = createAsyncThunk(\n  'dashboard/fetchSpeakerBucketStats',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getSpeakerBucketStats(filters);\n  }\n);\n\nexport const fetchSERMetricsSummary = createAsyncThunk(\n  'dashboard/fetchSERMetricsSummary',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getSERMetricsSummary(filters);\n  }\n);\n\nexport const fetchRAGProcessingSummary = createAsyncThunk(\n  'dashboard/fetchRAGProcessingSummary',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getRAGProcessingSummary(filters);\n  }\n);\n\nexport const fetchMTValidationSummary = createAsyncThunk(\n  'dashboard/fetchMTValidationSummary',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getMTValidationSummary(filters);\n  }\n);\n\nexport const fetchTransitionStatistics = createAsyncThunk(\n  'dashboard/fetchTransitionStatistics',\n  async (filters?: DashboardFilters) => {\n    return await dashboardApi.getTransitionStatistics(filters);\n  }\n);\n\nexport const fetchServicesHealth = createAsyncThunk(\n  'dashboard/fetchServicesHealth',\n  async () => {\n    return await dashboardApi.getServicesHealth();\n  }\n);\n\nexport const fetchTimeSeriesData = createAsyncThunk(\n  'dashboard/fetchTimeSeriesData',\n  async ({ metric, filters }: { metric: string; filters?: any }) => {\n    return await dashboardApi.getTimeSeriesData(metric, filters);\n  }\n);\n\nexport const fetchDashboardLayouts = createAsyncThunk(\n  'dashboard/fetchLayouts',\n  async () => {\n    return await dashboardApi.getDashboardLayouts();\n  }\n);\n\nexport const saveDashboardLayout = createAsyncThunk(\n  'dashboard/saveLayout',\n  async (layout: Omit<DashboardLayout, 'id' | 'createdAt' | 'updatedAt'>) => {\n    return await dashboardApi.saveDashboardLayout(layout);\n  }\n);\n\nexport const fetchDashboardAlerts = createAsyncThunk(\n  'dashboard/fetchAlerts',\n  async (filters?: { severity?: string; acknowledged?: boolean; limit?: number }) => {\n    return await dashboardApi.getDashboardAlerts(filters);\n  }\n);\n\n// State interface\ninterface DashboardState {\n  // Main dashboard data\n  overview: DashboardMetrics | null;\n  speakerStats: SpeakerBucketStats | null;\n  serMetrics: SERMetricsSummary | null;\n  ragProcessing: RAGProcessingSummary | null;\n  mtValidation: MTValidationSummary | null;\n  transitionStats: TransitionStatisticsSummary | null;\n  servicesHealth: ServicesHealthStatus | null;\n  \n  // Chart data\n  chartData: {\n    timeSeries: Record<string, TimeSeriesData>;\n    pieCharts: Record<string, PieChartData>;\n    barCharts: Record<string, BarChartData>;\n  };\n  \n  // Layouts and widgets\n  layouts: DashboardLayout[];\n  currentLayout: DashboardLayout | null;\n  customWidgets: DashboardWidget[];\n  \n  // Alerts and notifications\n  alerts: DashboardAlert[];\n  unreadAlerts: number;\n  \n  // Filters and preferences\n  activeFilters: DashboardFilters;\n  preferences: DashboardPreferences;\n  \n  // UI state\n  selectedDateRange: {\n    start: string;\n    end: string;\n    preset: string;\n  };\n  refreshInterval: number;\n  autoRefresh: boolean;\n  isFullscreen: boolean;\n  \n  // Quick metrics for header\n  quickMetrics: QuickMetric[];\n  \n  // Loading states\n  loading: {\n    overview: boolean;\n    speakerStats: boolean;\n    serMetrics: boolean;\n    ragProcessing: boolean;\n    mtValidation: boolean;\n    transitionStats: boolean;\n    servicesHealth: boolean;\n    charts: boolean;\n    layouts: boolean;\n    alerts: boolean;\n  };\n  \n  // Error states\n  error: {\n    overview: string | null;\n    speakerStats: string | null;\n    serMetrics: string | null;\n    ragProcessing: string | null;\n    mtValidation: string | null;\n    transitionStats: string | null;\n    servicesHealth: string | null;\n    charts: string | null;\n    layouts: string | null;\n    alerts: string | null;\n    general: string | null;\n  };\n  \n  // Real-time updates\n  lastUpdated: string | null;\n  isConnected: boolean;\n  updateCount: number;\n}\n\n// Initial state\nconst initialState: DashboardState = {\n  overview: null,\n  speakerStats: null,\n  serMetrics: null,\n  ragProcessing: null,\n  mtValidation: null,\n  transitionStats: null,\n  servicesHealth: null,\n  \n  chartData: {\n    timeSeries: {},\n    pieCharts: {},\n    barCharts: {},\n  },\n  \n  layouts: [],\n  currentLayout: null,\n  customWidgets: [],\n  \n  alerts: [],\n  unreadAlerts: 0,\n  \n  activeFilters: {\n    dateRange: {\n      start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 days ago\n      end: new Date().toISOString().split('T')[0], // today\n      preset: 'week',\n    },\n  },\n  \n  preferences: {\n    default_layout: 'default',\n    refresh_interval: 30000, // 30 seconds\n    theme: 'light',\n    timezone: 'UTC',\n    number_format: 'US',\n    chart_animations: true,\n    auto_refresh: true,\n    notification_settings: {\n      alerts: true,\n      email_reports: false,\n      push_notifications: true,\n    },\n  },\n  \n  selectedDateRange: {\n    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    end: new Date().toISOString().split('T')[0],\n    preset: 'week',\n  },\n  refreshInterval: 30000,\n  autoRefresh: true,\n  isFullscreen: false,\n  \n  quickMetrics: [],\n  \n  loading: {\n    overview: false,\n    speakerStats: false,\n    serMetrics: false,\n    ragProcessing: false,\n    mtValidation: false,\n    transitionStats: false,\n    servicesHealth: false,\n    charts: false,\n    layouts: false,\n    alerts: false,\n  },\n  \n  error: {\n    overview: null,\n    speakerStats: null,\n    serMetrics: null,\n    ragProcessing: null,\n    mtValidation: null,\n    transitionStats: null,\n    servicesHealth: null,\n    charts: null,\n    layouts: null,\n    alerts: null,\n    general: null,\n  },\n  \n  lastUpdated: null,\n  isConnected: false,\n  updateCount: 0,\n};\n\n// Slice\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    // Filters\n    setActiveFilters: (state, action: PayloadAction<DashboardFilters>) => {\n      state.activeFilters = action.payload;\n    },\n    \n    updateDateRange: (state, action: PayloadAction<{ start: string; end: string; preset?: string }>) => {\n      state.selectedDateRange = {\n        start: action.payload.start,\n        end: action.payload.end,\n        preset: action.payload.preset || 'custom',\n      };\n      state.activeFilters.dateRange = {\n        start: action.payload.start,\n        end: action.payload.end,\n        preset: action.payload.preset,\n      };\n    },\n    \n    // Preferences\n    updatePreferences: (state, action: PayloadAction<Partial<DashboardPreferences>>) => {\n      state.preferences = { ...state.preferences, ...action.payload };\n    },\n    \n    setRefreshInterval: (state, action: PayloadAction<number>) => {\n      state.refreshInterval = action.payload;\n      state.preferences.refresh_interval = action.payload;\n    },\n    \n    toggleAutoRefresh: (state) => {\n      state.autoRefresh = !state.autoRefresh;\n      state.preferences.auto_refresh = state.autoRefresh;\n    },\n    \n    // Layout management\n    setCurrentLayout: (state, action: PayloadAction<DashboardLayout>) => {\n      state.currentLayout = action.payload;\n    },\n    \n    updateWidgetPosition: (state, action: PayloadAction<{ widgetId: string; position: any }>) => {\n      if (state.currentLayout) {\n        const widget = state.currentLayout.widgets.find(w => w.id === action.payload.widgetId);\n        if (widget) {\n          widget.position = action.payload.position;\n        }\n      }\n    },\n    \n    addCustomWidget: (state, action: PayloadAction<DashboardWidget>) => {\n      state.customWidgets.push(action.payload);\n    },\n    \n    removeCustomWidget: (state, action: PayloadAction<string>) => {\n      state.customWidgets = state.customWidgets.filter(w => w.id !== action.payload);\n    },\n    \n    // Alerts\n    markAlertAsRead: (state, action: PayloadAction<string>) => {\n      const alert = state.alerts.find(a => a.id === action.payload);\n      if (alert && !alert.acknowledged) {\n        alert.acknowledged = true;\n        state.unreadAlerts = Math.max(0, state.unreadAlerts - 1);\n      }\n    },\n    \n    markAllAlertsAsRead: (state) => {\n      state.alerts.forEach(alert => {\n        alert.acknowledged = true;\n      });\n      state.unreadAlerts = 0;\n    },\n    \n    // UI state\n    toggleFullscreen: (state) => {\n      state.isFullscreen = !state.isFullscreen;\n    },\n    \n    // Real-time updates\n    setConnectionStatus: (state, action: PayloadAction<boolean>) => {\n      state.isConnected = action.payload;\n    },\n    \n    incrementUpdateCount: (state) => {\n      state.updateCount += 1;\n      state.lastUpdated = new Date().toISOString();\n    },\n    \n    // Chart data\n    setTimeSeriesData: (state, action: PayloadAction<{ key: string; data: TimeSeriesData }>) => {\n      state.chartData.timeSeries[action.payload.key] = action.payload.data;\n    },\n    \n    setPieChartData: (state, action: PayloadAction<{ key: string; data: PieChartData }>) => {\n      state.chartData.pieCharts[action.payload.key] = action.payload.data;\n    },\n    \n    setBarChartData: (state, action: PayloadAction<{ key: string; data: BarChartData }>) => {\n      state.chartData.barCharts[action.payload.key] = action.payload.data;\n    },\n    \n    // Quick metrics\n    updateQuickMetrics: (state, action: PayloadAction<QuickMetric[]>) => {\n      state.quickMetrics = action.payload;\n    },\n    \n    // Error handling\n    clearErrors: (state) => {\n      state.error = {\n        overview: null,\n        speakerStats: null,\n        serMetrics: null,\n        ragProcessing: null,\n        mtValidation: null,\n        transitionStats: null,\n        servicesHealth: null,\n        charts: null,\n        layouts: null,\n        alerts: null,\n        general: null,\n      };\n    },\n    \n    clearError: (state, action: PayloadAction<keyof DashboardState['error']>) => {\n      state.error[action.payload] = null;\n    },\n  },\n  \n  extraReducers: (builder) => {\n    // Dashboard overview\n    builder\n      .addCase(fetchDashboardOverview.pending, (state) => {\n        state.loading.overview = true;\n        state.error.overview = null;\n      })\n      .addCase(fetchDashboardOverview.fulfilled, (state, action) => {\n        state.loading.overview = false;\n        state.overview = action.payload;\n        state.lastUpdated = new Date().toISOString();\n        \n        // Update quick metrics from overview\n        if (action.payload) {\n          state.quickMetrics = [\n            {\n              label: 'Total Speakers',\n              value: action.payload.speaker_statistics.total_speakers,\n              icon: 'people',\n              color: 'primary',\n            },\n            {\n              label: 'Avg SER Score',\n              value: action.payload.ser_metrics.summary.average_ser_score.toFixed(1),\n              unit: '%',\n              icon: 'assessment',\n              color: 'info',\n            },\n            {\n              label: 'Active Sessions',\n              value: action.payload.mt_validation.statistics.active_sessions,\n              icon: 'play_arrow',\n              color: 'success',\n            },\n            {\n              label: 'Pending Transitions',\n              value: action.payload.transition_statistics.statistics.pending_requests,\n              icon: 'swap_horiz',\n              color: 'warning',\n            },\n          ];\n        }\n      })\n      .addCase(fetchDashboardOverview.rejected, (state, action) => {\n        state.loading.overview = false;\n        state.error.overview = action.error.message || 'Failed to fetch dashboard overview';\n      });\n    \n    // Speaker bucket stats\n    builder\n      .addCase(fetchSpeakerBucketStats.pending, (state) => {\n        state.loading.speakerStats = true;\n        state.error.speakerStats = null;\n      })\n      .addCase(fetchSpeakerBucketStats.fulfilled, (state, action) => {\n        state.loading.speakerStats = false;\n        state.speakerStats = action.payload;\n      })\n      .addCase(fetchSpeakerBucketStats.rejected, (state, action) => {\n        state.loading.speakerStats = false;\n        state.error.speakerStats = action.error.message || 'Failed to fetch speaker statistics';\n      });\n    \n    // Services health\n    builder\n      .addCase(fetchServicesHealth.pending, (state) => {\n        state.loading.servicesHealth = true;\n        state.error.servicesHealth = null;\n      })\n      .addCase(fetchServicesHealth.fulfilled, (state, action) => {\n        state.loading.servicesHealth = false;\n        state.servicesHealth = action.payload;\n      })\n      .addCase(fetchServicesHealth.rejected, (state, action) => {\n        state.loading.servicesHealth = false;\n        state.error.servicesHealth = action.error.message || 'Failed to fetch services health';\n      });\n    \n    // Dashboard layouts\n    builder\n      .addCase(fetchDashboardLayouts.fulfilled, (state, action) => {\n        state.layouts = action.payload;\n        if (!state.currentLayout && action.payload.length > 0) {\n          state.currentLayout = action.payload.find(l => l.isDefault) || action.payload[0];\n        }\n      });\n    \n    // Dashboard alerts\n    builder\n      .addCase(fetchDashboardAlerts.fulfilled, (state, action) => {\n        state.alerts = action.payload;\n        state.unreadAlerts = action.payload.filter(a => !a.acknowledged).length;\n      });\n    \n    // Time series data\n    builder\n      .addCase(fetchTimeSeriesData.fulfilled, (state, action) => {\n        // The key would be passed in the action meta or payload\n        const key = action.meta.arg.metric;\n        state.chartData.timeSeries[key] = action.payload;\n      });\n  },\n});\n\n// Export actions\nexport const {\n  setActiveFilters,\n  updateDateRange,\n  updatePreferences,\n  setRefreshInterval,\n  toggleAutoRefresh,\n  setCurrentLayout,\n  updateWidgetPosition,\n  addCustomWidget,\n  removeCustomWidget,\n  markAlertAsRead,\n  markAllAlertsAsRead,\n  toggleFullscreen,\n  setConnectionStatus,\n  incrementUpdateCount,\n  setTimeSeriesData,\n  setPieChartData,\n  setBarChartData,\n  updateQuickMetrics,\n  clearErrors,\n  clearError,\n} = dashboardSlice.actions;\n\n// Selectors\nexport const selectDashboardOverview = (state: { dashboard: DashboardState }) => state.dashboard.overview;\nexport const selectSpeakerStats = (state: { dashboard: DashboardState }) => state.dashboard.speakerStats;\nexport const selectServicesHealth = (state: { dashboard: DashboardState }) => state.dashboard.servicesHealth;\nexport const selectActiveFilters = (state: { dashboard: DashboardState }) => state.dashboard.activeFilters;\nexport const selectCurrentLayout = (state: { dashboard: DashboardState }) => state.dashboard.currentLayout;\nexport const selectDashboardAlerts = (state: { dashboard: DashboardState }) => state.dashboard.alerts;\nexport const selectUnreadAlerts = (state: { dashboard: DashboardState }) => state.dashboard.unreadAlerts;\nexport const selectQuickMetrics = (state: { dashboard: DashboardState }) => state.dashboard.quickMetrics;\nexport const selectDashboardLoading = (state: { dashboard: DashboardState }) => state.dashboard.loading;\nexport const selectDashboardError = (state: { dashboard: DashboardState }) => state.dashboard.error;\nexport const selectChartData = (state: { dashboard: DashboardState }) => state.dashboard.chartData;\nexport const selectDashboardPreferences = (state: { dashboard: DashboardState }) => state.dashboard.preferences;\nexport const selectIsConnected = (state: { dashboard: DashboardState }) => state.dashboard.isConnected;\nexport const selectLastUpdated = (state: { dashboard: DashboardState }) => state.dashboard.lastUpdated;\n\nexport default dashboardSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/dashboard/pages/DashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Typography' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppBar' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Toolbar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FullscreenIcon' is defined but never used.","line":31,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FullscreenExitIcon' is defined but never used.","line":32,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DashboardIcon' is defined but never used.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddIcon' is defined but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRefreshData'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":77,"suggestions":[{"desc":"Update the dependencies array to be: [preferences.auto_refresh, preferences.refresh_interval, activeFilters, handleRefreshData]","fix":{"range":[3454,3525],"text":"[preferences.auto_refresh, preferences.refresh_interval, activeFilters, handleRefreshData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRefreshData'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [dispatch, handleRefreshData]","fix":{"range":[3753,3763],"text":"[dispatch, handleRefreshData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4211,4214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4211,4214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard Page Component\n *\n * Main dashboard page with comprehensive system overview,\n * real-time metrics, and interactive visualizations.\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  IconButton,\n  Tooltip,\n  Fab,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  Alert,\n  Snackbar,\n  AppBar,\n  Toolbar,\n  Chip,\n  Badge,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Settings as SettingsIcon,\n  Fullscreen as FullscreenIcon,\n  FullscreenExit as FullscreenExitIcon,\n  FilterList as FilterIcon,\n  Download as ExportIcon,\n  Notifications as NotificationsIcon,\n  Dashboard as DashboardIcon,\n  Add as AddIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  fetchDashboardOverview,\n  fetchServicesHealth,\n  fetchDashboardAlerts,\n  setConnectionStatus,\n  incrementUpdateCount,\n  toggleFullscreen,\n  selectDashboardOverview,\n  selectServicesHealth,\n  selectDashboardAlerts,\n  selectUnreadAlerts,\n  selectQuickMetrics,\n  selectDashboardLoading,\n  selectDashboardError,\n  selectActiveFilters,\n  selectDashboardPreferences,\n  selectIsConnected,\n  selectLastUpdated,\n} from '../dashboard-slice';\n\n// Components\nimport DashboardHeader from '../components/DashboardHeader';\nimport QuickMetricsBar from '../components/QuickMetricsBar';\nimport SpeakerBucketOverview from '../components/SpeakerBucketOverview';\nimport SERMetricsChart from '../components/SERMetricsChart';\nimport RAGProcessingStatus from '../components/RAGProcessingStatus';\nimport MTValidationMetrics from '../components/MTValidationMetrics';\nimport TransitionStatistics from '../components/TransitionStatistics';\nimport ServicesHealthPanel from '../components/ServicesHealthPanel';\nimport DashboardFilters from '../components/DashboardFilters';\nimport AlertsPanel from '../components/AlertsPanel';\nimport DashboardSettings from '../components/DashboardSettings';\n\nexport const DashboardPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  // Redux state\n  const overview = useAppSelector(selectDashboardOverview);\n  const servicesHealth = useAppSelector(selectServicesHealth);\n  const alerts = useAppSelector(selectDashboardAlerts);\n  const unreadAlerts = useAppSelector(selectUnreadAlerts);\n  const quickMetrics = useAppSelector(selectQuickMetrics);\n  const loading = useAppSelector(selectDashboardLoading);\n  const error = useAppSelector(selectDashboardError);\n  const activeFilters = useAppSelector(selectActiveFilters);\n  const preferences = useAppSelector(selectDashboardPreferences);\n  const isConnected = useAppSelector(selectIsConnected);\n  const lastUpdated = useAppSelector(selectLastUpdated);\n\n  // Local state\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showAlerts, setShowAlerts] = useState(false);\n  const [notification, setNotification] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'warning' | 'info';\n  }>({\n    open: false,\n    message: '',\n    severity: 'info',\n  });\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!preferences.auto_refresh) return;\n\n    const interval = setInterval(() => {\n      handleRefreshData();\n    }, preferences.refresh_interval);\n\n    return () => clearInterval(interval);\n  }, [preferences.auto_refresh, preferences.refresh_interval, activeFilters]);\n\n  // Initial data load\n  useEffect(() => {\n    handleRefreshData();\n    dispatch(fetchServicesHealth());\n    dispatch(fetchDashboardAlerts());\n\n    // Simulate connection status\n    dispatch(setConnectionStatus(true));\n  }, [dispatch]);\n\n  // Handle data refresh\n  const handleRefreshData = useCallback(async () => {\n    try {\n      await Promise.all([\n        dispatch(fetchDashboardOverview(activeFilters)).unwrap(),\n        dispatch(fetchServicesHealth()).unwrap(),\n      ]);\n\n      dispatch(incrementUpdateCount());\n\n      setNotification({\n        open: true,\n        message: 'Dashboard data refreshed successfully',\n        severity: 'success',\n      });\n    } catch (error: any) {\n      setNotification({\n        open: true,\n        message: error.message || 'Failed to refresh dashboard data',\n        severity: 'error',\n      });\n    }\n  }, [dispatch, activeFilters]);\n\n  // Handle manual refresh\n  const handleManualRefresh = () => {\n    handleRefreshData();\n  };\n\n  // Handle fullscreen toggle\n  const handleFullscreenToggle = () => {\n    dispatch(toggleFullscreen());\n\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n  };\n\n  // Handle export\n  const handleExport = () => {\n    // Export functionality would be implemented here\n    setNotification({\n      open: true,\n      message: 'Export functionality coming soon',\n      severity: 'info',\n    });\n  };\n\n  // Speed dial actions\n  const speedDialActions = [\n    {\n      icon: <FilterIcon />,\n      name: 'Filters',\n      onClick: () => setShowFilters(true),\n    },\n    {\n      icon: <SettingsIcon />,\n      name: 'Settings',\n      onClick: () => setShowSettings(true),\n    },\n    {\n      icon: <ExportIcon />,\n      name: 'Export',\n      onClick: handleExport,\n    },\n    {\n      icon: <RefreshIcon />,\n      name: 'Refresh',\n      onClick: handleManualRefresh,\n    },\n  ];\n\n  // Handle notification close\n  const handleNotificationClose = () => {\n    setNotification({ ...notification, open: false });\n  };\n\n  // Format last updated time\n  const formatLastUpdated = (timestamp: string | null) => {\n    if (!timestamp) return 'Never';\n\n    const now = new Date();\n    const updated = new Date(timestamp);\n    const diffMs = now.getTime() - updated.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n\n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n\n    return updated.toLocaleDateString();\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, height: '100vh', overflow: 'hidden' }}>\n      {/* Dashboard Header */}\n      <DashboardHeader\n        title=\"Speaker Bucket Management Dashboard\"\n        subtitle=\"Real-time system overview and analytics\"\n        lastUpdated={formatLastUpdated(lastUpdated)}\n        isConnected={isConnected}\n        onRefresh={handleManualRefresh}\n        onToggleFullscreen={handleFullscreenToggle}\n        loading={loading.overview}\n      />\n\n      {/* Quick Metrics Bar */}\n      <QuickMetricsBar\n        metrics={quickMetrics}\n        loading={loading.overview}\n      />\n\n      {/* Main Content */}\n      <Container maxWidth={false} sx={{ py: 2, height: 'calc(100vh - 140px)', overflow: 'auto' }}>\n        {/* Error Alert */}\n        {error.general && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error.general}\n          </Alert>\n        )}\n\n        {/* Services Health Alert */}\n        {servicesHealth && Object.values(servicesHealth).some(service => service.status !== 'healthy') && (\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\n            Some services are experiencing issues. Check the Services Health panel for details.\n          </Alert>\n        )}\n\n        {/* Dashboard Grid */}\n        <Grid container spacing={3}>\n          {/* Speaker Bucket Overview */}\n          <Grid item xs={12} lg={6}>\n            <SpeakerBucketOverview\n              data={overview?.speaker_statistics}\n              loading={loading.speakerStats}\n              error={error.speakerStats}\n            />\n          </Grid>\n\n          {/* SER Metrics Chart */}\n          <Grid item xs={12} lg={6}>\n            <SERMetricsChart\n              data={overview?.ser_metrics}\n              loading={loading.serMetrics}\n              error={error.serMetrics}\n            />\n          </Grid>\n\n          {/* RAG Processing Status */}\n          <Grid item xs={12} md={6} lg={4}>\n            <RAGProcessingStatus\n              data={overview?.rag_processing}\n              loading={loading.ragProcessing}\n              error={error.ragProcessing}\n            />\n          </Grid>\n\n          {/* MT Validation Metrics */}\n          <Grid item xs={12} md={6} lg={4}>\n            <MTValidationMetrics\n              data={overview?.mt_validation}\n              loading={loading.mtValidation}\n              error={error.mtValidation}\n            />\n          </Grid>\n\n          {/* Transition Statistics */}\n          <Grid item xs={12} md={6} lg={4}>\n            <TransitionStatistics\n              data={overview?.transition_statistics}\n              loading={loading.transitionStats}\n              error={error.transitionStats}\n            />\n          </Grid>\n\n          {/* Services Health Panel */}\n          <Grid item xs={12}>\n            <ServicesHealthPanel\n              data={servicesHealth}\n              loading={loading.servicesHealth}\n              error={error.servicesHealth}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n\n      {/* Speed Dial */}\n      <SpeedDial\n        ariaLabel=\"Dashboard actions\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n        onClose={() => setSpeedDialOpen(false)}\n        onOpen={() => setSpeedDialOpen(true)}\n        open={speedDialOpen}\n      >\n        {speedDialActions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              action.onClick();\n              setSpeedDialOpen(false);\n            }}\n          />\n        ))}\n      </SpeedDial>\n\n      {/* Alerts FAB */}\n      <Fab\n        color=\"secondary\"\n        sx={{ position: 'fixed', bottom: 16, left: 16 }}\n        onClick={() => setShowAlerts(true)}\n      >\n        <Badge badgeContent={unreadAlerts} color=\"error\">\n          <NotificationsIcon />\n        </Badge>\n      </Fab>\n\n      {/* Dashboard Filters Dialog */}\n      <DashboardFilters\n        open={showFilters}\n        onClose={() => setShowFilters(false)}\n        filters={activeFilters}\n      />\n\n      {/* Dashboard Settings Dialog */}\n      <DashboardSettings\n        open={showSettings}\n        onClose={() => setShowSettings(false)}\n        preferences={preferences}\n      />\n\n      {/* Alerts Panel */}\n      <AlertsPanel\n        open={showAlerts}\n        onClose={() => setShowAlerts(false)}\n        alerts={alerts}\n      />\n\n      {/* Notification Snackbar */}\n      <Snackbar\n        open={notification.open}\n        autoHideDuration={6000}\n        onClose={handleNotificationClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert\n          onClose={handleNotificationClose}\n          severity={notification.severity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default DashboardPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/error-reporting/components/ErrorCategorization.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/error-reporting/components/ErrorCategorization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/error-reporting/components/TextSelection.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/error-reporting/components/TextSelection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/error-reporting/pages/ErrorReportingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/FeedbackPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Slider' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SaveIcon' is defined but never used.","line":33,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3312,3315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3312,3315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Feedback Panel Component\n * \n * Interactive panel for MT feedback collection with rating,\n * comments, improvement assessment, and bucket recommendations.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Rating,\n  Button,\n  Chip,\n  Alert,\n  Divider,\n  Switch,\n  Slider,\n  Card,\n  CardContent,\n  LinearProgress,\n  Tooltip,\n  IconButton,\n} from '@mui/material';\nimport {\n  Save as SaveIcon,\n  Send as SubmitIcon,\n  Clear as ClearIcon,\n  Timer as TimerIcon,\n  Lightbulb as SuggestionIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  submitMTFeedback,\n  updateCurrentFeedback,\n  clearCurrentFeedback,\n  selectCurrentFeedback,\n  selectValidationLoading,\n  selectValidationError,\n  selectUserPreferences,\n} from '../mt-validation-slice';\nimport {\n  ValidationTestData,\n  ImprovementAssessment,\n  SubmitMTFeedbackRequest,\n} from '@/domain/types/mt-validation';\n\ninterface FeedbackPanelProps {\n  sessionId: string;\n  currentItem: ValidationTestData;\n  onFeedbackSubmitted?: () => void;\n  autoAdvance?: boolean;\n}\n\nexport const FeedbackPanel: React.FC<FeedbackPanelProps> = ({\n  sessionId,\n  currentItem,\n  onFeedbackSubmitted,\n  autoAdvance = true,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const currentFeedback = useAppSelector(selectCurrentFeedback);\n  const loading = useAppSelector(selectValidationLoading);\n  const error = useAppSelector(selectValidationError);\n  const userPreferences = useAppSelector(selectUserPreferences);\n  \n  // Local state\n  const [reviewStartTime] = useState(Date.now());\n  const [reviewTime, setReviewTime] = useState(0);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Timer for review time tracking\n  useEffect(() => {\n    if (!userPreferences.review_time_tracking) return;\n\n    const interval = setInterval(() => {\n      setReviewTime(Math.floor((Date.now() - reviewStartTime) / 1000));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [reviewStartTime, userPreferences.review_time_tracking]);\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (!userPreferences.auto_save_feedback) return;\n\n    const autoSaveInterval = setInterval(() => {\n      if (Object.keys(currentFeedback).length > 0) {\n        // Auto-save logic would go here\n        console.log('Auto-saving feedback...');\n      }\n    }, 30000); // Auto-save every 30 seconds\n\n    return () => clearInterval(autoSaveInterval);\n  }, [currentFeedback, userPreferences.auto_save_feedback]);\n\n  // Form validation\n  const validateForm = (): boolean => {\n    const errors: Record<string, string> = {};\n\n    if (!currentFeedback.mt_feedback_rating || currentFeedback.mt_feedback_rating < 1) {\n      errors.rating = 'Please provide a rating';\n    }\n\n    if (!currentFeedback.improvement_assessment) {\n      errors.improvement_assessment = 'Please select an improvement assessment';\n    }\n\n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // Handle form field changes\n  const handleFieldChange = (field: keyof SubmitMTFeedbackRequest, value: any) => {\n    dispatch(updateCurrentFeedback({ [field]: value }));\n    \n    // Clear validation error for this field\n    if (validationErrors[field]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    const feedbackData: SubmitMTFeedbackRequest = {\n      session_id: sessionId,\n      historical_data_id: currentItem.data_id,\n      original_asr_text: currentItem.original_asr_text,\n      rag_corrected_text: currentItem.rag_corrected_text,\n      final_reference_text: currentItem.final_reference_text,\n      mt_feedback_rating: currentFeedback.mt_feedback_rating || 1,\n      mt_comments: currentFeedback.mt_comments || '',\n      improvement_assessment: currentFeedback.improvement_assessment || ImprovementAssessment.NONE,\n      recommended_for_bucket_change: currentFeedback.recommended_for_bucket_change || false,\n      feedback_metadata: {\n        review_time_seconds: reviewTime,\n        auto_advance: autoAdvance,\n        ...currentFeedback.feedback_metadata,\n      },\n    };\n\n    try {\n      await dispatch(submitMTFeedback({ sessionId, feedback: feedbackData })).unwrap();\n      dispatch(clearCurrentFeedback());\n      onFeedbackSubmitted?.();\n    } catch (error) {\n      console.error('Failed to submit feedback:', error);\n    }\n  };\n\n  // Handle clear form\n  const handleClear = () => {\n    dispatch(clearCurrentFeedback());\n    setValidationErrors({});\n  };\n\n  // Get improvement assessment color\n  const getImprovementColor = (assessment: ImprovementAssessment) => {\n    switch (assessment) {\n      case ImprovementAssessment.SIGNIFICANT: return 'success';\n      case ImprovementAssessment.MODERATE: return 'info';\n      case ImprovementAssessment.MINIMAL: return 'warning';\n      case ImprovementAssessment.NONE: return 'default';\n      case ImprovementAssessment.WORSE: return 'error';\n      default: return 'default';\n    }\n  };\n\n  // Format review time\n  const formatReviewTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Paper elevation={1} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header */}\n      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">MT Feedback</Typography>\n          \n          {userPreferences.review_time_tracking && (\n            <Chip\n              icon={<TimerIcon />}\n              label={formatReviewTime(reviewTime)}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error.feedback && (\n        <Alert severity=\"error\" sx={{ m: 2 }}>\n          {error.feedback}\n        </Alert>\n      )}\n\n      {/* Form Content */}\n      <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n        {/* Rating */}\n        <Box sx={{ mb: 3 }}>\n          <FormLabel component=\"legend\" sx={{ mb: 1 }}>\n            Overall Quality Rating *\n          </FormLabel>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <Rating\n              value={currentFeedback.mt_feedback_rating || 0}\n              onChange={(_, value) => handleFieldChange('mt_feedback_rating', value)}\n              size=\"large\"\n              precision={1}\n              max={5}\n            />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {currentFeedback.mt_feedback_rating ? `${currentFeedback.mt_feedback_rating}/5` : 'Not rated'}\n            </Typography>\n          </Box>\n          {validationErrors.rating && (\n            <Typography variant=\"caption\" color=\"error\">\n              {validationErrors.rating}\n            </Typography>\n          )}\n        </Box>\n\n        {/* Improvement Assessment */}\n        <Box sx={{ mb: 3 }}>\n          <FormControl component=\"fieldset\" error={!!validationErrors.improvement_assessment}>\n            <FormLabel component=\"legend\" sx={{ mb: 1 }}>\n              Improvement Assessment *\n            </FormLabel>\n            <RadioGroup\n              value={currentFeedback.improvement_assessment || ''}\n              onChange={(e) => handleFieldChange('improvement_assessment', e.target.value)}\n            >\n              {Object.values(ImprovementAssessment).map((assessment) => (\n                <FormControlLabel\n                  key={assessment}\n                  value={assessment}\n                  control={<Radio />}\n                  label={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                        {assessment.replace('_', ' ')}\n                      </Typography>\n                      <Chip\n                        label={assessment.toUpperCase()}\n                        size=\"small\"\n                        color={getImprovementColor(assessment)}\n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  }\n                />\n              ))}\n            </RadioGroup>\n            {validationErrors.improvement_assessment && (\n              <Typography variant=\"caption\" color=\"error\">\n                {validationErrors.improvement_assessment}\n              </Typography>\n            )}\n          </FormControl>\n        </Box>\n\n        {/* Bucket Change Recommendation */}\n        <Box sx={{ mb: 3 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={currentFeedback.recommended_for_bucket_change || false}\n                onChange={(e) => handleFieldChange('recommended_for_bucket_change', e.target.checked)}\n              />\n            }\n            label=\"Recommend for bucket change\"\n          />\n          <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n            Check if this speaker should be moved to a different bucket based on quality improvements\n          </Typography>\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        {/* Comments */}\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            label=\"Comments (Optional)\"\n            placeholder=\"Provide specific feedback about the correction quality, accuracy, and any observations...\"\n            value={currentFeedback.mt_comments || ''}\n            onChange={(e) => handleFieldChange('mt_comments', e.target.value)}\n            variant=\"outlined\"\n          />\n        </Box>\n\n        {/* Suggestions */}\n        <Card variant=\"outlined\" sx={{ mb: 3 }}>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n              <Typography variant=\"subtitle2\">\n                AI Suggestions\n              </Typography>\n              <IconButton size=\"small\" onClick={() => setShowSuggestions(!showSuggestions)}>\n                <SuggestionIcon />\n              </IconButton>\n            </Box>\n            \n            {showSuggestions && (\n              <Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                  Based on SER metrics analysis:\n                </Typography>\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                  {currentItem.improvement_metrics.is_significant_improvement && (\n                    <Chip\n                      label=\"Significant improvement detected\"\n                      size=\"small\"\n                      color=\"success\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                  {currentItem.corrected_ser_metrics.quality_level === 'high' && (\n                    <Chip\n                      label=\"High quality correction\"\n                      size=\"small\"\n                      color=\"success\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                  {currentItem.improvement_metrics.improvement > 10 && (\n                    <Chip\n                      label=\"Consider bucket promotion\"\n                      size=\"small\"\n                      color=\"info\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                </Box>\n              </Box>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Progress Indicator */}\n        {loading.feedback && (\n          <Box sx={{ mb: 2 }}>\n            <LinearProgress />\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Submitting feedback...\n            </Typography>\n          </Box>\n        )}\n      </Box>\n\n      {/* Actions */}\n      <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>\n          <Button\n            startIcon={<ClearIcon />}\n            onClick={handleClear}\n            disabled={loading.feedback}\n            variant=\"outlined\"\n            color=\"secondary\"\n          >\n            Clear\n          </Button>\n          \n          <Button\n            startIcon={<SubmitIcon />}\n            onClick={handleSubmit}\n            disabled={loading.feedback}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            {loading.feedback ? 'Submitting...' : 'Submit & Next'}\n          </Button>\n        </Box>\n        \n        {autoAdvance && (\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n            Will automatically advance to next item after submission\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default FeedbackPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/KeyboardShortcutsHelper.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categoryIndex' is defined but never used.","line":177,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Keyboard Shortcuts Helper Component\n * \n * Modal dialog displaying available keyboard shortcuts\n * for efficient MT validation workflow.\n */\n\nimport React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  Grid,\n  Chip,\n  Divider,\n  IconButton,\n  Card,\n  CardContent,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Keyboard as KeyboardIcon,\n  NavigateNext as NextIcon,\n  NavigateBefore as PrevIcon,\n  Visibility as ViewIcon,\n  Assessment as MetricsIcon,\n  Fullscreen as FullscreenIcon,\n  Save as SaveIcon,\n  Help as HelpIcon,\n} from '@mui/icons-material';\n\ninterface KeyboardShortcutsHelperProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface ShortcutItem {\n  keys: string[];\n  description: string;\n  icon?: React.ReactNode;\n  category: string;\n}\n\nconst shortcuts: ShortcutItem[] = [\n  // Navigation\n  {\n    keys: ['→', 'N'],\n    description: 'Next item',\n    icon: <NextIcon />,\n    category: 'Navigation',\n  },\n  {\n    keys: ['←', 'P'],\n    description: 'Previous item',\n    icon: <PrevIcon />,\n    category: 'Navigation',\n  },\n  \n  // View Controls\n  {\n    keys: ['D'],\n    description: 'Toggle differences highlighting',\n    icon: <ViewIcon />,\n    category: 'View',\n  },\n  {\n    keys: ['M'],\n    description: 'Toggle SER metrics panel',\n    icon: <MetricsIcon />,\n    category: 'View',\n  },\n  {\n    keys: ['F'],\n    description: 'Toggle fullscreen mode',\n    icon: <FullscreenIcon />,\n    category: 'View',\n  },\n  \n  // Feedback\n  {\n    keys: ['1', '2', '3', '4', '5'],\n    description: 'Set rating (1-5 stars)',\n    category: 'Feedback',\n  },\n  {\n    keys: ['Ctrl', 'Enter'],\n    description: 'Submit feedback and advance',\n    icon: <SaveIcon />,\n    category: 'Feedback',\n  },\n  {\n    keys: ['Ctrl', 'S'],\n    description: 'Save current feedback',\n    icon: <SaveIcon />,\n    category: 'Feedback',\n  },\n  \n  // General\n  {\n    keys: ['?'],\n    description: 'Show this help dialog',\n    icon: <HelpIcon />,\n    category: 'General',\n  },\n  {\n    keys: ['Esc'],\n    description: 'Close dialogs/cancel actions',\n    category: 'General',\n  },\n];\n\nconst KeyShortcut: React.FC<{ keys: string[] }> = ({ keys }) => (\n  <Box sx={{ display: 'flex', gap: 0.5, alignItems: 'center' }}>\n    {keys.map((key, index) => (\n      <React.Fragment key={key}>\n        {index > 0 && (\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mx: 0.5 }}>\n            +\n          </Typography>\n        )}\n        <Chip\n          label={key}\n          size=\"small\"\n          variant=\"outlined\"\n          sx={{\n            fontFamily: 'monospace',\n            fontSize: '0.75rem',\n            height: 24,\n            minWidth: 24,\n            '& .MuiChip-label': {\n              px: 1,\n            },\n          }}\n        />\n      </React.Fragment>\n    ))}\n  </Box>\n);\n\nexport const KeyboardShortcutsHelper: React.FC<KeyboardShortcutsHelperProps> = ({\n  open,\n  onClose,\n}) => {\n  const categories = Array.from(new Set(shortcuts.map(s => s.category)));\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { maxHeight: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <KeyboardIcon color=\"primary\" />\n            <Typography variant=\"h6\">Keyboard Shortcuts</Typography>\n          </Box>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Use these keyboard shortcuts to navigate and interact with the MT validation interface more efficiently.\n        </Typography>\n\n        {categories.map((category, categoryIndex) => (\n          <Box key={category} sx={{ mb: 3 }}>\n            <Typography variant=\"h6\" gutterBottom color=\"primary\">\n              {category}\n            </Typography>\n            \n            <Card variant=\"outlined\">\n              <CardContent sx={{ py: 2 }}>\n                <Grid container spacing={2}>\n                  {shortcuts\n                    .filter(shortcut => shortcut.category === category)\n                    .map((shortcut, index) => (\n                      <Grid item xs={12} key={index}>\n                        <Box sx={{ \n                          display: 'flex', \n                          alignItems: 'center', \n                          justifyContent: 'space-between',\n                          py: 1,\n                          borderBottom: index < shortcuts.filter(s => s.category === category).length - 1 \n                            ? '1px solid' \n                            : 'none',\n                          borderColor: 'divider',\n                        }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                            {shortcut.icon && (\n                              <Box sx={{ color: 'text.secondary' }}>\n                                {shortcut.icon}\n                              </Box>\n                            )}\n                            <Typography variant=\"body2\">\n                              {shortcut.description}\n                            </Typography>\n                          </Box>\n                          <KeyShortcut keys={shortcut.keys} />\n                        </Box>\n                      </Grid>\n                    ))}\n                </Grid>\n              </CardContent>\n            </Card>\n          </Box>\n        ))}\n\n        <Divider sx={{ my: 3 }} />\n\n        {/* Tips */}\n        <Box>\n          <Typography variant=\"h6\" gutterBottom color=\"primary\">\n            Tips\n          </Typography>\n          <Card variant=\"outlined\" sx={{ backgroundColor: 'background.default' }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                <Typography variant=\"body2\">\n                  • Keyboard shortcuts work when not typing in text fields\n                </Typography>\n                <Typography variant=\"body2\">\n                  • Use Tab to navigate between form fields\n                </Typography>\n                <Typography variant=\"body2\">\n                  • Press Escape to cancel any ongoing action\n                </Typography>\n                <Typography variant=\"body2\">\n                  • Shortcuts are case-insensitive (N and n both work)\n                </Typography>\n                <Typography variant=\"body2\">\n                  • Hold Shift with navigation keys for bulk selection\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        </Box>\n\n        {/* Browser Compatibility */}\n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            <strong>Note:</strong> Some shortcuts may conflict with browser shortcuts. \n            Use F11 for browser fullscreen if F key doesn't work for application fullscreen.\n          </Typography>\n        </Box>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose} variant=\"contained\">\n          Got it\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default KeyboardShortcutsHelper;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/MTValidationInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SaveIcon' is defined but never used.","line":35,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'KeyboardArrowUpIcon' is defined but never used.","line":39,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onComplete' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPause' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'compact' is assigned a value but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleNextItem' and 'handlePreviousItem'. Either include them or remove the dependency array.","line":157,"column":6,"nodeType":"ArrayExpression","endLine":157,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [dispatch, handleNextItem, handlePreviousItem, userPreferences.keyboard_shortcuts_enabled]","fix":{"range":[4473,4527],"text":"[dispatch, handleNextItem, handlePreviousItem, userPreferences.keyboard_shortcuts_enabled]"}}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MT Validation Interface Component\n * \n * Main interface for medical transcriptionist validation workflow\n * with side-by-side text comparison, difference highlighting, and feedback controls.\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Tooltip,\n  Chip,\n  LinearProgress,\n  Alert,\n  Fab,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n} from '@mui/material';\nimport {\n  NavigateNext as NextIcon,\n  NavigateBefore as PrevIcon,\n  Visibility as ViewIcon,\n  VisibilityOff as HideIcon,\n  CompareArrows as CompareIcon,\n  Assessment as MetricsIcon,\n  Save as SaveIcon,\n  Settings as SettingsIcon,\n  Fullscreen as FullscreenIcon,\n  FullscreenExit as FullscreenExitIcon,\n  KeyboardArrowUp as KeyboardArrowUpIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  selectCurrentSession,\n  selectCurrentItem,\n  selectCurrentItemIndex,\n  selectTestDataItems,\n  selectSessionProgress,\n  selectComparisonMode,\n  selectShowDifferences,\n  selectShowSERMetrics,\n  selectTextDifferences,\n  selectValidationLoading,\n  selectUserPreferences,\n  nextItem,\n  previousItem,\n  setComparisonMode,\n  toggleDifferences,\n  toggleSERMetrics,\n  calculateTextDifferences,\n} from '../mt-validation-slice';\n\n// Sub-components\nimport TextComparisonPanel from './TextComparisonPanel';\nimport SERMetricsPanel from './SERMetricsPanel';\nimport FeedbackPanel from './FeedbackPanel';\nimport ValidationProgress from './ValidationProgress';\nimport KeyboardShortcutsHelper from './KeyboardShortcutsHelper';\n\ninterface MTValidationInterfaceProps {\n  sessionId: string;\n  onComplete?: () => void;\n  onPause?: () => void;\n  compact?: boolean;\n}\n\nexport const MTValidationInterface: React.FC<MTValidationInterfaceProps> = ({\n  sessionId,\n  onComplete,\n  onPause,\n  compact = false,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const currentSession = useAppSelector(selectCurrentSession);\n  const currentItem = useAppSelector(selectCurrentItem);\n  const currentItemIndex = useAppSelector(selectCurrentItemIndex);\n  const testDataItems = useAppSelector(selectTestDataItems);\n  const sessionProgress = useAppSelector(selectSessionProgress);\n  const comparisonMode = useAppSelector(selectComparisonMode);\n  const showDifferences = useAppSelector(selectShowDifferences);\n  const showSERMetrics = useAppSelector(selectShowSERMetrics);\n  const textDifferences = useAppSelector(selectTextDifferences);\n  const loading = useAppSelector(selectValidationLoading);\n  const userPreferences = useAppSelector(selectUserPreferences);\n  \n  // Local state\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [showKeyboardHelp, setShowKeyboardHelp] = useState(false);\n\n  // Calculate text differences when current item changes\n  useEffect(() => {\n    if (currentItem) {\n      dispatch(calculateTextDifferences({\n        originalText: currentItem.original_asr_text,\n        correctedText: currentItem.rag_corrected_text,\n      }));\n    }\n  }, [dispatch, currentItem]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    if (!userPreferences.keyboard_shortcuts_enabled) return;\n\n    const handleKeyPress = (event: KeyboardEvent) => {\n      // Don't trigger shortcuts when typing in input fields\n      if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'n':\n          event.preventDefault();\n          handleNextItem();\n          break;\n        case 'ArrowLeft':\n        case 'p':\n          event.preventDefault();\n          handlePreviousItem();\n          break;\n        case 'd':\n          event.preventDefault();\n          dispatch(toggleDifferences());\n          break;\n        case 'm':\n          event.preventDefault();\n          dispatch(toggleSERMetrics());\n          break;\n        case 'f':\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case '?':\n          event.preventDefault();\n          setShowKeyboardHelp(true);\n          break;\n        case 'Escape':\n          setShowKeyboardHelp(false);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [dispatch, userPreferences.keyboard_shortcuts_enabled]);\n\n  // Navigation handlers\n  const handleNextItem = useCallback(() => {\n    if (currentItemIndex < testDataItems.length - 1) {\n      dispatch(nextItem());\n    }\n  }, [dispatch, currentItemIndex, testDataItems.length]);\n\n  const handlePreviousItem = useCallback(() => {\n    if (currentItemIndex > 0) {\n      dispatch(previousItem());\n    }\n  }, [dispatch, currentItemIndex]);\n\n  // UI handlers\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setIsFullscreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullscreen(false);\n    }\n  };\n\n  const handleComparisonModeChange = (mode: 'side-by-side' | 'unified' | 'overlay') => {\n    dispatch(setComparisonMode(mode));\n  };\n\n  // Speed dial actions\n  const speedDialActions = [\n    {\n      icon: <SettingsIcon />,\n      name: 'Settings',\n      onClick: () => {\n        // Open settings dialog\n      },\n    },\n    {\n      icon: showDifferences ? <HideIcon /> : <ViewIcon />,\n      name: showDifferences ? 'Hide Differences' : 'Show Differences',\n      onClick: () => dispatch(toggleDifferences()),\n    },\n    {\n      icon: <MetricsIcon />,\n      name: 'Toggle SER Metrics',\n      onClick: () => dispatch(toggleSERMetrics()),\n    },\n    {\n      icon: isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />,\n      name: isFullscreen ? 'Exit Fullscreen' : 'Fullscreen',\n      onClick: toggleFullscreen,\n    },\n  ];\n\n  if (!currentSession || !currentItem) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          No validation session or item selected\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      {/* Header */}\n      <Paper elevation={1} sx={{ p: 2, borderRadius: 0 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          {/* Session Info */}\n          <Box>\n            <Typography variant=\"h6\" component=\"h1\">\n              {currentSession.session_name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Item {currentItemIndex + 1} of {testDataItems.length}\n            </Typography>\n          </Box>\n\n          {/* Controls */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {/* Comparison Mode Toggle */}\n            <Tooltip title=\"Comparison Mode\">\n              <IconButton\n                onClick={() => {\n                  const modes: Array<'side-by-side' | 'unified' | 'overlay'> = ['side-by-side', 'unified', 'overlay'];\n                  const currentIndex = modes.indexOf(comparisonMode);\n                  const nextMode = modes[(currentIndex + 1) % modes.length];\n                  handleComparisonModeChange(nextMode);\n                }}\n              >\n                <CompareIcon />\n              </IconButton>\n            </Tooltip>\n\n            {/* Differences Toggle */}\n            <Tooltip title={showDifferences ? 'Hide Differences' : 'Show Differences'}>\n              <IconButton onClick={() => dispatch(toggleDifferences())}>\n                {showDifferences ? <HideIcon /> : <ViewIcon />}\n              </IconButton>\n            </Tooltip>\n\n            {/* SER Metrics Toggle */}\n            <Tooltip title=\"Toggle SER Metrics\">\n              <IconButton onClick={() => dispatch(toggleSERMetrics())}>\n                <MetricsIcon color={showSERMetrics ? 'primary' : 'default'} />\n              </IconButton>\n            </Tooltip>\n\n            {/* Navigation */}\n            <Tooltip title=\"Previous Item (←)\">\n              <span>\n                <IconButton\n                  onClick={handlePreviousItem}\n                  disabled={currentItemIndex === 0}\n                >\n                  <PrevIcon />\n                </IconButton>\n              </span>\n            </Tooltip>\n\n            <Chip\n              label={`${currentItemIndex + 1} / ${testDataItems.length}`}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n\n            <Tooltip title=\"Next Item (→)\">\n              <span>\n                <IconButton\n                  onClick={handleNextItem}\n                  disabled={currentItemIndex === testDataItems.length - 1}\n                >\n                  <NextIcon />\n                </IconButton>\n              </span>\n            </Tooltip>\n          </Box>\n        </Box>\n\n        {/* Progress Bar */}\n        <Box sx={{ mt: 1 }}>\n          <ValidationProgress\n            current={currentItemIndex + 1}\n            total={testDataItems.length}\n            progress={sessionProgress}\n            compact={true}\n          />\n        </Box>\n      </Paper>\n\n      {/* Main Content */}\n      <Box sx={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        {/* Text Comparison Panel */}\n        <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n          <TextComparisonPanel\n            originalText={currentItem.original_asr_text}\n            correctedText={currentItem.rag_corrected_text}\n            referenceText={currentItem.final_reference_text}\n            differences={textDifferences}\n            comparisonMode={comparisonMode}\n            showDifferences={showDifferences}\n            loading={loading.differences}\n          />\n        </Box>\n\n        {/* Side Panel */}\n        <Box sx={{ width: 400, display: 'flex', flexDirection: 'column', borderLeft: 1, borderColor: 'divider' }}>\n          {/* SER Metrics Panel */}\n          {showSERMetrics && (\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n              <SERMetricsPanel\n                originalMetrics={currentItem.original_ser_metrics}\n                correctedMetrics={currentItem.corrected_ser_metrics}\n                improvementMetrics={currentItem.improvement_metrics}\n                compact={true}\n              />\n            </Box>\n          )}\n\n          {/* Feedback Panel */}\n          <Box sx={{ flex: 1, overflow: 'auto' }}>\n            <FeedbackPanel\n              sessionId={sessionId}\n              currentItem={currentItem}\n              onFeedbackSubmitted={handleNextItem}\n              autoAdvance={userPreferences.auto_advance}\n            />\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Speed Dial */}\n      <SpeedDial\n        ariaLabel=\"Validation actions\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n        onClose={() => setSpeedDialOpen(false)}\n        onOpen={() => setSpeedDialOpen(true)}\n        open={speedDialOpen}\n      >\n        {speedDialActions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              action.onClick();\n              setSpeedDialOpen(false);\n            }}\n          />\n        ))}\n      </SpeedDial>\n\n      {/* Keyboard Shortcuts Helper */}\n      {showKeyboardHelp && (\n        <KeyboardShortcutsHelper\n          open={showKeyboardHelp}\n          onClose={() => setShowKeyboardHelp(false)}\n        />\n      )}\n\n      {/* Loading Overlay */}\n      {loading.testData && (\n        <Box\n          sx={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 9999,\n          }}\n        >\n          <Paper sx={{ p: 3, textAlign: 'center' }}>\n            <LinearProgress sx={{ mb: 2 }} />\n            <Typography variant=\"body1\">Loading validation data...</Typography>\n          </Paper>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default MTValidationInterface;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/SERMetricsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SER Metrics Panel Component\n * \n * Displays SER metrics comparison with visual indicators\n * and improvement analysis for MT validation.\n */\n\nimport React from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  LinearProgress,\n  Chip,\n  Divider,\n  Tooltip,\n  IconButton,\n  Collapse,\n} from '@mui/material';\nimport {\n  TrendingUp as ImprovementIcon,\n  TrendingDown as DegradationIcon,\n  TrendingFlat as NoChangeIcon,\n  Info as InfoIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n} from '@mui/icons-material';\nimport { SERMetrics, SERComparison } from '@/domain/types/mt-validation';\n\ninterface SERMetricsPanelProps {\n  originalMetrics: SERMetrics;\n  correctedMetrics: SERMetrics;\n  improvementMetrics: SERComparison;\n  compact?: boolean;\n}\n\ninterface MetricDisplayProps {\n  label: string;\n  value: number;\n  unit?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'warning' | 'info' | 'success';\n  showProgress?: boolean;\n  maxValue?: number;\n  tooltip?: string;\n}\n\nconst MetricDisplay: React.FC<MetricDisplayProps> = ({\n  label,\n  value,\n  unit = '',\n  color = 'primary',\n  showProgress = false,\n  maxValue = 100,\n  tooltip,\n}) => {\n  const displayValue = typeof value === 'number' ? value.toFixed(1) : value;\n  \n  return (\n    <Box sx={{ mb: 1 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 0.5 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {label}\n          {tooltip && (\n            <Tooltip title={tooltip}>\n              <InfoIcon sx={{ fontSize: 14, ml: 0.5, color: 'text.disabled' }} />\n            </Tooltip>\n          )}\n        </Typography>\n        <Typography variant=\"body2\" fontWeight=\"medium\">\n          {displayValue}{unit}\n        </Typography>\n      </Box>\n      {showProgress && (\n        <LinearProgress\n          variant=\"determinate\"\n          value={Math.min((value / maxValue) * 100, 100)}\n          color={color}\n          sx={{ height: 6, borderRadius: 3 }}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport const SERMetricsPanel: React.FC<SERMetricsPanelProps> = ({\n  originalMetrics,\n  correctedMetrics,\n  improvementMetrics,\n  compact = false,\n}) => {\n  const [expanded, setExpanded] = React.useState(!compact);\n\n  const getQualityColor = (qualityLevel: string): 'success' | 'warning' | 'error' => {\n    switch (qualityLevel) {\n      case 'high': return 'success';\n      case 'medium': return 'warning';\n      case 'low': return 'error';\n      default: return 'warning';\n    }\n  };\n\n  const getImprovementIcon = (improvement: number) => {\n    if (improvement > 5) return <ImprovementIcon color=\"success\" />;\n    if (improvement < -5) return <DegradationIcon color=\"error\" />;\n    return <NoChangeIcon color=\"info\" />;\n  };\n\n  const getImprovementColor = (improvement: number): 'success' | 'error' | 'info' => {\n    if (improvement > 5) return 'success';\n    if (improvement < -5) return 'error';\n    return 'info';\n  };\n\n  return (\n    <Paper elevation={1} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header */}\n      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">SER Metrics</Typography>\n          {compact && (\n            <IconButton size=\"small\" onClick={() => setExpanded(!expanded)}>\n              {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            </IconButton>\n          )}\n        </Box>\n      </Box>\n\n      <Collapse in={expanded}>\n        <Box sx={{ p: 2, flex: 1, overflow: 'auto' }}>\n          {/* Improvement Summary */}\n          <Card variant=\"outlined\" sx={{ mb: 2, backgroundColor: 'background.default' }}>\n            <CardContent sx={{ py: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n                <Typography variant=\"subtitle2\" fontWeight=\"bold\">\n                  Overall Improvement\n                </Typography>\n                {getImprovementIcon(improvementMetrics.improvement)}\n              </Box>\n              \n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color={`${getImprovementColor(improvementMetrics.improvement)}.main`}>\n                  {improvementMetrics.improvement > 0 ? '+' : ''}{improvementMetrics.improvement.toFixed(1)}%\n                </Typography>\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {improvementMetrics.improvement_percentage.toFixed(1)}% relative improvement\n                  </Typography>\n                  <Chip\n                    label={improvementMetrics.is_significant_improvement ? 'Significant' : 'Minor'}\n                    size=\"small\"\n                    color={improvementMetrics.is_significant_improvement ? 'success' : 'default'}\n                    variant=\"outlined\"\n                  />\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Metrics Comparison */}\n          <Grid container spacing={2}>\n            {/* Original Metrics */}\n            <Grid item xs={12} md={6}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\n                    Original ASR\n                  </Typography>\n                  \n                  <MetricDisplay\n                    label=\"SER Score\"\n                    value={originalMetrics.ser_score}\n                    unit=\"%\"\n                    color=\"error\"\n                    showProgress\n                    tooltip=\"Sentence Error Rate - lower is better\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Edit Distance\"\n                    value={originalMetrics.edit_distance}\n                    tooltip=\"Total number of edits required\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Insertions\"\n                    value={originalMetrics.insertions}\n                    color=\"info\"\n                    tooltip=\"Number of words that need to be inserted\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Deletions\"\n                    value={originalMetrics.deletions}\n                    color=\"warning\"\n                    tooltip=\"Number of words that need to be deleted\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Substitutions\"\n                    value={originalMetrics.substitutions}\n                    color=\"secondary\"\n                    tooltip=\"Number of words that need to be replaced\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Moves\"\n                    value={originalMetrics.moves}\n                    color=\"primary\"\n                    tooltip=\"Number of words that need to be moved\"\n                  />\n                  \n                  <Box sx={{ mt: 2 }}>\n                    <Chip\n                      label={`${originalMetrics.quality_level.toUpperCase()} Quality`}\n                      color={getQualityColor(originalMetrics.quality_level)}\n                      size=\"small\"\n                    />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            {/* Corrected Metrics */}\n            <Grid item xs={12} md={6}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\n                    RAG Corrected\n                  </Typography>\n                  \n                  <MetricDisplay\n                    label=\"SER Score\"\n                    value={correctedMetrics.ser_score}\n                    unit=\"%\"\n                    color={correctedMetrics.ser_score < originalMetrics.ser_score ? 'success' : 'error'}\n                    showProgress\n                    tooltip=\"Sentence Error Rate - lower is better\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Edit Distance\"\n                    value={correctedMetrics.edit_distance}\n                    tooltip=\"Total number of edits required\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Insertions\"\n                    value={correctedMetrics.insertions}\n                    color=\"info\"\n                    tooltip=\"Number of words that need to be inserted\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Deletions\"\n                    value={correctedMetrics.deletions}\n                    color=\"warning\"\n                    tooltip=\"Number of words that need to be deleted\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Substitutions\"\n                    value={correctedMetrics.substitutions}\n                    color=\"secondary\"\n                    tooltip=\"Number of words that need to be replaced\"\n                  />\n                  \n                  <MetricDisplay\n                    label=\"Moves\"\n                    value={correctedMetrics.moves}\n                    color=\"primary\"\n                    tooltip=\"Number of words that need to be moved\"\n                  />\n                  \n                  <Box sx={{ mt: 2 }}>\n                    <Chip\n                      label={`${correctedMetrics.quality_level.toUpperCase()} Quality`}\n                      color={getQualityColor(correctedMetrics.quality_level)}\n                      size=\"small\"\n                    />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n\n          {/* Quality Assessment */}\n          <Card variant=\"outlined\" sx={{ mt: 2 }}>\n            <CardContent>\n              <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\n                Quality Assessment\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Original Quality\n                    </Typography>\n                    <Chip\n                      label={originalMetrics.is_acceptable_quality ? 'Acceptable' : 'Needs Work'}\n                      color={originalMetrics.is_acceptable_quality ? 'success' : 'error'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={6}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Corrected Quality\n                    </Typography>\n                    <Chip\n                      label={correctedMetrics.is_acceptable_quality ? 'Acceptable' : 'Needs Work'}\n                      color={correctedMetrics.is_acceptable_quality ? 'success' : 'error'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          {/* Improvement Details */}\n          {!compact && (\n            <Card variant=\"outlined\" sx={{ mt: 2 }}>\n              <CardContent>\n                <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\n                  Improvement Analysis\n                </Typography>\n                \n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <Typography variant=\"body2\">Absolute Improvement:</Typography>\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\n                      {improvementMetrics.improvement > 0 ? '+' : ''}{improvementMetrics.improvement.toFixed(2)}%\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <Typography variant=\"body2\">Relative Improvement:</Typography>\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\n                      {improvementMetrics.improvement_percentage.toFixed(2)}%\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <Typography variant=\"body2\">Significance:</Typography>\n                    <Chip\n                      label={improvementMetrics.is_significant_improvement ? 'Significant' : 'Not Significant'}\n                      size=\"small\"\n                      color={improvementMetrics.is_significant_improvement ? 'success' : 'default'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Box>\n              </CardContent>\n            </Card>\n          )}\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default SERMetricsPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/SessionSetupDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AssessmentIcon' is defined but never used.","line":38,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":39,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1528,1531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1528,1531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1617,1620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1617,1620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1888,1891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1888,1891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1973,1976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1973,1976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4112,4115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4112,4115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Session Setup Dialog Component\n * \n * Dialog for creating new MT validation sessions with\n * speaker selection, test data configuration, and settings.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  Alert,\n  Autocomplete,\n  Switch,\n  FormControlLabel,\n  Stepper,\n  Step,\n  StepLabel,\n  IconButton,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Person as PersonIcon,\n  Assessment as AssessmentIcon,\n  Settings as SettingsIcon,\n} from '@mui/icons-material';\nimport { StartValidationSessionRequest } from '@/domain/types/mt-validation';\nimport { Speaker } from '@/domain/types/speaker';\n\ninterface SessionSetupDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onCreateSession: (sessionData: StartValidationSessionRequest) => void;\n}\n\ninterface SessionFormData {\n  session_name: string;\n  speaker_id: string;\n  speaker_name: string;\n  test_data_count: number;\n  mt_user_id: string;\n  priority: 'low' | 'medium' | 'high';\n  auto_advance: boolean;\n  include_ser_metrics: boolean;\n  randomize_order: boolean;\n}\n\nconst steps = ['Speaker Selection', 'Test Data', 'Settings'];\n\n// Mock data - in real app, this would come from API\nconst mockSpeakers: Speaker[] = [\n  {\n    speaker_id: '1',\n    speaker_identifier: 'SPEAKER_001',\n    speaker_name: 'Dr. John Smith',\n    current_bucket: 'HIGH_TOUCH' as any,\n    note_count: 150,\n    average_ser_score: 18.5,\n    quality_trend: 'improving' as any,\n    should_transition: true,\n    has_sufficient_data: true,\n    created_at: '2025-01-01',\n    updated_at: '2025-01-01',\n  },\n  {\n    speaker_id: '2',\n    speaker_identifier: 'SPEAKER_002',\n    speaker_name: 'Dr. Sarah Johnson',\n    current_bucket: 'MEDIUM_TOUCH' as any,\n    note_count: 89,\n    average_ser_score: 12.3,\n    quality_trend: 'stable' as any,\n    should_transition: false,\n    has_sufficient_data: true,\n    created_at: '2025-01-01',\n    updated_at: '2025-01-01',\n  },\n];\n\nexport const SessionSetupDialog: React.FC<SessionSetupDialogProps> = ({\n  open,\n  onClose,\n  onCreateSession,\n}) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [formData, setFormData] = useState<SessionFormData>({\n    session_name: '',\n    speaker_id: '',\n    speaker_name: '',\n    test_data_count: 20,\n    mt_user_id: 'current-user', // Would come from auth context\n    priority: 'medium',\n    auto_advance: true,\n    include_ser_metrics: true,\n    randomize_order: false,\n  });\n  const [selectedSpeaker, setSelectedSpeaker] = useState<Speaker | null>(null);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Reset form when dialog opens\n  useEffect(() => {\n    if (open) {\n      setActiveStep(0);\n      setFormData({\n        session_name: '',\n        speaker_id: '',\n        speaker_name: '',\n        test_data_count: 20,\n        mt_user_id: 'current-user',\n        priority: 'medium',\n        auto_advance: true,\n        include_ser_metrics: true,\n        randomize_order: false,\n      });\n      setSelectedSpeaker(null);\n      setErrors({});\n    }\n  }, [open]);\n\n  // Validation\n  const validateStep = (step: number): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    switch (step) {\n      case 0: // Speaker Selection\n        if (!formData.speaker_id) {\n          newErrors.speaker_id = 'Please select a speaker';\n        }\n        if (!formData.session_name.trim()) {\n          newErrors.session_name = 'Session name is required';\n        }\n        break;\n      case 1: // Test Data\n        if (formData.test_data_count < 1 || formData.test_data_count > 100) {\n          newErrors.test_data_count = 'Test data count must be between 1 and 100';\n        }\n        break;\n      case 2: // Settings\n        // No validation needed for settings step\n        break;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle field changes\n  const handleFieldChange = (field: keyof SessionFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error for this field\n    if (errors[field]) {\n      setErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n  };\n\n  // Handle speaker selection\n  const handleSpeakerSelect = (speaker: Speaker | null) => {\n    setSelectedSpeaker(speaker);\n    if (speaker) {\n      handleFieldChange('speaker_id', speaker.speaker_id);\n      handleFieldChange('speaker_name', speaker.speaker_name);\n      \n      // Auto-generate session name\n      if (!formData.session_name) {\n        const timestamp = new Date().toLocaleDateString();\n        handleFieldChange('session_name', `Validation - ${speaker.speaker_name} - ${timestamp}`);\n      }\n    } else {\n      handleFieldChange('speaker_id', '');\n      handleFieldChange('speaker_name', '');\n    }\n  };\n\n  // Navigation\n  const handleNext = () => {\n    if (validateStep(activeStep)) {\n      setActiveStep(prev => prev + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  // Handle form submission\n  const handleSubmit = () => {\n    if (!validateStep(activeStep)) return;\n\n    const sessionData: StartValidationSessionRequest = {\n      speaker_id: formData.speaker_id,\n      session_name: formData.session_name,\n      test_data_ids: [], // Would be populated based on speaker and criteria\n      mt_user_id: formData.mt_user_id,\n      session_metadata: {\n        priority: formData.priority,\n        auto_advance: formData.auto_advance,\n        include_ser_metrics: formData.include_ser_metrics,\n        randomize_order: formData.randomize_order,\n        test_data_count: formData.test_data_count,\n      },\n    };\n\n    onCreateSession(sessionData);\n  };\n\n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Select Speaker and Session Details\n            </Typography>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Session Name\"\n                  value={formData.session_name}\n                  onChange={(e) => handleFieldChange('session_name', e.target.value)}\n                  error={!!errors.session_name}\n                  helperText={errors.session_name}\n                  placeholder=\"e.g., Quality Review - Dr. Smith - Jan 2025\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Autocomplete\n                  options={mockSpeakers}\n                  getOptionLabel={(option) => `${option.speaker_name} (${option.speaker_identifier})`}\n                  value={selectedSpeaker}\n                  onChange={(_, value) => handleSpeakerSelect(value)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Select Speaker\"\n                      error={!!errors.speaker_id}\n                      helperText={errors.speaker_id || 'Choose the speaker to validate'}\n                    />\n                  )}\n                  renderOption={(props, option) => (\n                    <Box component=\"li\" {...props}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                        <PersonIcon color=\"primary\" />\n                        <Box sx={{ flex: 1 }}>\n                          <Typography variant=\"body1\">{option.speaker_name}</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {option.speaker_identifier} • {option.note_count} notes • \n                            SER: {option.average_ser_score.toFixed(1)}%\n                          </Typography>\n                        </Box>\n                        <Chip\n                          label={option.current_bucket.replace('_', ' ')}\n                          size=\"small\"\n                          color={option.should_transition ? 'warning' : 'default'}\n                        />\n                      </Box>\n                    </Box>\n                  )}\n                />\n              </Grid>\n\n              {selectedSpeaker && (\n                <Grid item xs={12}>\n                  <Card variant=\"outlined\">\n                    <CardContent>\n                      <Typography variant=\"subtitle2\" gutterBottom>\n                        Speaker Summary\n                      </Typography>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Current Bucket\n                          </Typography>\n                          <Typography variant=\"body1\">\n                            {selectedSpeaker.current_bucket.replace('_', ' ')}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Average SER Score\n                          </Typography>\n                          <Typography variant=\"body1\">\n                            {selectedSpeaker.average_ser_score.toFixed(1)}%\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Total Notes\n                          </Typography>\n                          <Typography variant=\"body1\">\n                            {selectedSpeaker.note_count}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Quality Trend\n                          </Typography>\n                          <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\n                            {selectedSpeaker.quality_trend.replace('_', ' ')}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                      \n                      {selectedSpeaker.should_transition && (\n                        <Alert severity=\"info\" sx={{ mt: 2 }}>\n                          This speaker is recommended for bucket transition based on quality improvements.\n                        </Alert>\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              )}\n            </Grid>\n          </Box>\n        );\n\n      case 1:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Configure Test Data\n            </Typography>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  label=\"Number of Test Items\"\n                  value={formData.test_data_count}\n                  onChange={(e) => handleFieldChange('test_data_count', parseInt(e.target.value))}\n                  error={!!errors.test_data_count}\n                  helperText={errors.test_data_count || 'Recommended: 15-25 items'}\n                  inputProps={{ min: 1, max: 100 }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Priority</InputLabel>\n                  <Select\n                    value={formData.priority}\n                    onChange={(e) => handleFieldChange('priority', e.target.value)}\n                    label=\"Priority\"\n                  >\n                    <MenuItem value=\"low\">Low</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"high\">High</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.randomize_order}\n                      onChange={(e) => handleFieldChange('randomize_order', e.target.checked)}\n                    />\n                  }\n                  label=\"Randomize item order\"\n                />\n                <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                  Randomizing helps reduce bias in validation results\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n        );\n\n      case 2:\n        return (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Validation Settings\n            </Typography>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.auto_advance}\n                      onChange={(e) => handleFieldChange('auto_advance', e.target.checked)}\n                    />\n                  }\n                  label=\"Auto-advance to next item after feedback submission\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.include_ser_metrics}\n                      onChange={(e) => handleFieldChange('include_ser_metrics', e.target.checked)}\n                    />\n                  }\n                  label=\"Show SER metrics panel by default\"\n                />\n              </Grid>\n            </Grid>\n\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              These settings can be changed during the validation session.\n            </Alert>\n          </Box>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{ sx: { height: '80vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">Create Validation Session</Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        <Box sx={{ mb: 3 }}>\n          <Stepper activeStep={activeStep}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n        </Box>\n\n        {renderStepContent(activeStep)}\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        \n        {activeStep > 0 && (\n          <Button onClick={handleBack}>\n            Back\n          </Button>\n        )}\n        \n        {activeStep < steps.length - 1 ? (\n          <Button\n            onClick={handleNext}\n            variant=\"contained\"\n            disabled={!formData.speaker_id && activeStep === 0}\n          >\n            Next\n          </Button>\n        ) : (\n          <Button\n            onClick={handleSubmit}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Create Session\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SessionSetupDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/SessionSummaryDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImprovementIcon' is defined but never used.","line":37,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PersonIcon' is defined but never used.","line":38,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TimerIcon' is defined but never used.","line":39,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Session Summary Dialog Component\n * \n * Comprehensive summary dialog showing validation session results,\n * statistics, and recommendations.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  Divider,\n  IconButton,\n  LinearProgress,\n  Alert,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Download as ExportIcon,\n  Assessment as AssessmentIcon,\n  TrendingUp as ImprovementIcon,\n  Person as PersonIcon,\n  Timer as TimerIcon,\n} from '@mui/icons-material';\nimport { ValidationSession, ImprovementAssessment } from '@/domain/types/mt-validation';\n\ninterface SessionSummaryDialogProps {\n  session: ValidationSession;\n  open: boolean;\n  onClose: () => void;\n  onExport?: () => void;\n}\n\n// Mock summary data - in real app, this would come from API\nconst mockSummaryData = {\n  total_feedback_items: 20,\n  average_rating: 4.2,\n  improvement_distribution: {\n    [ImprovementAssessment.SIGNIFICANT]: 8,\n    [ImprovementAssessment.MODERATE]: 7,\n    [ImprovementAssessment.MINIMAL]: 3,\n    [ImprovementAssessment.NONE]: 2,\n    [ImprovementAssessment.WORSE]: 0,\n  },\n  bucket_change_recommendations: 1,\n  average_review_time_minutes: 2.5,\n  quality_insights: {\n    significant_improvements: 8,\n    areas_for_improvement: [\n      'Medical terminology accuracy',\n      'Numeric value corrections',\n      'Punctuation consistency'\n    ],\n    overall_assessment: 'Strong performance with consistent quality improvements. Recommend bucket transition.',\n  },\n  detailed_feedback: [\n    {\n      item_number: 1,\n      rating: 5,\n      improvement: ImprovementAssessment.SIGNIFICANT,\n      review_time: 180,\n      bucket_recommendation: false,\n    },\n    {\n      item_number: 2,\n      rating: 4,\n      improvement: ImprovementAssessment.MODERATE,\n      review_time: 150,\n      bucket_recommendation: false,\n    },\n    // ... more items\n  ],\n};\n\nexport const SessionSummaryDialog: React.FC<SessionSummaryDialogProps> = ({\n  session,\n  open,\n  onClose,\n  onExport,\n}) => {\n  const [summaryData] = useState(mockSummaryData);\n\n  const formatDuration = (minutes: number): string => {\n    if (minutes < 60) {\n      return `${Math.round(minutes)}m`;\n    }\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = Math.round(minutes % 60);\n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  const getImprovementColor = (assessment: ImprovementAssessment) => {\n    switch (assessment) {\n      case ImprovementAssessment.SIGNIFICANT: return 'success';\n      case ImprovementAssessment.MODERATE: return 'info';\n      case ImprovementAssessment.MINIMAL: return 'warning';\n      case ImprovementAssessment.NONE: return 'default';\n      case ImprovementAssessment.WORSE: return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getImprovementLabel = (assessment: ImprovementAssessment) => {\n    return assessment.replace('_', ' ').toLowerCase();\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"lg\"\n      fullWidth\n      PaperProps={{ sx: { height: '90vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <AssessmentIcon color=\"primary\" />\n            <Typography variant=\"h6\">Validation Session Summary</Typography>\n          </Box>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        {/* Session Overview */}\n        <Card variant=\"outlined\" sx={{ mb: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Session Overview\n            </Typography>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Session Name\n                  </Typography>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {session.session_name}\n                  </Typography>\n                </Box>\n                \n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Duration\n                  </Typography>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {formatDuration(session.duration_minutes || 0)}\n                  </Typography>\n                </Box>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Items Reviewed\n                  </Typography>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {summaryData.total_feedback_items}\n                  </Typography>\n                </Box>\n                \n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Completion Rate\n                  </Typography>\n                  <Typography variant=\"body1\" fontWeight=\"medium\">\n                    {session.progress_percentage.toFixed(1)}%\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n\n        {/* Key Metrics */}\n        <Grid container spacing={2} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"primary.main\">\n                  {summaryData.average_rating.toFixed(1)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Average Rating\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"success.main\">\n                  {summaryData.quality_insights.significant_improvements}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Significant Improvements\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"info.main\">\n                  {summaryData.bucket_change_recommendations}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Bucket Recommendations\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"warning.main\">\n                  {formatDuration(summaryData.average_review_time_minutes)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Avg Review Time\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        {/* Improvement Distribution */}\n        <Card variant=\"outlined\" sx={{ mb: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Improvement Assessment Distribution\n            </Typography>\n            \n            <Grid container spacing={2}>\n              {Object.entries(summaryData.improvement_distribution).map(([assessment, count]) => (\n                <Grid item xs={12} sm={6} md={4} key={assessment}>\n                  <Box sx={{ mb: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Chip\n                        label={getImprovementLabel(assessment as ImprovementAssessment)}\n                        color={getImprovementColor(assessment as ImprovementAssessment)}\n                        size=\"small\"\n                        sx={{ textTransform: 'capitalize' }}\n                      />\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {count} items\n                      </Typography>\n                    </Box>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={(count / summaryData.total_feedback_items) * 100}\n                      color={getImprovementColor(assessment as ImprovementAssessment)}\n                      sx={{ height: 8, borderRadius: 4 }}\n                    />\n                  </Box>\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n        </Card>\n\n        {/* Quality Insights */}\n        <Card variant=\"outlined\" sx={{ mb: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Quality Insights & Recommendations\n            </Typography>\n            \n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              {summaryData.quality_insights.overall_assessment}\n            </Alert>\n            \n            <Typography variant=\"subtitle2\" gutterBottom>\n              Areas for Improvement:\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {summaryData.quality_insights.areas_for_improvement.map((area, index) => (\n                <Chip\n                  key={index}\n                  label={area}\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"warning\"\n                />\n              ))}\n            </Box>\n            \n            {summaryData.bucket_change_recommendations > 0 && (\n              <Alert severity=\"success\">\n                <Typography variant=\"body2\">\n                  <strong>Recommendation:</strong> This speaker shows consistent quality improvements \n                  and is recommended for bucket transition to reduce touch requirements.\n                </Typography>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Detailed Feedback Table */}\n        <Card variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Detailed Feedback Summary\n            </Typography>\n            \n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Item</TableCell>\n                    <TableCell>Rating</TableCell>\n                    <TableCell>Improvement</TableCell>\n                    <TableCell>Review Time</TableCell>\n                    <TableCell>Bucket Rec.</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {summaryData.detailed_feedback.slice(0, 10).map((item) => (\n                    <TableRow key={item.item_number}>\n                      <TableCell>{item.item_number}</TableCell>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {item.rating}/5\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={(item.rating / 5) * 100}\n                            sx={{ width: 40, height: 4 }}\n                          />\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={getImprovementLabel(item.improvement)}\n                          color={getImprovementColor(item.improvement)}\n                          size=\"small\"\n                          sx={{ textTransform: 'capitalize' }}\n                        />\n                      </TableCell>\n                      <TableCell>{Math.round(item.review_time / 60)}m</TableCell>\n                      <TableCell>\n                        {item.bucket_recommendation ? (\n                          <Chip label=\"Yes\" color=\"success\" size=\"small\" />\n                        ) : (\n                          <Chip label=\"No\" color=\"default\" size=\"small\" />\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            \n            {summaryData.detailed_feedback.length > 10 && (\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                Showing first 10 items. Export for complete data.\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n      </DialogContent>\n\n      <DialogActions>\n        {onExport && (\n          <Button\n            startIcon={<ExportIcon />}\n            onClick={onExport}\n            variant=\"outlined\"\n          >\n            Export Report\n          </Button>\n        )}\n        \n        <Button onClick={onClose} variant=\"contained\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SessionSummaryDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/TextComparisonPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToggleButton' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToggleButtonGroup' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SideBySideIcon' is defined but never used.","line":28,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UnifiedIcon' is defined but never used.","line":29,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OverlayIcon' is defined but never used.","line":30,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":24},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":67,"column":20,"nodeType":"Identifier","endLine":67,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowReference' is assigned a value but never used.","line":149,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'label' is defined but never used.","line":186,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":46}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Text Comparison Panel Component\n * \n * Advanced text comparison with difference highlighting,\n * multiple view modes, and interactive features.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  IconButton,\n  Tooltip,\n  Chip,\n  ToggleButton,\n  ToggleButtonGroup,\n  Divider,\n  Alert,\n  Collapse,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  ViewColumn as SideBySideIcon,\n  ViewStream as UnifiedIcon,\n  Layers as OverlayIcon,\n  ZoomIn as ZoomInIcon,\n  ZoomOut as ZoomOutIcon,\n  ContentCopy as CopyIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n} from '@mui/icons-material';\nimport { TextDifference } from '@/domain/types/mt-validation';\n\ninterface TextComparisonPanelProps {\n  originalText: string;\n  correctedText: string;\n  referenceText: string;\n  differences: TextDifference[];\n  comparisonMode: 'side-by-side' | 'unified' | 'overlay';\n  showDifferences: boolean;\n  loading?: boolean;\n}\n\ninterface HighlightedTextProps {\n  text: string;\n  differences: TextDifference[];\n  type: 'original' | 'corrected' | 'reference';\n  showDifferences: boolean;\n}\n\nconst HighlightedText: React.FC<HighlightedTextProps> = ({\n  text,\n  differences,\n  type,\n  showDifferences,\n}) => {\n  if (!showDifferences || differences.length === 0) {\n    return <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-wrap', lineHeight: 1.8 }}>{text}</Typography>;\n  }\n\n  // Create highlighted segments\n  const segments = useMemo(() => {\n    const result: Array<{ text: string; type?: string; confidence?: number }> = [];\n    let lastIndex = 0;\n\n    differences.forEach((diff) => {\n      // Add text before this difference\n      if (diff.position.start > lastIndex) {\n        result.push({\n          text: text.slice(lastIndex, diff.position.start),\n        });\n      }\n\n      // Add the difference\n      const diffText = type === 'original' ? diff.originalText : diff.correctedText;\n      if (diffText) {\n        result.push({\n          text: diffText,\n          type: diff.type,\n          confidence: diff.confidence,\n        });\n      }\n\n      lastIndex = diff.position.end;\n    });\n\n    // Add remaining text\n    if (lastIndex < text.length) {\n      result.push({\n        text: text.slice(lastIndex),\n      });\n    }\n\n    return result;\n  }, [text, differences, type]);\n\n  const getHighlightColor = (diffType: string, confidence?: number) => {\n    const alpha = confidence ? Math.max(0.3, confidence) : 0.5;\n    \n    switch (diffType) {\n      case 'insert':\n        return `rgba(76, 175, 80, ${alpha})`; // Green\n      case 'delete':\n        return `rgba(244, 67, 54, ${alpha})`; // Red\n      case 'replace':\n        return `rgba(255, 152, 0, ${alpha})`; // Orange\n      case 'move':\n        return `rgba(156, 39, 176, ${alpha})`; // Purple\n      default:\n        return 'transparent';\n    }\n  };\n\n  return (\n    <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-wrap', lineHeight: 1.8 }}>\n      {segments.map((segment, index) => (\n        <span\n          key={index}\n          style={{\n            backgroundColor: segment.type ? getHighlightColor(segment.type, segment.confidence) : 'transparent',\n            padding: segment.type ? '2px 4px' : '0',\n            borderRadius: segment.type ? '3px' : '0',\n            border: segment.type ? '1px solid rgba(0, 0, 0, 0.1)' : 'none',\n          }}\n          title={segment.type ? `${segment.type} (confidence: ${(segment.confidence || 0).toFixed(2)})` : undefined}\n        >\n          {segment.text}\n        </span>\n      ))}\n    </Typography>\n  );\n};\n\nexport const TextComparisonPanel: React.FC<TextComparisonPanelProps> = ({\n  originalText,\n  correctedText,\n  referenceText,\n  differences,\n  comparisonMode,\n  showDifferences,\n  loading = false,\n}) => {\n  const [fontSize, setFontSize] = useState(14);\n  const [showReference, setShowReference] = useState(true);\n  const [expandedSections, setExpandedSections] = useState({\n    original: true,\n    corrected: true,\n    reference: true,\n  });\n\n  // Statistics\n  const diffStats = useMemo(() => {\n    const stats = {\n      insertions: 0,\n      deletions: 0,\n      substitutions: 0,\n      moves: 0,\n      total: differences.length,\n    };\n\n    differences.forEach((diff) => {\n      switch (diff.type) {\n        case 'insert':\n          stats.insertions++;\n          break;\n        case 'delete':\n          stats.deletions++;\n          break;\n        case 'replace':\n          stats.substitutions++;\n          break;\n        case 'move':\n          stats.moves++;\n          break;\n      }\n    });\n\n    return stats;\n  }, [differences]);\n\n  const handleCopyText = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    // Could show a snackbar notification here\n  };\n\n  const handleFontSizeChange = (delta: number) => {\n    setFontSize(prev => Math.max(10, Math.min(24, prev + delta)));\n  };\n\n  const toggleSection = (section: keyof typeof expandedSections) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center' }}>\n        <LinearProgress sx={{ mb: 2 }} />\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Calculating text differences...\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      {/* Controls */}\n      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Typography variant=\"h6\">Text Comparison</Typography>\n          \n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {/* Font Size Controls */}\n            <Tooltip title=\"Decrease font size\">\n              <IconButton size=\"small\" onClick={() => handleFontSizeChange(-1)}>\n                <ZoomOutIcon />\n              </IconButton>\n            </Tooltip>\n            <Typography variant=\"caption\" sx={{ minWidth: 30, textAlign: 'center' }}>\n              {fontSize}px\n            </Typography>\n            <Tooltip title=\"Increase font size\">\n              <IconButton size=\"small\" onClick={() => handleFontSizeChange(1)}>\n                <ZoomInIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n\n        {/* Difference Statistics */}\n        {showDifferences && differences.length > 0 && (\n          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\n            <Chip\n              label={`${diffStats.total} changes`}\n              size=\"small\"\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n            {diffStats.insertions > 0 && (\n              <Chip\n                label={`${diffStats.insertions} insertions`}\n                size=\"small\"\n                sx={{ backgroundColor: 'rgba(76, 175, 80, 0.1)', color: 'success.main' }}\n              />\n            )}\n            {diffStats.deletions > 0 && (\n              <Chip\n                label={`${diffStats.deletions} deletions`}\n                size=\"small\"\n                sx={{ backgroundColor: 'rgba(244, 67, 54, 0.1)', color: 'error.main' }}\n              />\n            )}\n            {diffStats.substitutions > 0 && (\n              <Chip\n                label={`${diffStats.substitutions} substitutions`}\n                size=\"small\"\n                sx={{ backgroundColor: 'rgba(255, 152, 0, 0.1)', color: 'warning.main' }}\n              />\n            )}\n            {diffStats.moves > 0 && (\n              <Chip\n                label={`${diffStats.moves} moves`}\n                size=\"small\"\n                sx={{ backgroundColor: 'rgba(156, 39, 176, 0.1)', color: 'secondary.main' }}\n              />\n            )}\n          </Box>\n        )}\n      </Box>\n\n      {/* Content */}\n      <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n        {comparisonMode === 'side-by-side' && (\n          <Grid container spacing={2} sx={{ height: '100%' }}>\n            {/* Original Text */}\n            <Grid item xs={6}>\n              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                <CardHeader\n                  title=\"Original ASR\"\n                  action={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Tooltip title=\"Copy text\">\n                        <IconButton size=\"small\" onClick={() => handleCopyText(originalText, 'Original')}>\n                          <CopyIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <IconButton size=\"small\" onClick={() => toggleSection('original')}>\n                        {expandedSections.original ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                      </IconButton>\n                    </Box>\n                  }\n                  sx={{ pb: 1 }}\n                />\n                <Collapse in={expandedSections.original}>\n                  <CardContent sx={{ flex: 1, overflow: 'auto', fontSize }}>\n                    <HighlightedText\n                      text={originalText}\n                      differences={differences}\n                      type=\"original\"\n                      showDifferences={showDifferences}\n                    />\n                  </CardContent>\n                </Collapse>\n              </Card>\n            </Grid>\n\n            {/* Corrected Text */}\n            <Grid item xs={6}>\n              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                <CardHeader\n                  title=\"RAG Corrected\"\n                  action={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Tooltip title=\"Copy text\">\n                        <IconButton size=\"small\" onClick={() => handleCopyText(correctedText, 'Corrected')}>\n                          <CopyIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <IconButton size=\"small\" onClick={() => toggleSection('corrected')}>\n                        {expandedSections.corrected ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                      </IconButton>\n                    </Box>\n                  }\n                  sx={{ pb: 1 }}\n                />\n                <Collapse in={expandedSections.corrected}>\n                  <CardContent sx={{ flex: 1, overflow: 'auto', fontSize }}>\n                    <HighlightedText\n                      text={correctedText}\n                      differences={differences}\n                      type=\"corrected\"\n                      showDifferences={showDifferences}\n                    />\n                  </CardContent>\n                </Collapse>\n              </Card>\n            </Grid>\n\n            {/* Reference Text */}\n            {showReference && (\n              <Grid item xs={12}>\n                <Card>\n                  <CardHeader\n                    title=\"Final Reference\"\n                    action={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Tooltip title=\"Copy text\">\n                          <IconButton size=\"small\" onClick={() => handleCopyText(referenceText, 'Reference')}>\n                            <CopyIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <IconButton size=\"small\" onClick={() => toggleSection('reference')}>\n                          {expandedSections.reference ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                        </IconButton>\n                      </Box>\n                    }\n                    sx={{ pb: 1 }}\n                  />\n                  <Collapse in={expandedSections.reference}>\n                    <CardContent sx={{ fontSize }}>\n                      <HighlightedText\n                        text={referenceText}\n                        differences={differences}\n                        type=\"reference\"\n                        showDifferences={showDifferences}\n                      />\n                    </CardContent>\n                  </Collapse>\n                </Card>\n              </Grid>\n            )}\n          </Grid>\n        )}\n\n        {comparisonMode === 'unified' && (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n            {/* Unified view with all texts in sequence */}\n            <Card>\n              <CardHeader title=\"Original ASR\" />\n              <CardContent sx={{ fontSize }}>\n                <HighlightedText\n                  text={originalText}\n                  differences={differences}\n                  type=\"original\"\n                  showDifferences={showDifferences}\n                />\n              </CardContent>\n            </Card>\n\n            <Divider>\n              <Chip label=\"RAG Correction\" size=\"small\" />\n            </Divider>\n\n            <Card>\n              <CardHeader title=\"RAG Corrected\" />\n              <CardContent sx={{ fontSize }}>\n                <HighlightedText\n                  text={correctedText}\n                  differences={differences}\n                  type=\"corrected\"\n                  showDifferences={showDifferences}\n                />\n              </CardContent>\n            </Card>\n\n            <Divider>\n              <Chip label=\"Final Reference\" size=\"small\" />\n            </Divider>\n\n            <Card>\n              <CardHeader title=\"Final Reference\" />\n              <CardContent sx={{ fontSize }}>\n                <HighlightedText\n                  text={referenceText}\n                  differences={differences}\n                  type=\"reference\"\n                  showDifferences={showDifferences}\n                />\n              </CardContent>\n            </Card>\n          </Box>\n        )}\n\n        {comparisonMode === 'overlay' && (\n          <Card sx={{ height: '100%' }}>\n            <CardHeader title=\"Overlay Comparison\" />\n            <CardContent sx={{ height: '100%', overflow: 'auto', fontSize }}>\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                Overlay mode shows corrections inline with the original text.\n              </Alert>\n              {/* This would implement an overlay view with inline corrections */}\n              <HighlightedText\n                text={correctedText}\n                differences={differences}\n                type=\"corrected\"\n                showDifferences={showDifferences}\n              />\n            </CardContent>\n          </Card>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default TextComparisonPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/components/ValidationProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/mt-validation-slice.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationItem' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SessionStatus' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImprovementAssessment' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redux slice for MT validation state management\n */\n\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { mtValidationApi } from '@/infrastructure/api/mt-validation-api';\nimport {\n  ValidationSession,\n  ValidationTestData,\n  ValidationItem,\n  MTFeedback,\n  StartValidationSessionRequest,\n  SubmitMTFeedbackRequest,\n  CompleteValidationSessionRequest,\n  ValidationWorkflowState,\n  MTValidationFilters,\n  ValidationSessionSummary,\n  MTUserStatistics,\n  SessionStatus,\n  ValidationItemStatus,\n  ImprovementAssessment,\n  DifferenceHighlightOptions,\n  ValidationPreferences,\n  TextDifference\n} from '@/domain/types/mt-validation';\n\n// Async thunks\nexport const startValidationSession = createAsyncThunk(\n  'mtValidation/startValidationSession',\n  async (request: StartValidationSessionRequest) => {\n    return await mtValidationApi.startValidationSession(request);\n  }\n);\n\nexport const getValidationSession = createAsyncThunk(\n  'mtValidation/getValidationSession',\n  async (sessionId: string) => {\n    return await mtValidationApi.getValidationSession(sessionId);\n  }\n);\n\nexport const getValidationTestData = createAsyncThunk(\n  'mtValidation/getValidationTestData',\n  async ({ sessionId, limit }: { sessionId: string; limit?: number }) => {\n    return await mtValidationApi.getValidationTestData(sessionId, limit);\n  }\n);\n\nexport const submitMTFeedback = createAsyncThunk(\n  'mtValidation/submitMTFeedback',\n  async ({ sessionId, feedback }: { sessionId: string; feedback: SubmitMTFeedbackRequest }) => {\n    return await mtValidationApi.submitMTFeedback(sessionId, feedback);\n  }\n);\n\nexport const completeValidationSession = createAsyncThunk(\n  'mtValidation/completeValidationSession',\n  async ({ sessionId, request }: { sessionId: string; request: CompleteValidationSessionRequest }) => {\n    return await mtValidationApi.completeValidationSession(sessionId, request);\n  }\n);\n\nexport const getValidationSessions = createAsyncThunk(\n  'mtValidation/getValidationSessions',\n  async (filters: MTValidationFilters) => {\n    return await mtValidationApi.getValidationSessions(filters);\n  }\n);\n\nexport const getSessionSummary = createAsyncThunk(\n  'mtValidation/getSessionSummary',\n  async (sessionId: string) => {\n    return await mtValidationApi.getValidationSessionSummary(sessionId);\n  }\n);\n\nexport const getMTUserStatistics = createAsyncThunk(\n  'mtValidation/getMTUserStatistics',\n  async (mtUserId: string) => {\n    return await mtValidationApi.getMTUserStatistics(mtUserId);\n  }\n);\n\nexport const calculateTextDifferences = createAsyncThunk(\n  'mtValidation/calculateTextDifferences',\n  async ({ originalText, correctedText }: { originalText: string; correctedText: string }) => {\n    return await mtValidationApi.calculateTextDifferences(originalText, correctedText);\n  }\n);\n\n// State interface\ninterface MTValidationState {\n  // Current session and workflow\n  currentSession: ValidationSession | null;\n  testDataItems: ValidationTestData[];\n  currentItemIndex: number;\n  currentItem: ValidationTestData | null;\n  sessionProgress: number;\n  \n  // Feedback and validation\n  currentFeedback: Partial<SubmitMTFeedbackRequest>;\n  submittedFeedback: MTFeedback[];\n  \n  // UI state\n  workflowState: ValidationWorkflowState;\n  comparisonMode: 'side-by-side' | 'unified' | 'overlay';\n  showDifferences: boolean;\n  showSERMetrics: boolean;\n  highlightOptions: DifferenceHighlightOptions;\n  \n  // Text differences\n  textDifferences: TextDifference[];\n  \n  // Sessions management\n  sessions: ValidationSession[];\n  sessionSummary: ValidationSessionSummary | null;\n  \n  // User preferences and statistics\n  userPreferences: ValidationPreferences;\n  userStatistics: MTUserStatistics | null;\n  \n  // Filters and search\n  sessionFilters: MTValidationFilters;\n  \n  // Loading states\n  loading: {\n    session: boolean;\n    testData: boolean;\n    feedback: boolean;\n    sessions: boolean;\n    summary: boolean;\n    differences: boolean;\n    statistics: boolean;\n  };\n  \n  // Error states\n  error: {\n    session: string | null;\n    testData: string | null;\n    feedback: string | null;\n    sessions: string | null;\n    summary: string | null;\n    differences: string | null;\n    statistics: string | null;\n    general: string | null;\n  };\n  \n  // Real-time updates\n  isConnected: boolean;\n  lastUpdate: string | null;\n}\n\n// Initial state\nconst initialState: MTValidationState = {\n  currentSession: null,\n  testDataItems: [],\n  currentItemIndex: 0,\n  currentItem: null,\n  sessionProgress: 0,\n  \n  currentFeedback: {},\n  submittedFeedback: [],\n  \n  workflowState: {\n    currentSession: null,\n    currentItem: null,\n    currentItemIndex: 0,\n    totalItems: 0,\n    sessionProgress: 0,\n    isReviewing: false,\n    showDifferences: true,\n    showSERMetrics: true,\n    comparisonMode: 'side-by-side',\n  },\n  \n  comparisonMode: 'side-by-side',\n  showDifferences: true,\n  showSERMetrics: true,\n  highlightOptions: {\n    showInsertions: true,\n    showDeletions: true,\n    showSubstitutions: true,\n    showMoves: true,\n    highlightIntensity: 'medium',\n    colorScheme: 'default',\n  },\n  \n  textDifferences: [],\n  \n  sessions: [],\n  sessionSummary: null,\n  \n  userPreferences: {\n    auto_advance: true,\n    show_ser_metrics_by_default: true,\n    highlight_differences_by_default: true,\n    default_comparison_mode: 'side-by-side',\n    keyboard_shortcuts_enabled: true,\n    auto_save_feedback: true,\n    review_time_tracking: true,\n  },\n  userStatistics: null,\n  \n  sessionFilters: {},\n  \n  loading: {\n    session: false,\n    testData: false,\n    feedback: false,\n    sessions: false,\n    summary: false,\n    differences: false,\n    statistics: false,\n  },\n  \n  error: {\n    session: null,\n    testData: null,\n    feedback: null,\n    sessions: null,\n    summary: null,\n    differences: null,\n    statistics: null,\n    general: null,\n  },\n  \n  isConnected: false,\n  lastUpdate: null,\n};\n\n// Slice\nconst mtValidationSlice = createSlice({\n  name: 'mtValidation',\n  initialState,\n  reducers: {\n    // Navigation\n    setCurrentItemIndex: (state, action: PayloadAction<number>) => {\n      const index = Math.max(0, Math.min(action.payload, state.testDataItems.length - 1));\n      state.currentItemIndex = index;\n      state.currentItem = state.testDataItems[index] || null;\n      state.workflowState.currentItemIndex = index;\n      state.workflowState.currentItem = state.currentItem ? {\n        item_id: `item_${index}`,\n        session_id: state.currentSession?.session_id || '',\n        test_data: state.currentItem,\n        status: ValidationItemStatus.IN_REVIEW,\n        differences: state.textDifferences,\n        created_at: new Date().toISOString(),\n      } : null;\n    },\n    \n    nextItem: (state) => {\n      if (state.currentItemIndex < state.testDataItems.length - 1) {\n        const newIndex = state.currentItemIndex + 1;\n        state.currentItemIndex = newIndex;\n        state.currentItem = state.testDataItems[newIndex];\n        state.workflowState.currentItemIndex = newIndex;\n        // Clear current feedback for new item\n        state.currentFeedback = {};\n      }\n    },\n    \n    previousItem: (state) => {\n      if (state.currentItemIndex > 0) {\n        const newIndex = state.currentItemIndex - 1;\n        state.currentItemIndex = newIndex;\n        state.currentItem = state.testDataItems[newIndex];\n        state.workflowState.currentItemIndex = newIndex;\n        // Clear current feedback for new item\n        state.currentFeedback = {};\n      }\n    },\n    \n    // Feedback management\n    updateCurrentFeedback: (state, action: PayloadAction<Partial<SubmitMTFeedbackRequest>>) => {\n      state.currentFeedback = { ...state.currentFeedback, ...action.payload };\n    },\n    \n    clearCurrentFeedback: (state) => {\n      state.currentFeedback = {};\n    },\n    \n    // UI state management\n    setComparisonMode: (state, action: PayloadAction<'side-by-side' | 'unified' | 'overlay'>) => {\n      state.comparisonMode = action.payload;\n      state.workflowState.comparisonMode = action.payload;\n    },\n    \n    toggleDifferences: (state) => {\n      state.showDifferences = !state.showDifferences;\n      state.workflowState.showDifferences = state.showDifferences;\n    },\n    \n    toggleSERMetrics: (state) => {\n      state.showSERMetrics = !state.showSERMetrics;\n      state.workflowState.showSERMetrics = state.showSERMetrics;\n    },\n    \n    setHighlightOptions: (state, action: PayloadAction<Partial<DifferenceHighlightOptions>>) => {\n      state.highlightOptions = { ...state.highlightOptions, ...action.payload };\n    },\n    \n    // Session management\n    setSessionFilters: (state, action: PayloadAction<MTValidationFilters>) => {\n      state.sessionFilters = action.payload;\n    },\n    \n    clearSessionFilters: (state) => {\n      state.sessionFilters = {};\n    },\n    \n    // Workflow state\n    setReviewingState: (state, action: PayloadAction<boolean>) => {\n      state.workflowState.isReviewing = action.payload;\n    },\n    \n    updateSessionProgress: (state) => {\n      if (state.testDataItems.length > 0) {\n        const completedItems = state.submittedFeedback.length;\n        const progress = (completedItems / state.testDataItems.length) * 100;\n        state.sessionProgress = progress;\n        state.workflowState.sessionProgress = progress;\n      }\n    },\n    \n    // User preferences\n    updateUserPreferences: (state, action: PayloadAction<Partial<ValidationPreferences>>) => {\n      state.userPreferences = { ...state.userPreferences, ...action.payload };\n    },\n    \n    // Real-time updates\n    setConnectionStatus: (state, action: PayloadAction<boolean>) => {\n      state.isConnected = action.payload;\n    },\n    \n    updateLastUpdate: (state) => {\n      state.lastUpdate = new Date().toISOString();\n    },\n    \n    // Error handling\n    clearErrors: (state) => {\n      state.error = {\n        session: null,\n        testData: null,\n        feedback: null,\n        sessions: null,\n        summary: null,\n        differences: null,\n        statistics: null,\n        general: null,\n      };\n    },\n    \n    clearError: (state, action: PayloadAction<keyof MTValidationState['error']>) => {\n      state.error[action.payload] = null;\n    },\n    \n    // Reset state\n    resetValidationState: (state) => {\n      state.currentSession = null;\n      state.testDataItems = [];\n      state.currentItemIndex = 0;\n      state.currentItem = null;\n      state.sessionProgress = 0;\n      state.currentFeedback = {};\n      state.submittedFeedback = [];\n      state.textDifferences = [];\n      state.workflowState = initialState.workflowState;\n    },\n  },\n  \n  extraReducers: (builder) => {\n    // Start validation session\n    builder\n      .addCase(startValidationSession.pending, (state) => {\n        state.loading.session = true;\n        state.error.session = null;\n      })\n      .addCase(startValidationSession.fulfilled, (state, action) => {\n        state.loading.session = false;\n        state.currentSession = action.payload;\n        state.workflowState.currentSession = action.payload;\n        state.workflowState.totalItems = action.payload.test_data_count;\n      })\n      .addCase(startValidationSession.rejected, (state, action) => {\n        state.loading.session = false;\n        state.error.session = action.error.message || 'Failed to start validation session';\n      });\n    \n    // Get validation test data\n    builder\n      .addCase(getValidationTestData.pending, (state) => {\n        state.loading.testData = true;\n        state.error.testData = null;\n      })\n      .addCase(getValidationTestData.fulfilled, (state, action) => {\n        state.loading.testData = false;\n        state.testDataItems = action.payload;\n        state.currentItem = action.payload[0] || null;\n        state.currentItemIndex = 0;\n        state.workflowState.totalItems = action.payload.length;\n        state.workflowState.currentItem = state.currentItem ? {\n          item_id: 'item_0',\n          session_id: state.currentSession?.session_id || '',\n          test_data: state.currentItem,\n          status: ValidationItemStatus.IN_REVIEW,\n          differences: [],\n          created_at: new Date().toISOString(),\n        } : null;\n      })\n      .addCase(getValidationTestData.rejected, (state, action) => {\n        state.loading.testData = false;\n        state.error.testData = action.error.message || 'Failed to load test data';\n      });\n    \n    // Submit MT feedback\n    builder\n      .addCase(submitMTFeedback.pending, (state) => {\n        state.loading.feedback = true;\n        state.error.feedback = null;\n      })\n      .addCase(submitMTFeedback.fulfilled, (state, action) => {\n        state.loading.feedback = false;\n        state.submittedFeedback.push(action.payload);\n        state.currentFeedback = {};\n        \n        // Update progress\n        const completedItems = state.submittedFeedback.length;\n        const progress = (completedItems / state.testDataItems.length) * 100;\n        state.sessionProgress = progress;\n        state.workflowState.sessionProgress = progress;\n        \n        // Auto-advance if enabled\n        if (state.userPreferences.auto_advance && state.currentItemIndex < state.testDataItems.length - 1) {\n          const newIndex = state.currentItemIndex + 1;\n          state.currentItemIndex = newIndex;\n          state.currentItem = state.testDataItems[newIndex];\n          state.workflowState.currentItemIndex = newIndex;\n        }\n      })\n      .addCase(submitMTFeedback.rejected, (state, action) => {\n        state.loading.feedback = false;\n        state.error.feedback = action.error.message || 'Failed to submit feedback';\n      });\n    \n    // Get validation sessions\n    builder\n      .addCase(getValidationSessions.pending, (state) => {\n        state.loading.sessions = true;\n        state.error.sessions = null;\n      })\n      .addCase(getValidationSessions.fulfilled, (state, action) => {\n        state.loading.sessions = false;\n        state.sessions = action.payload;\n      })\n      .addCase(getValidationSessions.rejected, (state, action) => {\n        state.loading.sessions = false;\n        state.error.sessions = action.error.message || 'Failed to load sessions';\n      });\n    \n    // Calculate text differences\n    builder\n      .addCase(calculateTextDifferences.pending, (state) => {\n        state.loading.differences = true;\n        state.error.differences = null;\n      })\n      .addCase(calculateTextDifferences.fulfilled, (state, action) => {\n        state.loading.differences = false;\n        state.textDifferences = action.payload;\n      })\n      .addCase(calculateTextDifferences.rejected, (state, action) => {\n        state.loading.differences = false;\n        state.error.differences = action.error.message || 'Failed to calculate differences';\n      });\n    \n    // Get session summary\n    builder\n      .addCase(getSessionSummary.fulfilled, (state, action) => {\n        state.sessionSummary = action.payload;\n      });\n    \n    // Get MT user statistics\n    builder\n      .addCase(getMTUserStatistics.fulfilled, (state, action) => {\n        state.userStatistics = action.payload;\n      });\n  },\n});\n\n// Export actions\nexport const {\n  setCurrentItemIndex,\n  nextItem,\n  previousItem,\n  updateCurrentFeedback,\n  clearCurrentFeedback,\n  setComparisonMode,\n  toggleDifferences,\n  toggleSERMetrics,\n  setHighlightOptions,\n  setSessionFilters,\n  clearSessionFilters,\n  setReviewingState,\n  updateSessionProgress,\n  updateUserPreferences,\n  setConnectionStatus,\n  updateLastUpdate,\n  clearErrors,\n  clearError,\n  resetValidationState,\n} = mtValidationSlice.actions;\n\n// Selectors\nexport const selectCurrentSession = (state: { mtValidation: MTValidationState }) => state.mtValidation.currentSession;\nexport const selectCurrentItem = (state: { mtValidation: MTValidationState }) => state.mtValidation.currentItem;\nexport const selectCurrentItemIndex = (state: { mtValidation: MTValidationState }) => state.mtValidation.currentItemIndex;\nexport const selectTestDataItems = (state: { mtValidation: MTValidationState }) => state.mtValidation.testDataItems;\nexport const selectCurrentFeedback = (state: { mtValidation: MTValidationState }) => state.mtValidation.currentFeedback;\nexport const selectSessionProgress = (state: { mtValidation: MTValidationState }) => state.mtValidation.sessionProgress;\nexport const selectComparisonMode = (state: { mtValidation: MTValidationState }) => state.mtValidation.comparisonMode;\nexport const selectShowDifferences = (state: { mtValidation: MTValidationState }) => state.mtValidation.showDifferences;\nexport const selectShowSERMetrics = (state: { mtValidation: MTValidationState }) => state.mtValidation.showSERMetrics;\nexport const selectTextDifferences = (state: { mtValidation: MTValidationState }) => state.mtValidation.textDifferences;\nexport const selectValidationLoading = (state: { mtValidation: MTValidationState }) => state.mtValidation.loading;\nexport const selectValidationError = (state: { mtValidation: MTValidationState }) => state.mtValidation.error;\nexport const selectUserPreferences = (state: { mtValidation: MTValidationState }) => state.mtValidation.userPreferences;\nexport const selectWorkflowState = (state: { mtValidation: MTValidationState }) => state.mtValidation.workflowState;\n\nexport default mtValidationSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/mt-validation/pages/MTValidationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PauseIcon' is defined but never used.","line":33,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StopIcon' is defined but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddIcon' is defined but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationSession' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationProgress' is defined but never used.","line":64,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessionProgress' is assigned a value but never used.","line":76,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'workflowState' is assigned a value but never used.","line":79,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3651,3654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3651,3654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4436,4439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4436,4439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MT Validation Page\n * \n * Main page for medical transcriptionist validation workflow\n * with session management, progress tracking, and comprehensive interface.\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Snackbar,\n  Fab,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  PlayArrow as StartIcon,\n  Pause as PauseIcon,\n  Stop as StopIcon,\n  Settings as SettingsIcon,\n  Assessment as AssessmentIcon,\n  History as HistoryIcon,\n  Download as ExportIcon,\n  Add as AddIcon,\n} from '@mui/icons-material';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  startValidationSession,\n  getValidationSession,\n  getValidationTestData,\n  completeValidationSession,\n  resetValidationState,\n  selectCurrentSession,\n  selectTestDataItems,\n  selectSessionProgress,\n  selectValidationLoading,\n  selectValidationError,\n  selectWorkflowState,\n} from '../mt-validation-slice';\nimport {\n  ValidationSession,\n  StartValidationSessionRequest,\n  SessionStatus,\n} from '@/domain/types/mt-validation';\n\n// Components\nimport MTValidationInterface from '../components/MTValidationInterface';\nimport ValidationProgress from '../components/ValidationProgress';\nimport SessionSetupDialog from '../components/SessionSetupDialog';\nimport SessionSummaryDialog from '../components/SessionSummaryDialog';\n\nexport const MTValidationPage: React.FC = () => {\n  const { sessionId } = useParams<{ sessionId?: string }>();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const currentSession = useAppSelector(selectCurrentSession);\n  const testDataItems = useAppSelector(selectTestDataItems);\n  const sessionProgress = useAppSelector(selectSessionProgress);\n  const loading = useAppSelector(selectValidationLoading);\n  const error = useAppSelector(selectValidationError);\n  const workflowState = useAppSelector(selectWorkflowState);\n  \n  // Local state\n  const [showSetupDialog, setShowSetupDialog] = useState(false);\n  const [showSummaryDialog, setShowSummaryDialog] = useState(false);\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [notification, setNotification] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'warning' | 'info';\n  }>({\n    open: false,\n    message: '',\n    severity: 'info',\n  });\n\n  // Initialize session\n  useEffect(() => {\n    if (sessionId) {\n      // Load existing session\n      dispatch(getValidationSession(sessionId));\n      dispatch(getValidationTestData({ sessionId }));\n    } else {\n      // Show setup dialog for new session\n      setShowSetupDialog(true);\n    }\n\n    // Cleanup on unmount\n    return () => {\n      dispatch(resetValidationState());\n    };\n  }, [dispatch, sessionId]);\n\n  // Handle session creation\n  const handleCreateSession = useCallback(async (sessionData: StartValidationSessionRequest) => {\n    try {\n      const session = await dispatch(startValidationSession(sessionData)).unwrap();\n      await dispatch(getValidationTestData({ sessionId: session.session_id }));\n      \n      setShowSetupDialog(false);\n      setNotification({\n        open: true,\n        message: `Validation session \"${session.session_name}\" started successfully`,\n        severity: 'success',\n      });\n      \n      // Navigate to the session URL\n      navigate(`/mt-validation/${session.session_id}`);\n    } catch (error: any) {\n      setNotification({\n        open: true,\n        message: error.message || 'Failed to create validation session',\n        severity: 'error',\n      });\n    }\n  }, [dispatch, navigate]);\n\n  // Handle session completion\n  const handleCompleteSession = useCallback(async () => {\n    if (!currentSession) return;\n\n    try {\n      await dispatch(completeValidationSession({\n        sessionId: currentSession.session_id,\n        request: {\n          session_id: currentSession.session_id,\n          completion_notes: 'Session completed successfully',\n        },\n      })).unwrap();\n\n      setShowSummaryDialog(true);\n      setNotification({\n        open: true,\n        message: 'Validation session completed successfully',\n        severity: 'success',\n      });\n    } catch (error: any) {\n      setNotification({\n        open: true,\n        message: error.message || 'Failed to complete session',\n        severity: 'error',\n      });\n    }\n  }, [dispatch, currentSession]);\n\n  // Handle session pause\n  const handlePauseSession = useCallback(() => {\n    setNotification({\n      open: true,\n      message: 'Session paused. You can resume later.',\n      severity: 'info',\n    });\n    navigate('/mt-validation');\n  }, [navigate]);\n\n  // Speed dial actions\n  const speedDialActions = [\n    {\n      icon: <SettingsIcon />,\n      name: 'Settings',\n      onClick: () => {\n        // Open settings dialog\n      },\n    },\n    {\n      icon: <AssessmentIcon />,\n      name: 'Session Analytics',\n      onClick: () => {\n        // Open analytics dialog\n      },\n    },\n    {\n      icon: <HistoryIcon />,\n      name: 'Session History',\n      onClick: () => {\n        navigate('/mt-validation/history');\n      },\n    },\n    {\n      icon: <ExportIcon />,\n      name: 'Export Data',\n      onClick: () => {\n        // Export session data\n      },\n    },\n  ];\n\n  // Handle notification close\n  const handleNotificationClose = () => {\n    setNotification({ ...notification, open: false });\n  };\n\n  // Render session setup\n  if (!sessionId && !currentSession) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ py: 3 }}>\n        <Box sx={{ textAlign: 'center', py: 8 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            MT Validation Workflow\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\n            Start a new validation session to review RAG-corrected ASR drafts\n          </Typography>\n          \n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            startIcon={<StartIcon />}\n            onClick={() => setShowSetupDialog(true)}\n          >\n            Start New Session\n          </Button>\n        </Box>\n\n        {/* Session Setup Dialog */}\n        <SessionSetupDialog\n          open={showSetupDialog}\n          onClose={() => setShowSetupDialog(false)}\n          onCreateSession={handleCreateSession}\n        />\n      </Container>\n    );\n  }\n\n  // Render loading state\n  if (loading.session || loading.testData) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        alignItems: 'center', \n        justifyContent: 'center', \n        height: '100vh',\n        gap: 2\n      }}>\n        <LinearProgress sx={{ width: 300 }} />\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {loading.session ? 'Loading session...' : 'Loading validation data...'}\n        </Typography>\n      </Box>\n    );\n  }\n\n  // Render error state\n  if (error.session || error.testData) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ py: 3 }}>\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error.session || error.testData}\n        </Alert>\n        <Button\n          variant=\"outlined\"\n          onClick={() => navigate('/mt-validation')}\n        >\n          Back to Sessions\n        </Button>\n      </Container>\n    );\n  }\n\n  // Render session completed state\n  if (currentSession?.status === SessionStatus.COMPLETED) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ py: 3 }}>\n        <Card>\n          <CardContent sx={{ textAlign: 'center', py: 6 }}>\n            <Typography variant=\"h4\" gutterBottom color=\"success.main\">\n              Session Completed!\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\n              Validation session \"{currentSession.session_name}\" has been completed successfully.\n            </Typography>\n            \n            <Grid container spacing={2} sx={{ mb: 4 }}>\n              <Grid item xs={12} sm={4}>\n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  {testDataItems.length}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Items Reviewed\n                </Typography>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  {currentSession.duration_minutes || 0}min\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Duration\n                </Typography>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  100%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Completion Rate\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setShowSummaryDialog(true)}\n              >\n                View Summary\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={() => navigate('/mt-validation')}\n              >\n                Back to Sessions\n              </Button>\n            </Box>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  }\n\n  // Render main validation interface\n  return (\n    <Box sx={{ height: '100vh', overflow: 'hidden' }}>\n      {/* Main Validation Interface */}\n      {currentSession && testDataItems.length > 0 && (\n        <MTValidationInterface\n          sessionId={currentSession.session_id}\n          onComplete={handleCompleteSession}\n          onPause={handlePauseSession}\n        />\n      )}\n\n      {/* Speed Dial */}\n      <SpeedDial\n        ariaLabel=\"Validation actions\"\n        sx={{ position: 'fixed', bottom: 16, left: 16 }}\n        icon={<SpeedDialIcon />}\n        onClose={() => setSpeedDialOpen(false)}\n        onOpen={() => setSpeedDialOpen(true)}\n        open={speedDialOpen}\n        direction=\"up\"\n      >\n        {speedDialActions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              action.onClick();\n              setSpeedDialOpen(false);\n            }}\n          />\n        ))}\n      </SpeedDial>\n\n      {/* Session Summary Dialog */}\n      {showSummaryDialog && currentSession && (\n        <SessionSummaryDialog\n          session={currentSession}\n          open={showSummaryDialog}\n          onClose={() => setShowSummaryDialog(false)}\n        />\n      )}\n\n      {/* Notification Snackbar */}\n      <Snackbar\n        open={notification.open}\n        autoHideDuration={6000}\n        onClose={handleNotificationClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      >\n        <Alert\n          onClose={handleNotificationClose}\n          severity={notification.severity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default MTValidationPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/BulkActionsToolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/CreateSpeakerDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3174,3177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3174,3177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3996,3999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3996,3999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Create/Edit Speaker Dialog Component\n * \n * Dialog for creating new speakers or editing existing ones\n * with form validation and error handling.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Alert,\n  Grid,\n  IconButton,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Save as SaveIcon,\n  Person as PersonIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch } from '@/app/hooks';\nimport { createSpeaker, updateSpeaker } from '../speaker-slice';\nimport { Speaker, SpeakerBucket, SpeakerFormData } from '@/domain/types/speaker';\n\ninterface CreateSpeakerDialogProps {\n  speaker?: Speaker | null; // null for create, speaker object for edit\n  open: boolean;\n  onClose: () => void;\n  onSpeakerCreated: (speaker: Speaker) => void;\n}\n\ninterface FormErrors {\n  speaker_identifier?: string;\n  speaker_name?: string;\n  initial_bucket?: string;\n}\n\nexport const CreateSpeakerDialog: React.FC<CreateSpeakerDialogProps> = ({\n  speaker,\n  open,\n  onClose,\n  onSpeakerCreated,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Form state\n  const [formData, setFormData] = useState<SpeakerFormData>({\n    speaker_identifier: '',\n    speaker_name: '',\n    initial_bucket: SpeakerBucket.HIGH_TOUCH,\n    metadata: {},\n  });\n  \n  const [errors, setErrors] = useState<FormErrors>({});\n  const [loading, setLoading] = useState(false);\n  const [submitError, setSubmitError] = useState<string | null>(null);\n\n  // Initialize form data when speaker changes\n  useEffect(() => {\n    if (speaker) {\n      // Edit mode\n      setFormData({\n        speaker_identifier: speaker.speaker_identifier,\n        speaker_name: speaker.speaker_name,\n        initial_bucket: speaker.current_bucket,\n        metadata: speaker.metadata || {},\n      });\n    } else {\n      // Create mode\n      setFormData({\n        speaker_identifier: '',\n        speaker_name: '',\n        initial_bucket: SpeakerBucket.HIGH_TOUCH,\n        metadata: {},\n      });\n    }\n    \n    // Clear errors when dialog opens/closes\n    setErrors({});\n    setSubmitError(null);\n  }, [speaker, open]);\n\n  // Form validation\n  const validateForm = (): boolean => {\n    const newErrors: FormErrors = {};\n\n    if (!formData.speaker_identifier.trim()) {\n      newErrors.speaker_identifier = 'Speaker identifier is required';\n    } else if (!/^[A-Z0-9_]+$/.test(formData.speaker_identifier)) {\n      newErrors.speaker_identifier = 'Speaker identifier must contain only uppercase letters, numbers, and underscores';\n    }\n\n    if (!formData.speaker_name.trim()) {\n      newErrors.speaker_name = 'Speaker name is required';\n    } else if (formData.speaker_name.trim().length < 2) {\n      newErrors.speaker_name = 'Speaker name must be at least 2 characters long';\n    }\n\n    if (!formData.initial_bucket) {\n      newErrors.initial_bucket = 'Initial bucket is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle form field changes\n  const handleFieldChange = (field: keyof SpeakerFormData, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n\n    // Clear field error when user starts typing\n    if (errors[field as keyof FormErrors]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: undefined,\n      }));\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    setSubmitError(null);\n\n    try {\n      let result;\n      \n      if (speaker) {\n        // Edit mode\n        result = await dispatch(updateSpeaker({\n          speakerId: speaker.speaker_id,\n          speakerData: formData,\n        })).unwrap();\n      } else {\n        // Create mode\n        result = await dispatch(createSpeaker(formData)).unwrap();\n      }\n\n      onSpeakerCreated(result);\n    } catch (error: any) {\n      setSubmitError(error.message || 'Failed to save speaker');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle dialog close\n  const handleClose = () => {\n    if (!loading) {\n      onClose();\n    }\n  };\n\n  const isEditMode = !!speaker;\n  const dialogTitle = isEditMode ? 'Edit Speaker' : 'Create New Speaker';\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        component: 'form',\n        onSubmit: (e: React.FormEvent) => {\n          e.preventDefault();\n          handleSubmit();\n        },\n      }}\n    >\n      {/* Dialog Header */}\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <PersonIcon color=\"primary\" />\n            <Typography variant=\"h6\">{dialogTitle}</Typography>\n          </Box>\n          \n          <IconButton onClick={handleClose} size=\"small\" disabled={loading}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      {/* Dialog Content */}\n      <DialogContent>\n        {submitError && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {submitError}\n          </Alert>\n        )}\n\n        <Grid container spacing={2}>\n          {/* Speaker Identifier */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Speaker Identifier\"\n              value={formData.speaker_identifier}\n              onChange={(e) => handleFieldChange('speaker_identifier', e.target.value.toUpperCase())}\n              error={!!errors.speaker_identifier}\n              helperText={errors.speaker_identifier || 'Unique identifier (e.g., SPEAKER_001)'}\n              required\n              disabled={loading || isEditMode} // Don't allow editing identifier\n              placeholder=\"SPEAKER_001\"\n            />\n          </Grid>\n\n          {/* Speaker Name */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Speaker Name\"\n              value={formData.speaker_name}\n              onChange={(e) => handleFieldChange('speaker_name', e.target.value)}\n              error={!!errors.speaker_name}\n              helperText={errors.speaker_name || 'Full name of the speaker'}\n              required\n              disabled={loading}\n              placeholder=\"Dr. John Smith\"\n            />\n          </Grid>\n\n          {/* Initial/Current Bucket */}\n          <Grid item xs={12}>\n            <FormControl fullWidth error={!!errors.initial_bucket} disabled={loading}>\n              <InputLabel required>\n                {isEditMode ? 'Current Bucket' : 'Initial Bucket'}\n              </InputLabel>\n              <Select\n                value={formData.initial_bucket}\n                onChange={(e) => handleFieldChange('initial_bucket', e.target.value)}\n                label={isEditMode ? 'Current Bucket' : 'Initial Bucket'}\n              >\n                {Object.values(SpeakerBucket).map((bucket) => (\n                  <MenuItem key={bucket} value={bucket}>\n                    {bucket.replace('_', ' ')}\n                  </MenuItem>\n                ))}\n              </Select>\n              {errors.initial_bucket && (\n                <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 1.5 }}>\n                  {errors.initial_bucket}\n                </Typography>\n              )}\n            </FormControl>\n          </Grid>\n\n          {/* Additional Information */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Department (Optional)\"\n              value={formData.metadata?.department || ''}\n              onChange={(e) => handleFieldChange('metadata', {\n                ...formData.metadata,\n                department: e.target.value,\n              })}\n              disabled={loading}\n              placeholder=\"Cardiology\"\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Location (Optional)\"\n              value={formData.metadata?.location || ''}\n              onChange={(e) => handleFieldChange('metadata', {\n                ...formData.metadata,\n                location: e.target.value,\n              })}\n              disabled={loading}\n              placeholder=\"Main Hospital\"\n            />\n          </Grid>\n\n          {/* Notes */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              label=\"Notes (Optional)\"\n              value={formData.metadata?.notes || ''}\n              onChange={(e) => handleFieldChange('metadata', {\n                ...formData.metadata,\n                notes: e.target.value,\n              })}\n              disabled={loading}\n              placeholder=\"Additional notes about this speaker...\"\n            />\n          </Grid>\n        </Grid>\n\n        {/* Information Box */}\n        <Box sx={{ mt: 2 }}>\n          <Alert severity=\"info\">\n            <Typography variant=\"body2\">\n              {isEditMode \n                ? 'Changes will be saved immediately. The speaker identifier cannot be modified.'\n                : 'New speakers will be created with the specified initial bucket. Quality metrics will be calculated as data becomes available.'\n              }\n            </Typography>\n          </Alert>\n        </Box>\n      </DialogContent>\n\n      {/* Dialog Actions */}\n      <DialogActions sx={{ px: 3, py: 2 }}>\n        <Button \n          onClick={handleClose} \n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        \n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          startIcon={<SaveIcon />}\n          disabled={loading}\n          sx={{ minWidth: 120 }}\n        >\n          {loading ? 'Saving...' : (isEditMode ? 'Update' : 'Create')}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CreateSpeakerDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/SpeakerDetailsDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TransitionIcon' is defined but never used.","line":35,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Details Dialog Component\n * \n * Comprehensive dialog for viewing detailed speaker information\n * including statistics, trends, and action buttons.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  Avatar,\n  Divider,\n  IconButton,\n  Tooltip,\n  LinearProgress,\n  Alert,\n  Tabs,\n  Tab,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Edit as EditIcon,\n  Assessment as AssessmentIcon,\n  SwapHoriz as TransitionIcon,\n  History as HistoryIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  TrendingFlat as TrendingFlatIcon,\n  DataUsage as DataIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  getComprehensiveSpeakerView,\n  selectComprehensiveView,\n  selectSpeakersLoading,\n} from '../speaker-slice';\nimport { Speaker, SpeakerBucket, QualityTrend } from '@/domain/types/speaker';\n\ninterface SpeakerDetailsDialogProps {\n  speaker: Speaker;\n  open: boolean;\n  onClose: () => void;\n  onEdit?: () => void;\n  onAssess?: () => void;\n  onTransitionRequest?: () => void;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`speaker-details-tabpanel-${index}`}\n      aria-labelledby={`speaker-details-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 2 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport const SpeakerDetailsDialog: React.FC<SpeakerDetailsDialogProps> = ({\n  speaker,\n  open,\n  onClose,\n  onEdit,\n  onAssess,\n  onTransitionRequest,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const comprehensiveView = useAppSelector(selectComprehensiveView);\n  const loading = useAppSelector(selectSpeakersLoading);\n  \n  // Local state\n  const [currentTab, setCurrentTab] = useState(0);\n\n  // Load comprehensive view when dialog opens\n  useEffect(() => {\n    if (open && speaker) {\n      dispatch(getComprehensiveSpeakerView({\n        speakerId: speaker.speaker_id,\n        options: {\n          include_ser_analysis: true,\n          include_error_patterns: true,\n          include_transition_history: true,\n        },\n      }));\n    }\n  }, [dispatch, open, speaker]);\n\n  // Get bucket color\n  const getBucketColor = (bucket: SpeakerBucket): 'error' | 'warning' | 'info' | 'success' => {\n    switch (bucket) {\n      case SpeakerBucket.HIGH_TOUCH: return 'error';\n      case SpeakerBucket.MEDIUM_TOUCH: return 'warning';\n      case SpeakerBucket.LOW_TOUCH: return 'info';\n      case SpeakerBucket.NO_TOUCH: return 'success';\n      default: return 'info';\n    }\n  };\n\n  // Get trend icon\n  const getTrendIcon = (trend: QualityTrend) => {\n    switch (trend) {\n      case QualityTrend.IMPROVING:\n        return <TrendingUpIcon color=\"success\" />;\n      case QualityTrend.DECLINING:\n        return <TrendingDownIcon color=\"error\" />;\n      case QualityTrend.STABLE:\n        return <TrendingFlatIcon color=\"info\" />;\n      default:\n        return <TrendingFlatIcon color=\"disabled\" />;\n    }\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"lg\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '90vh' }\n      }}\n    >\n      {/* Dialog Header */}\n      <DialogTitle sx={{ pb: 1 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <Avatar sx={{ width: 48, height: 48, fontSize: '1.25rem' }}>\n              {speaker.speaker_name.charAt(0).toUpperCase()}\n            </Avatar>\n            <Box>\n              <Typography variant=\"h6\" component=\"div\">\n                {speaker.speaker_name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {speaker.speaker_identifier}\n              </Typography>\n            </Box>\n          </Box>\n          \n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      {/* Dialog Content */}\n      <DialogContent sx={{ px: 0 }}>\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <>\n            {/* Quick Stats */}\n            <Box sx={{ px: 3, mb: 2 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Card variant=\"outlined\">\n                    <CardContent sx={{ textAlign: 'center', py: 2 }}>\n                      <Chip\n                        label={speaker.current_bucket.replace('_', ' ')}\n                        color={getBucketColor(speaker.current_bucket)}\n                        sx={{ mb: 1 }}\n                      />\n                      <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                        Current Bucket\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={3}>\n                  <Card variant=\"outlined\">\n                    <CardContent sx={{ textAlign: 'center', py: 2 }}>\n                      <Typography variant=\"h6\" fontWeight=\"bold\">\n                        {speaker.note_count.toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Total Notes\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={3}>\n                  <Card variant=\"outlined\">\n                    <CardContent sx={{ textAlign: 'center', py: 2 }}>\n                      <Typography variant=\"h6\" fontWeight=\"bold\">\n                        {speaker.average_ser_score.toFixed(1)}%\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Average SER\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n                <Grid item xs={12} sm={6} md={3}>\n                  <Card variant=\"outlined\">\n                    <CardContent sx={{ textAlign: 'center', py: 2 }}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>\n                        {getTrendIcon(speaker.quality_trend)}\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {speaker.quality_trend.replace('_', ' ').toUpperCase()}\n                        </Typography>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n\n            {/* Transition Recommendation */}\n            {speaker.should_transition && (\n              <Box sx={{ px: 3, mb: 2 }}>\n                <Alert \n                  severity=\"info\" \n                  action={\n                    onTransitionRequest && (\n                      <Button color=\"inherit\" size=\"small\" onClick={onTransitionRequest}>\n                        Create Request\n                      </Button>\n                    )\n                  }\n                >\n                  This speaker is recommended for bucket transition\n                  {speaker.recommended_bucket && ` to ${speaker.recommended_bucket.replace('_', ' ')}`}.\n                </Alert>\n              </Box>\n            )}\n\n            {/* Tabs */}\n            <Box sx={{ borderBottom: 1, borderColor: 'divider', px: 3 }}>\n              <Tabs value={currentTab} onChange={handleTabChange}>\n                <Tab label=\"Overview\" />\n                <Tab label=\"SER Analysis\" />\n                <Tab label=\"Error Patterns\" />\n                <Tab label=\"History\" />\n              </Tabs>\n            </Box>\n\n            {/* Tab Panels */}\n            <Box sx={{ px: 3 }}>\n              {/* Overview Tab */}\n              <TabPanel value={currentTab} index={0}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Speaker Information\n                    </Typography>\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Identifier\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {speaker.speaker_identifier}\n                      </Typography>\n                    </Box>\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Current Bucket\n                      </Typography>\n                      <Chip\n                        label={speaker.current_bucket.replace('_', ' ')}\n                        color={getBucketColor(speaker.current_bucket)}\n                        size=\"small\"\n                      />\n                    </Box>\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Data Sufficiency\n                      </Typography>\n                      <Chip\n                        label={speaker.has_sufficient_data ? 'Sufficient' : 'Limited'}\n                        color={speaker.has_sufficient_data ? 'success' : 'warning'}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  </Grid>\n\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Quality Metrics\n                    </Typography>\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Average SER Score\n                      </Typography>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1 }}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={Math.min(speaker.average_ser_score, 100)}\n                          sx={{ \n                            flexGrow: 1,\n                            height: 8,\n                            backgroundColor: 'grey.200',\n                            '& .MuiLinearProgress-bar': {\n                              backgroundColor: speaker.average_ser_score > 25 ? 'error.main' : \n                                              speaker.average_ser_score > 15 ? 'warning.main' : 'success.main'\n                            }\n                          }}\n                        />\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {speaker.average_ser_score.toFixed(1)}%\n                        </Typography>\n                      </Box>\n                    </Box>\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Quality Trend\n                      </Typography>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1 }}>\n                        {getTrendIcon(speaker.quality_trend)}\n                        <Typography variant=\"body1\">\n                          {speaker.quality_trend.replace('_', ' ').toUpperCase()}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </TabPanel>\n\n              {/* SER Analysis Tab */}\n              <TabPanel value={currentTab} index={1}>\n                {comprehensiveView?.ser_analysis ? (\n                  <Box>\n                    <Typography variant=\"h6\" gutterBottom>\n                      SER Analysis\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Detailed SER analysis would be displayed here.\n                    </Typography>\n                  </Box>\n                ) : (\n                  <Box sx={{ textAlign: 'center', py: 4 }}>\n                    <DataIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                      SER analysis data not available\n                    </Typography>\n                  </Box>\n                )}\n              </TabPanel>\n\n              {/* Error Patterns Tab */}\n              <TabPanel value={currentTab} index={2}>\n                {comprehensiveView?.error_patterns ? (\n                  <Box>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Error Patterns\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Error pattern analysis would be displayed here.\n                    </Typography>\n                  </Box>\n                ) : (\n                  <Box sx={{ textAlign: 'center', py: 4 }}>\n                    <DataIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                      Error pattern data not available\n                    </Typography>\n                  </Box>\n                )}\n              </TabPanel>\n\n              {/* History Tab */}\n              <TabPanel value={currentTab} index={3}>\n                {comprehensiveView?.transition_history ? (\n                  <Box>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Transition History\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Transition history would be displayed here.\n                    </Typography>\n                  </Box>\n                ) : (\n                  <Box sx={{ textAlign: 'center', py: 4 }}>\n                    <HistoryIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n                    <Typography variant=\"body1\" color=\"text.secondary\">\n                      No transition history available\n                    </Typography>\n                  </Box>\n                )}\n              </TabPanel>\n            </Box>\n          </>\n        )}\n      </DialogContent>\n\n      {/* Dialog Actions */}\n      <DialogActions sx={{ px: 3, py: 2 }}>\n        <Button onClick={onClose}>\n          Close\n        </Button>\n        \n        {onEdit && (\n          <Button\n            startIcon={<EditIcon />}\n            onClick={onEdit}\n            variant=\"outlined\"\n          >\n            Edit\n          </Button>\n        )}\n        \n        {onAssess && (\n          <Button\n            startIcon={<AssessmentIcon />}\n            onClick={onAssess}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Start Assessment\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SpeakerDetailsDialog;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/SpeakerSearchAndSelection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentPage' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":58,"column":25,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":58,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onSpeakerSelect' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'multiSelect' is assigned a value but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":102,"column":27,"nodeType":"Identifier","endLine":102,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3891,3894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3891,3894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4130,4133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4130,4133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8277,8280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8277,8280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Search and Selection Component\n * \n * Main component for searching, filtering, and selecting speakers\n * with comprehensive filtering options and real-time search.\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  InputAdornment,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Button,\n  IconButton,\n  Tooltip,\n  Typography,\n  Divider,\n  Collapse,\n  Grid,\n  Alert,\n} from '@mui/material';\nimport {\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Clear as ClearIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  Refresh as RefreshIcon,\n  ViewList as ViewListIcon,\n  ViewModule as ViewModuleIcon,\n  Analytics as AnalyticsIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  searchSpeakers,\n  setSearchFilters,\n  clearSearchFilters,\n  setCurrentPage,\n  setViewMode,\n  getQuickFilterOptions,\n  selectSpeakers,\n  selectSpeakersLoading,\n  selectSpeakersError,\n  selectSearchFilters,\n  selectPagination,\n  selectViewMode,\n  selectQuickFilters,\n} from '../speaker-slice';\nimport { SpeakerBucket, QualityTrend, SpeakerSearchFilters } from '@/domain/types/speaker';\n// Note: lodash debounce would need to be installed or implemented\n// For now, using a simple debounce implementation\nconst debounce = (func: Function, wait: number) => {\n  let timeout: NodeJS.Timeout;\n  return function executedFunction(...args: any[]) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\ninterface SpeakerSearchAndSelectionProps {\n  onSpeakerSelect?: (speakerId: string) => void;\n  multiSelect?: boolean;\n  showViewModeToggle?: boolean;\n  showQuickFilters?: boolean;\n  compact?: boolean;\n}\n\nexport const SpeakerSearchAndSelection: React.FC<SpeakerSearchAndSelectionProps> = ({\n  onSpeakerSelect,\n  multiSelect = false,\n  showViewModeToggle = true,\n  showQuickFilters = true,\n  compact = false,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const speakers = useAppSelector(selectSpeakers);\n  const loading = useAppSelector(selectSpeakersLoading);\n  const error = useAppSelector(selectSpeakersError);\n  const searchFilters = useAppSelector(selectSearchFilters);\n  const pagination = useAppSelector(selectPagination);\n  const viewMode = useAppSelector(selectViewMode);\n  const quickFilters = useAppSelector(selectQuickFilters);\n  \n  // Local state\n  const [searchText, setSearchText] = useState(searchFilters.name_pattern || '');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n  const [localFilters, setLocalFilters] = useState<SpeakerSearchFilters>(searchFilters);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    debounce((filters: SpeakerSearchFilters) => {\n      dispatch(setSearchFilters(filters));\n      dispatch(searchSpeakers({ ...filters, page: 1, page_size: pagination.pageSize }));\n    }, 300),\n    [dispatch, pagination.pageSize]\n  );\n\n  // Initialize data\n  useEffect(() => {\n    if (quickFilters.length === 0) {\n      dispatch(getQuickFilterOptions());\n    }\n    \n    // Initial search if no speakers loaded\n    if (speakers.length === 0 && !loading) {\n      dispatch(searchSpeakers({ page: 1, page_size: pagination.pageSize }));\n    }\n  }, [dispatch, quickFilters.length, speakers.length, loading, pagination.pageSize]);\n\n  // Handle search text change\n  const handleSearchTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setSearchText(value);\n    \n    const newFilters = { ...localFilters, name_pattern: value || undefined };\n    setLocalFilters(newFilters);\n    debouncedSearch(newFilters);\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (field: keyof SpeakerSearchFilters, value: any) => {\n    const newFilters = { ...localFilters, [field]: value || undefined };\n    setLocalFilters(newFilters);\n    debouncedSearch(newFilters);\n  };\n\n  // Handle quick filter selection\n  const handleQuickFilterSelect = (filterOption: any) => {\n    const newFilters = { ...filterOption.filters };\n    setLocalFilters(newFilters);\n    setSearchText(newFilters.name_pattern || '');\n    dispatch(setSearchFilters(newFilters));\n    dispatch(searchSpeakers({ ...newFilters, page: 1, page_size: pagination.pageSize }));\n  };\n\n  // Clear all filters\n  const handleClearFilters = () => {\n    setSearchText('');\n    setLocalFilters({});\n    dispatch(clearSearchFilters());\n    dispatch(searchSpeakers({ page: 1, page_size: pagination.pageSize }));\n  };\n\n  // Refresh data\n  const handleRefresh = () => {\n    dispatch(searchSpeakers({ ...searchFilters, page: pagination.currentPage, page_size: pagination.pageSize }));\n    dispatch(getQuickFilterOptions());\n  };\n\n  // Get active filter count\n  const getActiveFilterCount = () => {\n    return Object.values(localFilters).filter(value => \n      value !== undefined && value !== null && value !== ''\n    ).length;\n  };\n\n  return (\n    <Paper elevation={1} sx={{ p: compact ? 2 : 3 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        <Typography variant={compact ? 'h6' : 'h5'} component=\"h2\">\n          Speaker Search & Selection\n        </Typography>\n        \n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          {showViewModeToggle && (\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Tooltip title=\"Table View\">\n                <IconButton\n                  size=\"small\"\n                  onClick={() => dispatch(setViewMode('table'))}\n                  color={viewMode === 'table' ? 'primary' : 'default'}\n                >\n                  <ViewListIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Grid View\">\n                <IconButton\n                  size=\"small\"\n                  onClick={() => dispatch(setViewMode('grid'))}\n                  color={viewMode === 'grid' ? 'primary' : 'default'}\n                >\n                  <ViewModuleIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Analytics View\">\n                <IconButton\n                  size=\"small\"\n                  onClick={() => dispatch(setViewMode('analytics'))}\n                  color={viewMode === 'analytics' ? 'primary' : 'default'}\n                >\n                  <AnalyticsIcon />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          )}\n          \n          <Tooltip title=\"Refresh\">\n            <IconButton size=\"small\" onClick={handleRefresh} disabled={loading}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Quick Filters */}\n      {showQuickFilters && quickFilters.length > 0 && (\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n            Quick Filters\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {quickFilters.map((filter) => (\n              <Chip\n                key={filter.value}\n                label={`${filter.label} (${filter.count})`}\n                onClick={() => handleQuickFilterSelect(filter)}\n                variant=\"outlined\"\n                size=\"small\"\n                clickable\n              />\n            ))}\n          </Box>\n        </Box>\n      )}\n\n      {/* Search Bar */}\n      <Box sx={{ mb: 2 }}>\n        <TextField\n          fullWidth\n          placeholder=\"Search speakers by name or identifier...\"\n          value={searchText}\n          onChange={handleSearchTextChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n            endAdornment: searchText && (\n              <InputAdornment position=\"end\">\n                <IconButton size=\"small\" onClick={() => handleSearchTextChange({ target: { value: '' } } as any)}>\n                  <ClearIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          disabled={loading}\n        />\n      </Box>\n\n      {/* Filter Controls */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        <Button\n          startIcon={<FilterIcon />}\n          endIcon={showAdvancedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n          variant=\"outlined\"\n          size=\"small\"\n        >\n          Advanced Filters\n          {getActiveFilterCount() > 0 && (\n            <Chip\n              label={getActiveFilterCount()}\n              size=\"small\"\n              color=\"primary\"\n              sx={{ ml: 1, height: 20, fontSize: '0.75rem' }}\n            />\n          )}\n        </Button>\n\n        {getActiveFilterCount() > 0 && (\n          <Button\n            startIcon={<ClearIcon />}\n            onClick={handleClearFilters}\n            variant=\"text\"\n            size=\"small\"\n            color=\"secondary\"\n          >\n            Clear Filters\n          </Button>\n        )}\n      </Box>\n\n      {/* Advanced Filters */}\n      <Collapse in={showAdvancedFilters}>\n        <Paper variant=\"outlined\" sx={{ p: 2, mb: 2 }}>\n          <Grid container spacing={2}>\n            {/* Bucket Filter */}\n            <Grid item xs={12} sm={6} md={3}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Bucket</InputLabel>\n                <Select\n                  value={localFilters.bucket || ''}\n                  onChange={(e) => handleFilterChange('bucket', e.target.value)}\n                  label=\"Bucket\"\n                >\n                  <MenuItem value=\"\">All Buckets</MenuItem>\n                  {Object.values(SpeakerBucket).map((bucket) => (\n                    <MenuItem key={bucket} value={bucket}>\n                      {bucket.replace('_', ' ')}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            {/* Quality Trend Filter */}\n            <Grid item xs={12} sm={6} md={3}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Quality Trend</InputLabel>\n                <Select\n                  value={localFilters.quality_trend || ''}\n                  onChange={(e) => handleFilterChange('quality_trend', e.target.value)}\n                  label=\"Quality Trend\"\n                >\n                  <MenuItem value=\"\">All Trends</MenuItem>\n                  {Object.values(QualityTrend).map((trend) => (\n                    <MenuItem key={trend} value={trend}>\n                      {trend.replace('_', ' ').toUpperCase()}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            {/* SER Score Range */}\n            <Grid item xs={12} sm={6} md={3}>\n              <TextField\n                fullWidth\n                size=\"small\"\n                label=\"Min SER Score\"\n                type=\"number\"\n                value={localFilters.min_ser_score || ''}\n                onChange={(e) => handleFilterChange('min_ser_score', parseFloat(e.target.value) || undefined)}\n                inputProps={{ min: 0, max: 100, step: 0.1 }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <TextField\n                fullWidth\n                size=\"small\"\n                label=\"Max SER Score\"\n                type=\"number\"\n                value={localFilters.max_ser_score || ''}\n                onChange={(e) => handleFilterChange('max_ser_score', parseFloat(e.target.value) || undefined)}\n                inputProps={{ min: 0, max: 100, step: 0.1 }}\n              />\n            </Grid>\n\n            {/* Data Sufficiency Filter */}\n            <Grid item xs={12} sm={6} md={3}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Data Sufficiency</InputLabel>\n                <Select\n                  value={localFilters.has_sufficient_data !== undefined ? localFilters.has_sufficient_data.toString() : ''}\n                  onChange={(e) => handleFilterChange('has_sufficient_data', \n                    e.target.value === '' ? undefined : e.target.value === 'true'\n                  )}\n                  label=\"Data Sufficiency\"\n                >\n                  <MenuItem value=\"\">All</MenuItem>\n                  <MenuItem value=\"true\">Sufficient Data</MenuItem>\n                  <MenuItem value=\"false\">Insufficient Data</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Collapse>\n\n      {/* Results Summary */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {loading ? 'Searching...' : `${pagination.totalCount} speakers found`}\n          {getActiveFilterCount() > 0 && ` (${getActiveFilterCount()} filters applied)`}\n        </Typography>\n        \n        {pagination.totalCount > 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Page {pagination.currentPage} of {pagination.totalPages}\n          </Typography>\n        )}\n      </Box>\n\n      <Divider />\n    </Paper>\n  );\n};\n\nexport default SpeakerSearchAndSelection;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/SpeakerStatistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'speakers' is assigned a value but never used.","line":55,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2183,2186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2183,2186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Statistics Component\n * \n * Comprehensive visualization of speaker bucket statistics,\n * quality metrics, and trends with interactive charts.\n */\n\nimport React, { useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  LinearProgress,\n  Divider,\n  Alert,\n  CircularProgress,\n  Tooltip,\n  IconButton,\n} from '@mui/material';\nimport {\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  TrendingFlat as TrendingFlatIcon,\n  People as PeopleIcon,\n  Assessment as AssessmentIcon,\n  SwapHoriz as TransitionIcon,\n  DataUsage as DataIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  getBucketStatistics,\n  selectBucketStatistics,\n  selectSpeakers,\n} from '../speaker-slice';\nimport { SpeakerBucket, BucketVisualizationData } from '@/domain/types/speaker';\n\ninterface SpeakerStatisticsProps {\n  compact?: boolean;\n  showRefresh?: boolean;\n}\n\nexport const SpeakerStatistics: React.FC<SpeakerStatisticsProps> = ({\n  compact = false,\n  showRefresh = true,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const bucketStatistics = useAppSelector(selectBucketStatistics);\n  const speakers = useAppSelector(selectSpeakers);\n\n  // Load statistics on mount\n  useEffect(() => {\n    if (!bucketStatistics) {\n      dispatch(getBucketStatistics());\n    }\n  }, [dispatch, bucketStatistics]);\n\n  // Bucket visualization data\n  const bucketVisualizationData: BucketVisualizationData[] = useMemo(() => {\n    if (!bucketStatistics) return [];\n\n    const total = bucketStatistics.total_speakers;\n    const bucketColors = {\n      [SpeakerBucket.HIGH_TOUCH]: '#f44336',\n      [SpeakerBucket.MEDIUM_TOUCH]: '#ff9800',\n      [SpeakerBucket.LOW_TOUCH]: '#2196f3',\n      [SpeakerBucket.NO_TOUCH]: '#4caf50',\n    };\n\n    return Object.entries(bucketStatistics.bucket_distribution).map(([bucket, count]) => ({\n      bucket: bucket as SpeakerBucket,\n      count,\n      percentage: total > 0 ? (count / total) * 100 : 0,\n      averageQuality: bucketStatistics.quality_metrics.average_ser_score || 0,\n      trend: 'stable' as any, // Would come from actual trend data\n      color: bucketColors[bucket as SpeakerBucket],\n    }));\n  }, [bucketStatistics]);\n\n  // Handle refresh\n  const handleRefresh = () => {\n    dispatch(getBucketStatistics());\n  };\n\n  if (!bucketStatistics) {\n    return (\n      <Paper elevation={1} sx={{ p: 3, textAlign: 'center' }}>\n        <CircularProgress size={40} />\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n          Loading statistics...\n        </Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper elevation={1} sx={{ p: compact ? 2 : 3 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n        <Typography variant={compact ? 'h6' : 'h5'} component=\"h2\">\n          Speaker Statistics\n        </Typography>\n        \n        {showRefresh && (\n          <Tooltip title=\"Refresh Statistics\">\n            <IconButton size=\"small\" onClick={handleRefresh}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Box>\n\n      {/* Key Metrics Cards */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        {/* Total Speakers */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card variant=\"outlined\">\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\n              <PeopleIcon color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n              <Typography variant=\"h4\" component=\"div\" fontWeight=\"bold\">\n                {bucketStatistics.total_speakers.toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Speakers\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Average SER Score */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card variant=\"outlined\">\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\n              <AssessmentIcon color=\"info\" sx={{ fontSize: 40, mb: 1 }} />\n              <Typography variant=\"h4\" component=\"div\" fontWeight=\"bold\">\n                {bucketStatistics.quality_metrics.average_ser_score.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Average SER Score\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Pending Transitions */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card variant=\"outlined\">\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\n              <TransitionIcon color=\"warning\" sx={{ fontSize: 40, mb: 1 }} />\n              <Typography variant=\"h4\" component=\"div\" fontWeight=\"bold\">\n                {bucketStatistics.transition_metrics.pending_transitions}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Pending Transitions\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Data Coverage */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card variant=\"outlined\">\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\n              <DataIcon color=\"success\" sx={{ fontSize: 40, mb: 1 }} />\n              <Typography variant=\"h4\" component=\"div\" fontWeight=\"bold\">\n                {bucketStatistics.data_quality.data_coverage_percentage.toFixed(0)}%\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Data Coverage\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Bucket Distribution */}\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Bucket Distribution\n        </Typography>\n        \n        <Grid container spacing={2}>\n          {bucketVisualizationData.map((bucket) => (\n            <Grid item xs={12} sm={6} md={3} key={bucket.bucket}>\n              <Card variant=\"outlined\" sx={{ height: '100%' }}>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                      {bucket.bucket.replace('_', ' ')}\n                    </Typography>\n                    <Chip\n                      label={`${bucket.percentage.toFixed(1)}%`}\n                      size=\"small\"\n                      sx={{ backgroundColor: bucket.color, color: 'white' }}\n                    />\n                  </Box>\n                  \n                  <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ mb: 1 }}>\n                    {bucket.count.toLocaleString()}\n                  </Typography>\n                  \n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={bucket.percentage}\n                    sx={{\n                      height: 8,\n                      borderRadius: 4,\n                      backgroundColor: 'grey.200',\n                      '& .MuiLinearProgress-bar': {\n                        backgroundColor: bucket.color,\n                        borderRadius: 4,\n                      },\n                    }}\n                  />\n                  \n                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                    {bucket.count} of {bucketStatistics.total_speakers} speakers\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      <Divider sx={{ my: 3 }} />\n\n      {/* Quality Metrics */}\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Quality Metrics\n        </Typography>\n        \n        <Grid container spacing={2}>\n          {/* Quality Distribution */}\n          <Grid item xs={12} md={6}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\" gutterBottom>\n                  Quality Distribution\n                </Typography>\n                \n                {Object.entries(bucketStatistics.quality_metrics.quality_distribution).map(([level, count]) => (\n                  <Box key={level} sx={{ mb: 1 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n                      <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                        {level} Quality\n                      </Typography>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {count}\n                      </Typography>\n                    </Box>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={(count / bucketStatistics.total_speakers) * 100}\n                      sx={{ height: 6, borderRadius: 3 }}\n                    />\n                  </Box>\n                ))}\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Improvement Trends */}\n          <Grid item xs={12} md={6}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\" gutterBottom>\n                  Improvement Trends\n                </Typography>\n                \n                {Object.entries(bucketStatistics.quality_metrics.improvement_trends).map(([trend, count]) => (\n                  <Box key={trend} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      {trend === 'improving' && <TrendingUpIcon color=\"success\" fontSize=\"small\" />}\n                      {trend === 'declining' && <TrendingDownIcon color=\"error\" fontSize=\"small\" />}\n                      {trend === 'stable' && <TrendingFlatIcon color=\"info\" fontSize=\"small\" />}\n                      <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                        {trend}\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\n                      {count}\n                    </Typography>\n                  </Box>\n                ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Transition Metrics */}\n      <Box>\n        <Typography variant=\"h6\" gutterBottom>\n          Transition Metrics\n        </Typography>\n        \n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={4}>\n            <Card variant=\"outlined\">\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"warning.main\">\n                  {bucketStatistics.transition_metrics.pending_transitions}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Pending Requests\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <Card variant=\"outlined\">\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"info.main\">\n                  {bucketStatistics.transition_metrics.recent_transitions}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Recent Transitions\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} sm={4}>\n            <Card variant=\"outlined\">\n              <CardContent sx={{ textAlign: 'center' }}>\n                <Typography variant=\"h4\" fontWeight=\"bold\" color=\"success.main\">\n                  {bucketStatistics.transition_metrics.success_rate.toFixed(1)}%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Success Rate\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Data Quality Alert */}\n      {bucketStatistics.data_quality.data_coverage_percentage < 80 && (\n        <Alert severity=\"warning\" sx={{ mt: 3 }}>\n          <Typography variant=\"body2\">\n            Data coverage is below 80%. Consider processing more historical data to improve \n            speaker assessment accuracy.\n          </Typography>\n        </Alert>\n      )}\n    </Paper>\n  );\n};\n\nexport default SpeakerStatistics;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/components/SpeakerTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Menu' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVertIcon' is defined but never used.","line":37,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HistoryIcon' is defined but never used.","line":40,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onTransitionRequest' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onViewHistory' is defined but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Table Component\n * \n * Advanced data table for displaying speakers with sorting, selection,\n * and inline actions. Uses Material-UI DataGrid for performance.\n */\n\nimport React, { useMemo, useCallback } from 'react';\nimport {\n  Box,\n  Chip,\n  IconButton,\n  Tooltip,\n  Typography,\n  LinearProgress,\n  Avatar,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n} from '@mui/material';\nimport {\n  DataGrid,\n  GridColDef,\n  GridRowSelectionModel,\n  GridSortModel,\n  GridPaginationModel,\n  GridActionsCellItem,\n  GridRowParams,\n} from '@mui/x-data-grid';\nimport {\n  Visibility as ViewIcon,\n  Edit as EditIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  TrendingFlat as TrendingFlatIcon,\n  MoreVert as MoreVertIcon,\n  Assessment as AssessmentIcon,\n  SwapHoriz as TransitionIcon,\n  History as HistoryIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  searchSpeakers,\n  setCurrentPage,\n  setPageSize,\n  setSorting,\n  setSelectedSpeakerIds,\n  selectSpeakers,\n  selectSpeakersLoading,\n  selectSelectedSpeakerIds,\n  selectPagination,\n  selectSearchFilters,\n} from '../speaker-slice';\nimport { Speaker, SpeakerBucket, QualityTrend } from '@/domain/types/speaker';\n\ninterface SpeakerTableProps {\n  onSpeakerView?: (speaker: Speaker) => void;\n  onSpeakerEdit?: (speaker: Speaker) => void;\n  onSpeakerAssess?: (speaker: Speaker) => void;\n  onTransitionRequest?: (speaker: Speaker) => void;\n  onViewHistory?: (speaker: Speaker) => void;\n  selectable?: boolean;\n  compact?: boolean;\n}\n\nexport const SpeakerTable: React.FC<SpeakerTableProps> = ({\n  onSpeakerView,\n  onSpeakerEdit,\n  onSpeakerAssess,\n  onTransitionRequest,\n  onViewHistory,\n  selectable = true,\n  compact = false,\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const speakers = useAppSelector(selectSpeakers);\n  const loading = useAppSelector(selectSpeakersLoading);\n  const selectedSpeakerIds = useAppSelector(selectSelectedSpeakerIds);\n  const pagination = useAppSelector(selectPagination);\n  const searchFilters = useAppSelector(selectSearchFilters);\n\n  // Bucket color mapping\n  const getBucketColor = (bucket: SpeakerBucket): 'error' | 'warning' | 'info' | 'success' => {\n    switch (bucket) {\n      case SpeakerBucket.HIGH_TOUCH: return 'error';\n      case SpeakerBucket.MEDIUM_TOUCH: return 'warning';\n      case SpeakerBucket.LOW_TOUCH: return 'info';\n      case SpeakerBucket.NO_TOUCH: return 'success';\n      default: return 'info';\n    }\n  };\n\n  // Quality trend icon\n  const getTrendIcon = (trend: QualityTrend) => {\n    switch (trend) {\n      case QualityTrend.IMPROVING:\n        return <TrendingUpIcon color=\"success\" fontSize=\"small\" />;\n      case QualityTrend.DECLINING:\n        return <TrendingDownIcon color=\"error\" fontSize=\"small\" />;\n      case QualityTrend.STABLE:\n        return <TrendingFlatIcon color=\"info\" fontSize=\"small\" />;\n      default:\n        return <TrendingFlatIcon color=\"disabled\" fontSize=\"small\" />;\n    }\n  };\n\n  // Column definitions\n  const columns: GridColDef[] = useMemo(() => [\n    {\n      field: 'speaker_name',\n      headerName: 'Speaker',\n      width: 200,\n      renderCell: (params) => (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Avatar sx={{ width: 32, height: 32, fontSize: '0.875rem' }}>\n            {params.row.speaker_name.charAt(0).toUpperCase()}\n          </Avatar>\n          <Box>\n            <Typography variant=\"body2\" fontWeight=\"medium\">\n              {params.row.speaker_name}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {params.row.speaker_identifier}\n            </Typography>\n          </Box>\n        </Box>\n      ),\n    },\n    {\n      field: 'current_bucket',\n      headerName: 'Bucket',\n      width: 130,\n      renderCell: (params) => (\n        <Chip\n          label={params.value.replace('_', ' ')}\n          color={getBucketColor(params.value)}\n          size=\"small\"\n          variant=\"outlined\"\n        />\n      ),\n    },\n    {\n      field: 'note_count',\n      headerName: 'Notes',\n      width: 80,\n      type: 'number',\n      renderCell: (params) => (\n        <Typography variant=\"body2\">\n          {params.value.toLocaleString()}\n        </Typography>\n      ),\n    },\n    {\n      field: 'average_ser_score',\n      headerName: 'Avg SER',\n      width: 100,\n      type: 'number',\n      renderCell: (params) => (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Typography variant=\"body2\" fontWeight=\"medium\">\n            {params.value.toFixed(1)}%\n          </Typography>\n          <LinearProgress\n            variant=\"determinate\"\n            value={Math.min(params.value, 100)}\n            sx={{ \n              width: 40, \n              height: 4,\n              backgroundColor: 'grey.200',\n              '& .MuiLinearProgress-bar': {\n                backgroundColor: params.value > 25 ? 'error.main' : \n                                params.value > 15 ? 'warning.main' : 'success.main'\n              }\n            }}\n          />\n        </Box>\n      ),\n    },\n    {\n      field: 'quality_trend',\n      headerName: 'Trend',\n      width: 80,\n      renderCell: (params) => (\n        <Tooltip title={params.value.replace('_', ' ').toUpperCase()}>\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            {getTrendIcon(params.value)}\n          </Box>\n        </Tooltip>\n      ),\n    },\n    {\n      field: 'has_sufficient_data',\n      headerName: 'Data',\n      width: 80,\n      renderCell: (params) => (\n        <Chip\n          label={params.value ? 'Sufficient' : 'Limited'}\n          color={params.value ? 'success' : 'warning'}\n          size=\"small\"\n          variant=\"outlined\"\n        />\n      ),\n    },\n    {\n      field: 'should_transition',\n      headerName: 'Transition',\n      width: 100,\n      renderCell: (params) => (\n        params.value ? (\n          <Chip\n            label=\"Recommended\"\n            color=\"info\"\n            size=\"small\"\n            icon={<TransitionIcon />}\n          />\n        ) : null\n      ),\n    },\n    {\n      field: 'updated_at',\n      headerName: 'Last Updated',\n      width: 120,\n      renderCell: (params) => (\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {new Date(params.value).toLocaleDateString()}\n        </Typography>\n      ),\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Actions',\n      width: 120,\n      getActions: (params: GridRowParams) => {\n        const actions = [\n          <GridActionsCellItem\n            icon={<ViewIcon />}\n            label=\"View Details\"\n            onClick={() => onSpeakerView?.(params.row)}\n          />,\n        ];\n\n        if (onSpeakerEdit) {\n          actions.push(\n            <GridActionsCellItem\n              icon={<EditIcon />}\n              label=\"Edit\"\n              onClick={() => onSpeakerEdit(params.row)}\n            />\n          );\n        }\n\n        if (onSpeakerAssess) {\n          actions.push(\n            <GridActionsCellItem\n              icon={<AssessmentIcon />}\n              label=\"Assess\"\n              onClick={() => onSpeakerAssess(params.row)}\n            />\n          );\n        }\n\n        return actions;\n      },\n    },\n  ], [onSpeakerView, onSpeakerEdit, onSpeakerAssess]);\n\n  // Handle selection change\n  const handleSelectionChange = useCallback((newSelection: GridRowSelectionModel) => {\n    dispatch(setSelectedSpeakerIds(newSelection as string[]));\n  }, [dispatch]);\n\n  // Handle sort change\n  const handleSortChange = useCallback((sortModel: GridSortModel) => {\n    if (sortModel.length > 0) {\n      const { field, sort } = sortModel[0];\n      dispatch(setSorting({ sortBy: field, sortOrder: sort as 'asc' | 'desc' }));\n      \n      // Trigger new search with sorting\n      dispatch(searchSpeakers({\n        ...searchFilters,\n        page: pagination.currentPage,\n        page_size: pagination.pageSize,\n        sort_by: field,\n        sort_order: sort as 'asc' | 'desc',\n      }));\n    }\n  }, [dispatch, searchFilters, pagination]);\n\n  // Handle pagination change\n  const handlePaginationChange = useCallback((paginationModel: GridPaginationModel) => {\n    const { page, pageSize } = paginationModel;\n    \n    if (pageSize !== pagination.pageSize) {\n      dispatch(setPageSize(pageSize));\n    }\n    \n    if (page + 1 !== pagination.currentPage) {\n      dispatch(setCurrentPage(page + 1));\n    }\n    \n    // Trigger new search with pagination\n    dispatch(searchSpeakers({\n      ...searchFilters,\n      page: page + 1,\n      page_size: pageSize,\n    }));\n  }, [dispatch, searchFilters, pagination]);\n\n  // Handle row double click\n  const handleRowDoubleClick = useCallback((params: GridRowParams) => {\n    onSpeakerView?.(params.row);\n  }, [onSpeakerView]);\n\n  return (\n    <Box sx={{ height: compact ? 400 : 600, width: '100%' }}>\n      <DataGrid\n        rows={speakers}\n        columns={columns}\n        getRowId={(row) => row.speaker_id}\n        loading={loading}\n        \n        // Selection\n        checkboxSelection={selectable}\n        rowSelectionModel={selectedSpeakerIds}\n        onRowSelectionModelChange={handleSelectionChange}\n        \n        // Sorting\n        sortingMode=\"server\"\n        onSortModelChange={handleSortChange}\n        \n        // Pagination\n        paginationMode=\"server\"\n        paginationModel={{\n          page: pagination.currentPage - 1, // DataGrid uses 0-based indexing\n          pageSize: pagination.pageSize,\n        }}\n        onPaginationModelChange={handlePaginationChange}\n        rowCount={pagination.totalCount}\n        pageSizeOptions={[25, 50, 100]}\n        \n        // Row interaction\n        onRowDoubleClick={handleRowDoubleClick}\n        \n        // Styling\n        density={compact ? 'compact' : 'standard'}\n        disableRowSelectionOnClick\n        sx={{\n          '& .MuiDataGrid-row:hover': {\n            backgroundColor: 'action.hover',\n          },\n          '& .MuiDataGrid-cell:focus': {\n            outline: 'none',\n          },\n        }}\n        \n        // Loading overlay\n        slots={{\n          loadingOverlay: () => (\n            <Box sx={{ \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'center',\n              height: '100%',\n              flexDirection: 'column',\n              gap: 2\n            }}>\n              <LinearProgress sx={{ width: 200 }} />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Loading speakers...\n              </Typography>\n            </Box>\n          ),\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default SpeakerTable;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/pages/SpeakerManagementPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AssessmentIcon' is defined but never used.","line":29,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'viewMode' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker Management Page\n * \n * Main page for speaker bucket management with search, selection,\n * statistics, and comprehensive speaker management functionality.\n */\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tabs,\n  Tab,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Fab,\n  Badge,\n  Snackbar,\n  Alert,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Notifications as NotificationsIcon,\n  Assessment as AssessmentIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport {\n  setViewMode,\n  selectViewMode,\n  selectSelectedSpeakerIds,\n  selectPendingTransitions,\n  getPendingTransitionRequests,\n} from '../speaker-slice';\nimport { Speaker } from '@/domain/types/speaker';\n\n// Components\nimport SpeakerSearchAndSelection from '../components/SpeakerSearchAndSelection';\nimport SpeakerTable from '../components/SpeakerTable';\nimport SpeakerStatistics from '../components/SpeakerStatistics';\nimport SpeakerDetailsDialog from '../components/SpeakerDetailsDialog';\nimport CreateSpeakerDialog from '../components/CreateSpeakerDialog';\nimport BulkActionsToolbar from '../components/BulkActionsToolbar';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`speaker-tabpanel-${index}`}\n      aria-labelledby={`speaker-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport const SpeakerManagementPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  \n  // Redux state\n  const viewMode = useAppSelector(selectViewMode);\n  const selectedSpeakerIds = useAppSelector(selectSelectedSpeakerIds);\n  const pendingTransitions = useAppSelector(selectPendingTransitions);\n  \n  // Local state\n  const [currentTab, setCurrentTab] = useState(0);\n  const [selectedSpeaker, setSelectedSpeaker] = useState<Speaker | null>(null);\n  const [showSpeakerDetails, setShowSpeakerDetails] = useState(false);\n  const [showCreateSpeaker, setShowCreateSpeaker] = useState(false);\n  const [notification, setNotification] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'warning' | 'info';\n  }>({\n    open: false,\n    message: '',\n    severity: 'info',\n  });\n\n  // Load pending transitions on mount\n  React.useEffect(() => {\n    dispatch(getPendingTransitionRequests());\n  }, [dispatch]);\n\n  // Tab change handler\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setCurrentTab(newValue);\n    \n    // Update view mode based on tab\n    if (newValue === 0) {\n      dispatch(setViewMode('table'));\n    } else if (newValue === 1) {\n      dispatch(setViewMode('analytics'));\n    }\n  };\n\n  // Speaker action handlers\n  const handleSpeakerView = useCallback((speaker: Speaker) => {\n    setSelectedSpeaker(speaker);\n    setShowSpeakerDetails(true);\n  }, []);\n\n  const handleSpeakerEdit = useCallback((speaker: Speaker) => {\n    setSelectedSpeaker(speaker);\n    setShowCreateSpeaker(true); // Reuse create dialog for editing\n  }, []);\n\n  const handleSpeakerAssess = useCallback((speaker: Speaker) => {\n    // Navigate to assessment workflow\n    setNotification({\n      open: true,\n      message: `Starting assessment workflow for ${speaker.speaker_name}`,\n      severity: 'info',\n    });\n  }, []);\n\n  const handleTransitionRequest = useCallback((speaker: Speaker) => {\n    // Open transition request dialog\n    setNotification({\n      open: true,\n      message: `Creating transition request for ${speaker.speaker_name}`,\n      severity: 'info',\n    });\n  }, []);\n\n  const handleViewHistory = useCallback((speaker: Speaker) => {\n    // Navigate to speaker history view\n    setNotification({\n      open: true,\n      message: `Viewing history for ${speaker.speaker_name}`,\n      severity: 'info',\n    });\n  }, []);\n\n  // Dialog handlers\n  const handleCloseDetails = () => {\n    setShowSpeakerDetails(false);\n    setSelectedSpeaker(null);\n  };\n\n  const handleCloseCreate = () => {\n    setShowCreateSpeaker(false);\n    setSelectedSpeaker(null);\n  };\n\n  const handleSpeakerCreated = (speaker: Speaker) => {\n    setNotification({\n      open: true,\n      message: `Speaker ${speaker.speaker_name} created successfully`,\n      severity: 'success',\n    });\n    handleCloseCreate();\n  };\n\n  const handleNotificationClose = () => {\n    setNotification({ ...notification, open: false });\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n      {/* Page Header */}\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Speaker Bucket Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage speaker categorization, quality assessment, and bucket transitions\n        </Typography>\n      </Box>\n\n      {/* Main Content */}\n      <Box sx={{ width: '100%' }}>\n        {/* Tabs */}\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n          <Tabs value={currentTab} onChange={handleTabChange} aria-label=\"speaker management tabs\">\n            <Tab \n              label=\"Speaker Directory\" \n              id=\"speaker-tab-0\"\n              aria-controls=\"speaker-tabpanel-0\"\n            />\n            <Tab \n              label=\"Analytics & Statistics\" \n              id=\"speaker-tab-1\"\n              aria-controls=\"speaker-tabpanel-1\"\n            />\n            <Tab \n              label={\n                <Badge badgeContent={pendingTransitions.length} color=\"warning\">\n                  Transitions\n                </Badge>\n              }\n              id=\"speaker-tab-2\"\n              aria-controls=\"speaker-tabpanel-2\"\n            />\n          </Tabs>\n        </Box>\n\n        {/* Tab Panels */}\n        \n        {/* Speaker Directory Tab */}\n        <TabPanel value={currentTab} index={0}>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n            {/* Search and Selection */}\n            <SpeakerSearchAndSelection\n              onSpeakerSelect={handleSpeakerView}\n              multiSelect={true}\n              showViewModeToggle={true}\n              showQuickFilters={true}\n            />\n\n            {/* Bulk Actions Toolbar */}\n            {selectedSpeakerIds.length > 0 && (\n              <BulkActionsToolbar\n                selectedCount={selectedSpeakerIds.length}\n                onBulkAssess={() => {\n                  setNotification({\n                    open: true,\n                    message: `Starting bulk assessment for ${selectedSpeakerIds.length} speakers`,\n                    severity: 'info',\n                  });\n                }}\n                onBulkTransition={() => {\n                  setNotification({\n                    open: true,\n                    message: `Creating bulk transition requests for ${selectedSpeakerIds.length} speakers`,\n                    severity: 'info',\n                  });\n                }}\n                onBulkExport={() => {\n                  setNotification({\n                    open: true,\n                    message: `Exporting ${selectedSpeakerIds.length} speakers`,\n                    severity: 'info',\n                  });\n                }}\n              />\n            )}\n\n            {/* Speaker Table */}\n            <Paper elevation={1}>\n              <SpeakerTable\n                onSpeakerView={handleSpeakerView}\n                onSpeakerEdit={handleSpeakerEdit}\n                onSpeakerAssess={handleSpeakerAssess}\n                onTransitionRequest={handleTransitionRequest}\n                onViewHistory={handleViewHistory}\n                selectable={true}\n              />\n            </Paper>\n          </Box>\n        </TabPanel>\n\n        {/* Analytics Tab */}\n        <TabPanel value={currentTab} index={1}>\n          <SpeakerStatistics showRefresh={true} />\n        </TabPanel>\n\n        {/* Transitions Tab */}\n        <TabPanel value={currentTab} index={2}>\n          <Paper elevation={1} sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Pending Bucket Transitions\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Review and manage pending speaker bucket transition requests.\n            </Typography>\n            \n            {/* Transition requests would be displayed here */}\n            <Box sx={{ mt: 3, textAlign: 'center', py: 4 }}>\n              <NotificationsIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                {pendingTransitions.length === 0 \n                  ? 'No pending transition requests'\n                  : `${pendingTransitions.length} pending transition requests`\n                }\n              </Typography>\n            </Box>\n          </Paper>\n        </TabPanel>\n      </Box>\n\n      {/* Floating Action Button */}\n      <Fab\n        color=\"primary\"\n        aria-label=\"add speaker\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n        onClick={() => setShowCreateSpeaker(true)}\n      >\n        <AddIcon />\n      </Fab>\n\n      {/* Dialogs */}\n      \n      {/* Speaker Details Dialog */}\n      {showSpeakerDetails && selectedSpeaker && (\n        <SpeakerDetailsDialog\n          speaker={selectedSpeaker}\n          open={showSpeakerDetails}\n          onClose={handleCloseDetails}\n          onEdit={() => {\n            handleCloseDetails();\n            handleSpeakerEdit(selectedSpeaker);\n          }}\n          onAssess={() => {\n            handleCloseDetails();\n            handleSpeakerAssess(selectedSpeaker);\n          }}\n        />\n      )}\n\n      {/* Create/Edit Speaker Dialog */}\n      {showCreateSpeaker && (\n        <CreateSpeakerDialog\n          speaker={selectedSpeaker} // null for create, speaker object for edit\n          open={showCreateSpeaker}\n          onClose={handleCloseCreate}\n          onSpeakerCreated={handleSpeakerCreated}\n        />\n      )}\n\n      {/* Notification Snackbar */}\n      <Snackbar\n        open={notification.open}\n        autoHideDuration={6000}\n        onClose={handleNotificationClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n      >\n        <Alert\n          onClose={handleNotificationClose}\n          severity={notification.severity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default SpeakerManagementPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/speaker-management/speaker-slice.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SpeakerListResponse' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SpeakerBucket' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[928,931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[928,931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1148,1151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1148,1151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2166,2169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2166,2169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2432,2435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2432,2435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redux slice for speaker management state\n */\n\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { speakerApi } from '@/infrastructure/api/speaker-api';\nimport {\n  Speaker,\n  SpeakerListResponse,\n  SpeakerSearchParams,\n  SpeakerSearchFilters,\n  SpeakerBucketStats,\n  BucketTransitionRequest,\n  CreateTransitionRequest,\n  ComprehensiveSpeakerView,\n  SpeakerBucket,\n  QuickFilterOption\n} from '@/domain/types/speaker';\n\n// Async thunks\nexport const searchSpeakers = createAsyncThunk(\n  'speakers/searchSpeakers',\n  async (params: SpeakerSearchParams) => {\n    return await speakerApi.searchSpeakers(params);\n  }\n);\n\nexport const getSpeakerById = createAsyncThunk(\n  'speakers/getSpeakerById',\n  async (speakerId: string) => {\n    return await speakerApi.getSpeakerById(speakerId);\n  }\n);\n\nexport const createSpeaker = createAsyncThunk(\n  'speakers/createSpeaker',\n  async (speakerData: any) => {\n    return await speakerApi.createSpeaker(speakerData);\n  }\n);\n\nexport const updateSpeaker = createAsyncThunk(\n  'speakers/updateSpeaker',\n  async ({ speakerId, speakerData }: { speakerId: string; speakerData: any }) => {\n    return await speakerApi.updateSpeaker(speakerId, speakerData);\n  }\n);\n\nexport const getBucketStatistics = createAsyncThunk(\n  'speakers/getBucketStatistics',\n  async () => {\n    return await speakerApi.getBucketStatistics();\n  }\n);\n\nexport const getSpeakersNeedingTransition = createAsyncThunk(\n  'speakers/getSpeakersNeedingTransition',\n  async () => {\n    return await speakerApi.getSpeakersNeedingTransition();\n  }\n);\n\nexport const createTransitionRequest = createAsyncThunk(\n  'speakers/createTransitionRequest',\n  async (requestData: CreateTransitionRequest) => {\n    return await speakerApi.createTransitionRequest(requestData);\n  }\n);\n\nexport const getPendingTransitionRequests = createAsyncThunk(\n  'speakers/getPendingTransitionRequests',\n  async () => {\n    return await speakerApi.getPendingTransitionRequests();\n  }\n);\n\nexport const approveTransitionRequest = createAsyncThunk(\n  'speakers/approveTransitionRequest',\n  async ({ requestId, approvalData }: { requestId: string; approvalData: any }) => {\n    return await speakerApi.approveTransitionRequest(requestId, approvalData);\n  }\n);\n\nexport const getComprehensiveSpeakerView = createAsyncThunk(\n  'speakers/getComprehensiveSpeakerView',\n  async ({ speakerId, options }: { speakerId: string; options?: any }) => {\n    return await speakerApi.getComprehensiveSpeakerView(speakerId, options);\n  }\n);\n\nexport const getQuickFilterOptions = createAsyncThunk(\n  'speakers/getQuickFilterOptions',\n  async () => {\n    return await speakerApi.getQuickFilterOptions();\n  }\n);\n\n// State interface\ninterface SpeakerState {\n  // Speaker list and search\n  speakers: Speaker[];\n  totalCount: number;\n  currentPage: number;\n  pageSize: number;\n  totalPages: number;\n  searchFilters: SpeakerSearchFilters;\n  quickFilters: QuickFilterOption[];\n  \n  // Selected speaker details\n  selectedSpeaker: Speaker | null;\n  comprehensiveView: ComprehensiveSpeakerView | null;\n  \n  // Statistics and analytics\n  bucketStatistics: SpeakerBucketStats | null;\n  speakersNeedingTransition: Speaker[];\n  \n  // Transition requests\n  transitionRequests: BucketTransitionRequest[];\n  pendingTransitions: BucketTransitionRequest[];\n  \n  // UI state\n  selectedSpeakerIds: string[];\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n  viewMode: 'table' | 'grid' | 'analytics';\n  \n  // Loading states\n  loading: {\n    speakers: boolean;\n    speakerDetails: boolean;\n    statistics: boolean;\n    transitions: boolean;\n    creating: boolean;\n    updating: boolean;\n  };\n  \n  // Error states\n  error: {\n    speakers: string | null;\n    speakerDetails: string | null;\n    statistics: string | null;\n    transitions: string | null;\n    general: string | null;\n  };\n}\n\n// Initial state\nconst initialState: SpeakerState = {\n  speakers: [],\n  totalCount: 0,\n  currentPage: 1,\n  pageSize: 50,\n  totalPages: 0,\n  searchFilters: {},\n  quickFilters: [],\n  \n  selectedSpeaker: null,\n  comprehensiveView: null,\n  \n  bucketStatistics: null,\n  speakersNeedingTransition: [],\n  \n  transitionRequests: [],\n  pendingTransitions: [],\n  \n  selectedSpeakerIds: [],\n  sortBy: 'speaker_name',\n  sortOrder: 'asc',\n  viewMode: 'table',\n  \n  loading: {\n    speakers: false,\n    speakerDetails: false,\n    statistics: false,\n    transitions: false,\n    creating: false,\n    updating: false,\n  },\n  \n  error: {\n    speakers: null,\n    speakerDetails: null,\n    statistics: null,\n    transitions: null,\n    general: null,\n  },\n};\n\n// Slice\nconst speakerSlice = createSlice({\n  name: 'speakers',\n  initialState,\n  reducers: {\n    // Search and filtering\n    setSearchFilters: (state, action: PayloadAction<SpeakerSearchFilters>) => {\n      state.searchFilters = action.payload;\n      state.currentPage = 1; // Reset to first page when filters change\n    },\n    \n    clearSearchFilters: (state) => {\n      state.searchFilters = {};\n      state.currentPage = 1;\n    },\n    \n    setCurrentPage: (state, action: PayloadAction<number>) => {\n      state.currentPage = action.payload;\n    },\n    \n    setPageSize: (state, action: PayloadAction<number>) => {\n      state.pageSize = action.payload;\n      state.currentPage = 1; // Reset to first page when page size changes\n    },\n    \n    // Sorting\n    setSorting: (state, action: PayloadAction<{ sortBy: string; sortOrder: 'asc' | 'desc' }>) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortOrder = action.payload.sortOrder;\n    },\n    \n    // Selection\n    setSelectedSpeakerIds: (state, action: PayloadAction<string[]>) => {\n      state.selectedSpeakerIds = action.payload;\n    },\n    \n    toggleSpeakerSelection: (state, action: PayloadAction<string>) => {\n      const speakerId = action.payload;\n      const index = state.selectedSpeakerIds.indexOf(speakerId);\n      \n      if (index > -1) {\n        state.selectedSpeakerIds.splice(index, 1);\n      } else {\n        state.selectedSpeakerIds.push(speakerId);\n      }\n    },\n    \n    selectAllSpeakers: (state) => {\n      state.selectedSpeakerIds = state.speakers.map(speaker => speaker.speaker_id);\n    },\n    \n    clearSelection: (state) => {\n      state.selectedSpeakerIds = [];\n    },\n    \n    // View mode\n    setViewMode: (state, action: PayloadAction<'table' | 'grid' | 'analytics'>) => {\n      state.viewMode = action.payload;\n    },\n    \n    // Selected speaker\n    setSelectedSpeaker: (state, action: PayloadAction<Speaker | null>) => {\n      state.selectedSpeaker = action.payload;\n    },\n    \n    // Clear errors\n    clearErrors: (state) => {\n      state.error = {\n        speakers: null,\n        speakerDetails: null,\n        statistics: null,\n        transitions: null,\n        general: null,\n      };\n    },\n    \n    clearError: (state, action: PayloadAction<keyof SpeakerState['error']>) => {\n      state.error[action.payload] = null;\n    },\n  },\n  \n  extraReducers: (builder) => {\n    // Search speakers\n    builder\n      .addCase(searchSpeakers.pending, (state) => {\n        state.loading.speakers = true;\n        state.error.speakers = null;\n      })\n      .addCase(searchSpeakers.fulfilled, (state, action) => {\n        state.loading.speakers = false;\n        state.speakers = action.payload.speakers;\n        state.totalCount = action.payload.total_count;\n        state.currentPage = action.payload.page;\n        state.pageSize = action.payload.page_size;\n        state.totalPages = action.payload.total_pages;\n      })\n      .addCase(searchSpeakers.rejected, (state, action) => {\n        state.loading.speakers = false;\n        state.error.speakers = action.error.message || 'Failed to search speakers';\n      });\n    \n    // Get speaker by ID\n    builder\n      .addCase(getSpeakerById.pending, (state) => {\n        state.loading.speakerDetails = true;\n        state.error.speakerDetails = null;\n      })\n      .addCase(getSpeakerById.fulfilled, (state, action) => {\n        state.loading.speakerDetails = false;\n        state.selectedSpeaker = action.payload;\n      })\n      .addCase(getSpeakerById.rejected, (state, action) => {\n        state.loading.speakerDetails = false;\n        state.error.speakerDetails = action.error.message || 'Failed to get speaker details';\n      });\n    \n    // Create speaker\n    builder\n      .addCase(createSpeaker.pending, (state) => {\n        state.loading.creating = true;\n        state.error.general = null;\n      })\n      .addCase(createSpeaker.fulfilled, (state, action) => {\n        state.loading.creating = false;\n        state.speakers.unshift(action.payload);\n        state.totalCount += 1;\n      })\n      .addCase(createSpeaker.rejected, (state, action) => {\n        state.loading.creating = false;\n        state.error.general = action.error.message || 'Failed to create speaker';\n      });\n    \n    // Update speaker\n    builder\n      .addCase(updateSpeaker.pending, (state) => {\n        state.loading.updating = true;\n        state.error.general = null;\n      })\n      .addCase(updateSpeaker.fulfilled, (state, action) => {\n        state.loading.updating = false;\n        const index = state.speakers.findIndex(s => s.speaker_id === action.payload.speaker_id);\n        if (index > -1) {\n          state.speakers[index] = action.payload;\n        }\n        if (state.selectedSpeaker?.speaker_id === action.payload.speaker_id) {\n          state.selectedSpeaker = action.payload;\n        }\n      })\n      .addCase(updateSpeaker.rejected, (state, action) => {\n        state.loading.updating = false;\n        state.error.general = action.error.message || 'Failed to update speaker';\n      });\n    \n    // Get bucket statistics\n    builder\n      .addCase(getBucketStatistics.pending, (state) => {\n        state.loading.statistics = true;\n        state.error.statistics = null;\n      })\n      .addCase(getBucketStatistics.fulfilled, (state, action) => {\n        state.loading.statistics = false;\n        state.bucketStatistics = action.payload;\n      })\n      .addCase(getBucketStatistics.rejected, (state, action) => {\n        state.loading.statistics = false;\n        state.error.statistics = action.error.message || 'Failed to get bucket statistics';\n      });\n    \n    // Get speakers needing transition\n    builder\n      .addCase(getSpeakersNeedingTransition.fulfilled, (state, action) => {\n        state.speakersNeedingTransition = action.payload;\n      });\n    \n    // Get pending transition requests\n    builder\n      .addCase(getPendingTransitionRequests.pending, (state) => {\n        state.loading.transitions = true;\n        state.error.transitions = null;\n      })\n      .addCase(getPendingTransitionRequests.fulfilled, (state, action) => {\n        state.loading.transitions = false;\n        state.pendingTransitions = action.payload;\n      })\n      .addCase(getPendingTransitionRequests.rejected, (state, action) => {\n        state.loading.transitions = false;\n        state.error.transitions = action.error.message || 'Failed to get pending transitions';\n      });\n    \n    // Get comprehensive speaker view\n    builder\n      .addCase(getComprehensiveSpeakerView.pending, (state) => {\n        state.loading.speakerDetails = true;\n        state.error.speakerDetails = null;\n      })\n      .addCase(getComprehensiveSpeakerView.fulfilled, (state, action) => {\n        state.loading.speakerDetails = false;\n        state.comprehensiveView = action.payload;\n        state.selectedSpeaker = action.payload.speaker;\n      })\n      .addCase(getComprehensiveSpeakerView.rejected, (state, action) => {\n        state.loading.speakerDetails = false;\n        state.error.speakerDetails = action.error.message || 'Failed to get comprehensive view';\n      });\n    \n    // Get quick filter options\n    builder\n      .addCase(getQuickFilterOptions.fulfilled, (state, action) => {\n        state.quickFilters = action.payload;\n      });\n  },\n});\n\n// Export actions\nexport const {\n  setSearchFilters,\n  clearSearchFilters,\n  setCurrentPage,\n  setPageSize,\n  setSorting,\n  setSelectedSpeakerIds,\n  toggleSpeakerSelection,\n  selectAllSpeakers,\n  clearSelection,\n  setViewMode,\n  setSelectedSpeaker,\n  clearErrors,\n  clearError,\n} = speakerSlice.actions;\n\n// Selectors\nexport const selectSpeakers = (state: { speakers: SpeakerState }) => state.speakers.speakers;\nexport const selectSpeakersLoading = (state: { speakers: SpeakerState }) => state.speakers.loading.speakers;\nexport const selectSpeakersError = (state: { speakers: SpeakerState }) => state.speakers.error.speakers;\nexport const selectSelectedSpeaker = (state: { speakers: SpeakerState }) => state.speakers.selectedSpeaker;\nexport const selectComprehensiveView = (state: { speakers: SpeakerState }) => state.speakers.comprehensiveView;\nexport const selectBucketStatistics = (state: { speakers: SpeakerState }) => state.speakers.bucketStatistics;\nexport const selectSearchFilters = (state: { speakers: SpeakerState }) => state.speakers.searchFilters;\nexport const selectSelectedSpeakerIds = (state: { speakers: SpeakerState }) => state.speakers.selectedSpeakerIds;\nexport const selectPagination = (state: { speakers: SpeakerState }) => ({\n  currentPage: state.speakers.currentPage,\n  pageSize: state.speakers.pageSize,\n  totalCount: state.speakers.totalCount,\n  totalPages: state.speakers.totalPages,\n});\nexport const selectViewMode = (state: { speakers: SpeakerState }) => state.speakers.viewMode;\nexport const selectQuickFilters = (state: { speakers: SpeakerState }) => state.speakers.quickFilters;\nexport const selectPendingTransitions = (state: { speakers: SpeakerState }) => state.speakers.pendingTransitions;\n\nexport default speakerSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/components/DiagnosticsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4472,4475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4472,4475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5255,5258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5255,5258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6053,6056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6053,6056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6929,6932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6929,6932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8109,8112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8109,8112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10867,10870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10867,10870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11545,11548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11545,11548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":338,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12282,12285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12282,12285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Diagnostics Panel Component\n * Displays detailed diagnostic information for a specific service\n */\n\nimport React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  CheckCircle as SuccessIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n  NetworkCheck as NetworkIcon,\n  Speed as PerformanceIcon,\n  Storage as DependencyIcon,\n  Info as InfoIcon,\n  Dns as DnsIcon,\n  Router as PortIcon,\n  Security as SslIcon,\n} from '@mui/icons-material';\nimport { SERVICE_CONFIGS } from '@infrastructure/api/health-api';\nimport type { DiagnosticsPanelProps, HealthStatus } from '../types/health-types';\n\nconst DiagnosticsPanel: React.FC<DiagnosticsPanelProps> = ({\n  service,\n  diagnostics,\n  onClose,\n}) => {\n  const config = SERVICE_CONFIGS[service];\n\n  const getStatusIcon = (status: boolean | HealthStatus) => {\n    if (typeof status === 'boolean') {\n      return status ? <SuccessIcon color=\"success\" /> : <ErrorIcon color=\"error\" />;\n    }\n    \n    switch (status) {\n      case 'healthy':\n        return <SuccessIcon color=\"success\" />;\n      case 'degraded':\n        return <WarningIcon color=\"warning\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <WarningIcon color=\"disabled\" />;\n    }\n  };\n\n  const getStatusColor = (status: boolean | HealthStatus) => {\n    if (typeof status === 'boolean') {\n      return status ? 'success' : 'error';\n    }\n    \n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'degraded':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusText = (status: boolean | HealthStatus) => {\n    if (typeof status === 'boolean') {\n      return status ? 'OK' : 'Failed';\n    }\n    \n    switch (status) {\n      case 'healthy':\n        return 'Healthy';\n      case 'degraded':\n        return 'Degraded';\n      case 'error':\n        return 'Error';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getPerformanceRating = (responseTime: number) => {\n    if (!config) return 'Unknown';\n    \n    if (responseTime <= config.expectedResponseTime) return 'Excellent';\n    if (responseTime <= config.criticalResponseTime) return 'Good';\n    return 'Poor';\n  };\n\n  const getPerformanceColor = (responseTime: number) => {\n    if (!config) return 'default';\n    \n    if (responseTime <= config.expectedResponseTime) return 'success';\n    if (responseTime <= config.criticalResponseTime) return 'warning';\n    return 'error';\n  };\n\n  return (\n    <Dialog\n      open={true}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: '60vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">\n            Diagnostics: {config?.displayName || service}\n          </Typography>\n          \n          <Tooltip title=\"Close\">\n            <IconButton onClick={onClose} size=\"small\">\n              <CloseIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        <Grid container spacing={3}>\n          {/* Connectivity Tests */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                  <NetworkIcon color=\"primary\" />\n                  <Typography variant=\"h6\">Connectivity</Typography>\n                </Box>\n\n                <List dense>\n                  <ListItem>\n                    <ListItemIcon>\n                      {getStatusIcon(diagnostics.connectivity.can_reach)}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary=\"Service Reachable\"\n                      secondary={diagnostics.connectivity.can_reach ? \n                        'Service is responding to requests' : \n                        'Cannot connect to service'}\n                    />\n                    <Chip\n                      label={getStatusText(diagnostics.connectivity.can_reach)}\n                      color={getStatusColor(diagnostics.connectivity.can_reach) as any}\n                      size=\"small\"\n                    />\n                  </ListItem>\n\n                  <ListItem>\n                    <ListItemIcon>\n                      <DnsIcon color={diagnostics.connectivity.dns_resolution ? 'success' : 'error'} />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary=\"DNS Resolution\"\n                      secondary={diagnostics.connectivity.dns_resolution ? \n                        'Hostname resolves correctly' : \n                        'DNS resolution failed'}\n                    />\n                    <Chip\n                      label={getStatusText(diagnostics.connectivity.dns_resolution)}\n                      color={getStatusColor(diagnostics.connectivity.dns_resolution) as any}\n                      size=\"small\"\n                    />\n                  </ListItem>\n\n                  <ListItem>\n                    <ListItemIcon>\n                      <PortIcon color={diagnostics.connectivity.port_open ? 'success' : 'error'} />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary=\"Port Accessible\"\n                      secondary={diagnostics.connectivity.port_open ? \n                        `Port ${config?.port} is open and accessible` : \n                        `Port ${config?.port} is not accessible`}\n                    />\n                    <Chip\n                      label={getStatusText(diagnostics.connectivity.port_open)}\n                      color={getStatusColor(diagnostics.connectivity.port_open) as any}\n                      size=\"small\"\n                    />\n                  </ListItem>\n\n                  {diagnostics.connectivity.ssl_valid !== undefined && (\n                    <ListItem>\n                      <ListItemIcon>\n                        <SslIcon color={diagnostics.connectivity.ssl_valid ? 'success' : 'error'} />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"SSL Certificate\"\n                        secondary={diagnostics.connectivity.ssl_valid ? \n                          'SSL certificate is valid' : \n                          'SSL certificate is invalid or expired'}\n                      />\n                      <Chip\n                        label={getStatusText(diagnostics.connectivity.ssl_valid)}\n                        color={getStatusColor(diagnostics.connectivity.ssl_valid) as any}\n                        size=\"small\"\n                      />\n                    </ListItem>\n                  )}\n                </List>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Performance Metrics */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                  <PerformanceIcon color=\"primary\" />\n                  <Typography variant=\"h6\">Performance</Typography>\n                </Box>\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Response Time\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"h5\">\n                      {diagnostics.performance.response_time}ms\n                    </Typography>\n                    <Chip\n                      label={getPerformanceRating(diagnostics.performance.response_time)}\n                      color={getPerformanceColor(diagnostics.performance.response_time) as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  \n                  {config && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Expected: ≤{config.expectedResponseTime}ms, Critical: ≤{config.criticalResponseTime}ms\n                    </Typography>\n                  )}\n                </Box>\n\n                <Divider sx={{ my: 2 }} />\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Error Rate\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"h5\">\n                      {diagnostics.performance.error_rate.toFixed(1)}%\n                    </Typography>\n                    <Chip\n                      label={diagnostics.performance.error_rate === 0 ? 'Excellent' : \n                             diagnostics.performance.error_rate < 5 ? 'Good' : 'High'}\n                      color={diagnostics.performance.error_rate === 0 ? 'success' : \n                             diagnostics.performance.error_rate < 5 ? 'warning' : 'error'}\n                      size=\"small\"\n                    />\n                  </Box>\n                </Box>\n\n                {diagnostics.performance.throughput && (\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                      Throughput\n                    </Typography>\n                    <Typography variant=\"h6\">\n                      {diagnostics.performance.throughput} req/sec\n                    </Typography>\n                  </Box>\n                )}\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Dependencies */}\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                  <DependencyIcon color=\"primary\" />\n                  <Typography variant=\"h6\">Dependencies</Typography>\n                </Box>\n\n                <Grid container spacing={2}>\n                  {diagnostics.dependencies.database && (\n                    <Grid item xs={12} sm={6} md={4}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        {getStatusIcon(diagnostics.dependencies.database)}\n                        <Typography variant=\"body1\">Database</Typography>\n                        <Chip\n                          label={getStatusText(diagnostics.dependencies.database)}\n                          color={getStatusColor(diagnostics.dependencies.database) as any}\n                          size=\"small\"\n                        />\n                      </Box>\n                    </Grid>\n                  )}\n\n                  {diagnostics.dependencies.cache && (\n                    <Grid item xs={12} sm={6} md={4}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        {getStatusIcon(diagnostics.dependencies.cache)}\n                        <Typography variant=\"body1\">Cache</Typography>\n                        <Chip\n                          label={getStatusText(diagnostics.dependencies.cache)}\n                          color={getStatusColor(diagnostics.dependencies.cache) as any}\n                          size=\"small\"\n                        />\n                      </Box>\n                    </Grid>\n                  )}\n\n                  {diagnostics.dependencies.external_apis && \n                    Object.entries(diagnostics.dependencies.external_apis).map(([api, status]) => (\n                      <Grid item xs={12} sm={6} md={4} key={api}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {getStatusIcon(status)}\n                          <Typography variant=\"body1\">{api}</Typography>\n                          <Chip\n                            label={getStatusText(status)}\n                            color={getStatusColor(status) as any}\n                            size=\"small\"\n                          />\n                        </Box>\n                      </Grid>\n                    ))\n                  }\n                </Grid>\n\n                {!diagnostics.dependencies.database && \n                 !diagnostics.dependencies.cache && \n                 !diagnostics.dependencies.external_apis && (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    No dependency information available\n                  </Typography>\n                )}\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* System Information */}\n          {diagnostics.system_info && (\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                    <InfoIcon color=\"primary\" />\n                    <Typography variant=\"h6\">System Information</Typography>\n                  </Box>\n\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={4}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Version\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {diagnostics.system_info.version}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Uptime\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {diagnostics.system_info.uptime}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Environment\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {diagnostics.system_info.environment}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose} variant=\"contained\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DiagnosticsPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/components/HealthOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3766,3769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3766,3769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4649,4652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4649,4652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6992,6995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6992,6995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7639,7642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7639,7642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8000,8003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8000,8003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8622,8625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8622,8625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9494,9497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9494,9497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Health Overview Component\n * Displays system-wide health metrics and summary\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  Grid,\n  LinearProgress,\n  Chip,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  CheckCircle as HealthyIcon,\n  Warning as WarningIcon,\n  Error as ErrorIcon,\n  Speed as SpeedIcon,\n  Timeline as UptimeIcon,\n  Storage as ServicesIcon,\n} from '@mui/icons-material';\nimport type { HealthOverviewProps, HealthStatus } from '../types/health-types';\n\nconst HealthOverview: React.FC<HealthOverviewProps> = ({\n  overview,\n  onRefresh,\n  loading = false,\n}) => {\n  const getOverallStatusIcon = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return <HealthyIcon color=\"success\" sx={{ fontSize: 32 }} />;\n      case 'degraded':\n        return <WarningIcon color=\"warning\" sx={{ fontSize: 32 }} />;\n      case 'error':\n        return <ErrorIcon color=\"error\" sx={{ fontSize: 32 }} />;\n      default:\n        return <ServicesIcon color=\"disabled\" sx={{ fontSize: 32 }} />;\n    }\n  };\n\n  const getOverallStatusColor = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'degraded':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getOverallStatusText = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return 'All Systems Operational';\n      case 'degraded':\n        return 'Some Issues Detected';\n      case 'error':\n        return 'Critical Issues Present';\n      default:\n        return 'Status Unknown';\n    }\n  };\n\n  const getHealthPercentage = () => {\n    if (overview.total_services === 0) return 0;\n    return (overview.healthy_services / overview.total_services) * 100;\n  };\n\n  const getUptimeColor = (uptime: number) => {\n    if (uptime >= 99.9) return 'success';\n    if (uptime >= 99.0) return 'warning';\n    return 'error';\n  };\n\n  const getResponseTimeColor = (responseTime: number) => {\n    if (responseTime <= 200) return 'success';\n    if (responseTime <= 500) return 'warning';\n    return 'error';\n  };\n\n  const formatLastUpdated = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffSeconds = Math.floor(diffMs / 1000);\n    \n    if (diffSeconds < 60) {\n      return `${diffSeconds} seconds ago`;\n    } else if (diffSeconds < 3600) {\n      return `${Math.floor(diffSeconds / 60)} minutes ago`;\n    } else {\n      return date.toLocaleTimeString();\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"System Health Overview\"\n        action={\n          onRefresh && (\n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={onRefresh} disabled={loading}>\n                {loading ? <CircularProgress size={20} /> : <RefreshIcon />}\n              </IconButton>\n            </Tooltip>\n          )\n        }\n      />\n      \n      <CardContent>\n        {/* Overall Status */}\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>\n          {getOverallStatusIcon(overview.overall_status)}\n          \n          <Box sx={{ flexGrow: 1 }}>\n            <Typography variant=\"h5\" component=\"h3\" gutterBottom>\n              {getOverallStatusText(overview.overall_status)}\n            </Typography>\n            \n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <Chip\n                label={`${overview.healthy_services}/${overview.total_services} Services Healthy`}\n                color={getOverallStatusColor(overview.overall_status) as any}\n                variant=\"outlined\"\n              />\n              \n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Last updated: {formatLastUpdated(overview.last_updated)}\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n\n        {/* Health Progress Bar */}\n        <Box sx={{ mb: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              System Health\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {getHealthPercentage().toFixed(1)}%\n            </Typography>\n          </Box>\n          <LinearProgress\n            variant=\"determinate\"\n            value={getHealthPercentage()}\n            color={getOverallStatusColor(overview.overall_status) as any}\n            sx={{ height: 8, borderRadius: 4 }}\n          />\n        </Box>\n\n        {/* Metrics Grid */}\n        <Grid container spacing={3}>\n          {/* Service Status Breakdown */}\n          <Grid item xs={12} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <ServicesIcon color=\"action\" sx={{ fontSize: 24, mb: 1 }} />\n              <Typography variant=\"h6\" component=\"div\">\n                {overview.total_services}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Services\n              </Typography>\n              \n              <Box sx={{ mt: 2, space: 1 }}>\n                {overview.healthy_services > 0 && (\n                  <Chip\n                    label={`${overview.healthy_services} Healthy`}\n                    color=\"success\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{ mb: 0.5, mr: 0.5 }}\n                  />\n                )}\n                \n                {overview.degraded_services > 0 && (\n                  <Chip\n                    label={`${overview.degraded_services} Degraded`}\n                    color=\"warning\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{ mb: 0.5, mr: 0.5 }}\n                  />\n                )}\n                \n                {overview.error_services > 0 && (\n                  <Chip\n                    label={`${overview.error_services} Error`}\n                    color=\"error\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{ mb: 0.5, mr: 0.5 }}\n                  />\n                )}\n                \n                {overview.unknown_services > 0 && (\n                  <Chip\n                    label={`${overview.unknown_services} Unknown`}\n                    color=\"default\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{ mb: 0.5, mr: 0.5 }}\n                  />\n                )}\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Average Response Time */}\n          <Grid item xs={12} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <SpeedIcon \n                color={getResponseTimeColor(overview.average_response_time) as any} \n                sx={{ fontSize: 24, mb: 1 }} \n              />\n              <Typography variant=\"h6\" component=\"div\">\n                {overview.average_response_time}ms\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Avg Response Time\n              </Typography>\n              \n              <Box sx={{ mt: 1 }}>\n                <Chip\n                  label={overview.average_response_time <= 200 ? 'Excellent' : \n                         overview.average_response_time <= 500 ? 'Good' : 'Slow'}\n                  color={getResponseTimeColor(overview.average_response_time) as any}\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Overall Uptime */}\n          <Grid item xs={12} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <UptimeIcon \n                color={getUptimeColor(overview.overall_uptime) as any} \n                sx={{ fontSize: 24, mb: 1 }} \n              />\n              <Typography variant=\"h6\" component=\"div\">\n                {overview.overall_uptime.toFixed(2)}%\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Overall Uptime\n              </Typography>\n              \n              <Box sx={{ mt: 1 }}>\n                <Chip\n                  label={overview.overall_uptime >= 99.9 ? 'Excellent' : \n                         overview.overall_uptime >= 99.0 ? 'Good' : 'Poor'}\n                  color={getUptimeColor(overview.overall_uptime) as any}\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* System Status */}\n          <Grid item xs={12} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              {getOverallStatusIcon(overview.overall_status)}\n              <Typography variant=\"h6\" component=\"div\" sx={{ mt: 1 }}>\n                {overview.overall_status.charAt(0).toUpperCase() + overview.overall_status.slice(1)}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                System Status\n              </Typography>\n              \n              <Box sx={{ mt: 1 }}>\n                <Chip\n                  label={getOverallStatusText(overview.overall_status)}\n                  color={getOverallStatusColor(overview.overall_status) as any}\n                  size=\"small\"\n                  variant=\"filled\"\n                />\n              </Box>\n            </Box>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default HealthOverview;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/components/ServiceStatusCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3005,3008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3005,3008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4409,4412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4409,4412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4739,4742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4739,4742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Status Card Component\n * Displays individual service health status with detailed metrics\n */\n\nimport React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Box,\n  Chip,\n  IconButton,\n  Button,\n  LinearProgress,\n  Tooltip,\n  Divider,\n} from '@mui/material';\nimport {\n  CheckCircle as HealthyIcon,\n  Warning as DegradedIcon,\n  Error as ErrorIcon,\n  Help as UnknownIcon,\n  Refresh as RefreshIcon,\n  Timeline as DiagnosticsIcon,\n  AccessTime as TimeIcon,\n  Speed as ResponseIcon,\n} from '@mui/icons-material';\nimport { SERVICE_CONFIGS } from '@infrastructure/api/health-api';\nimport type { ServiceStatusCardProps, HealthStatus } from '../types/health-types';\n\nconst ServiceStatusCard: React.FC<ServiceStatusCardProps> = ({\n  service,\n  health,\n  onRefresh,\n  onViewDiagnostics,\n}) => {\n  const config = SERVICE_CONFIGS[service];\n  \n  if (!config) {\n    return null;\n  }\n\n  const getStatusIcon = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return <HealthyIcon color=\"success\" />;\n      case 'degraded':\n        return <DegradedIcon color=\"warning\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <UnknownIcon color=\"disabled\" />;\n    }\n  };\n\n  const getStatusColor = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'degraded':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusText = (status: HealthStatus) => {\n    switch (status) {\n      case 'healthy':\n        return 'Healthy';\n      case 'degraded':\n        return 'Degraded';\n      case 'error':\n        return 'Error';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getResponseTimeColor = (responseTime: number) => {\n    if (responseTime <= config.expectedResponseTime) return 'success';\n    if (responseTime <= config.criticalResponseTime) return 'warning';\n    return 'error';\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  const formatUptime = (uptime?: number) => {\n    if (uptime === undefined) return 'N/A';\n    return `${uptime.toFixed(2)}%`;\n  };\n\n  return (\n    <Card \n      sx={{ \n        height: '100%',\n        border: health.status === 'error' ? 2 : 1,\n        borderColor: health.status === 'error' ? 'error.main' : 'divider',\n      }}\n    >\n      <CardContent>\n        {/* Service Header */}\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getStatusIcon(health.status)}\n            <Typography variant=\"h6\" component=\"h3\" noWrap>\n              {config.displayName}\n            </Typography>\n          </Box>\n          \n          <Chip\n            label={getStatusText(health.status)}\n            color={getStatusColor(health.status) as any}\n            size=\"small\"\n            variant=\"filled\"\n          />\n        </Box>\n\n        {/* Service Details */}\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            {config.url}:{config.port}\n          </Typography>\n          \n          {health.error && (\n            <Typography variant=\"body2\" color=\"error\" sx={{ mt: 1 }}>\n              Error: {health.error}\n            </Typography>\n          )}\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        {/* Metrics */}\n        <Box sx={{ space: 2 }}>\n          {/* Response Time */}\n          <Box sx={{ mb: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n              <ResponseIcon fontSize=\"small\" color=\"action\" />\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Response Time\n              </Typography>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Typography variant=\"body1\" fontWeight=\"medium\">\n                {health.responseTime}ms\n              </Typography>\n              <Chip\n                label={health.responseTime <= config.expectedResponseTime ? 'Fast' : \n                       health.responseTime <= config.criticalResponseTime ? 'Slow' : 'Critical'}\n                color={getResponseTimeColor(health.responseTime) as any}\n                size=\"small\"\n                variant=\"outlined\"\n              />\n            </Box>\n            <LinearProgress\n              variant=\"determinate\"\n              value={Math.min((health.responseTime / config.criticalResponseTime) * 100, 100)}\n              color={getResponseTimeColor(health.responseTime) as any}\n              sx={{ mt: 1, height: 4, borderRadius: 2 }}\n            />\n          </Box>\n\n          {/* Uptime */}\n          {health.data?.uptime_percentage !== undefined && (\n            <Box sx={{ mb: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                <TimeIcon fontSize=\"small\" color=\"action\" />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Uptime\n                </Typography>\n              </Box>\n              <Typography variant=\"body1\" fontWeight=\"medium\">\n                {formatUptime(health.data.uptime_percentage)}\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={health.data.uptime_percentage}\n                color={health.data.uptime_percentage > 99 ? 'success' : \n                       health.data.uptime_percentage > 95 ? 'warning' : 'error'}\n                sx={{ mt: 1, height: 4, borderRadius: 2 }}\n              />\n            </Box>\n          )}\n\n          {/* Version */}\n          {health.data?.version && (\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Version: {health.data.version}\n              </Typography>\n            </Box>\n          )}\n\n          {/* Last Check */}\n          <Box>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Last checked: {formatTimestamp(health.timestamp)}\n            </Typography>\n          </Box>\n        </Box>\n\n        {/* Additional Details */}\n        {health.data?.details && (\n          <>\n            <Divider sx={{ my: 2 }} />\n            <Box>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                System Resources\n              </Typography>\n              \n              {health.data.details.cpu_usage !== undefined && (\n                <Box sx={{ mb: 1 }}>\n                  <Typography variant=\"caption\">\n                    CPU: {health.data.details.cpu_usage}%\n                  </Typography>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={health.data.details.cpu_usage}\n                    color={health.data.details.cpu_usage > 80 ? 'error' : \n                           health.data.details.cpu_usage > 60 ? 'warning' : 'success'}\n                    sx={{ height: 3, borderRadius: 1 }}\n                  />\n                </Box>\n              )}\n              \n              {health.data.details.memory_usage !== undefined && (\n                <Box sx={{ mb: 1 }}>\n                  <Typography variant=\"caption\">\n                    Memory: {health.data.details.memory_usage}%\n                  </Typography>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={health.data.details.memory_usage}\n                    color={health.data.details.memory_usage > 80 ? 'error' : \n                           health.data.details.memory_usage > 60 ? 'warning' : 'success'}\n                    sx={{ height: 3, borderRadius: 1 }}\n                  />\n                </Box>\n              )}\n              \n              {health.data.details.active_connections !== undefined && (\n                <Typography variant=\"caption\" display=\"block\">\n                  Active Connections: {health.data.details.active_connections}\n                </Typography>\n              )}\n            </Box>\n          </>\n        )}\n      </CardContent>\n\n      <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\n        <Button\n          size=\"small\"\n          startIcon={<DiagnosticsIcon />}\n          onClick={() => onViewDiagnostics?.()}\n          variant=\"outlined\"\n        >\n          Diagnostics\n        </Button>\n        \n        <Tooltip title=\"Refresh Status\">\n          <IconButton size=\"small\" onClick={() => onRefresh?.()}>\n            <RefreshIcon />\n          </IconButton>\n        </Tooltip>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default ServiceStatusCard;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/components/TroubleshootingPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5726,5729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5726,5729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Troubleshooting Panel Component\n * Displays troubleshooting suggestions and common solutions\n */\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Chip,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Tooltip,\n  Alert,\n  Link,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  ExpandMore as ExpandMoreIcon,\n  Error as CriticalIcon,\n  Warning as HighIcon,\n  Info as MediumIcon,\n  CheckCircle as LowIcon,\n  BugReport as IssueIcon,\n  Build as SolutionIcon,\n  Help as CauseIcon,\n  Description as DocsIcon,\n} from '@mui/icons-material';\nimport type { TroubleshootingPanelProps, TroubleshootingSuggestion } from '../types/health-types';\n\nconst TroubleshootingPanel: React.FC<TroubleshootingPanelProps> = ({\n  suggestions,\n  service,\n  onClose,\n}) => {\n  const [expandedSuggestion, setExpandedSuggestion] = useState<string | false>(false);\n\n  const getSeverityIcon = (severity: TroubleshootingSuggestion['severity']) => {\n    switch (severity) {\n      case 'critical':\n        return <CriticalIcon color=\"error\" />;\n      case 'high':\n        return <HighIcon color=\"warning\" />;\n      case 'medium':\n        return <MediumIcon color=\"info\" />;\n      case 'low':\n        return <LowIcon color=\"success\" />;\n      default:\n        return <IssueIcon color=\"disabled\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: TroubleshootingSuggestion['severity']) => {\n    switch (severity) {\n      case 'critical':\n        return 'error';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'info';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSeverityText = (severity: TroubleshootingSuggestion['severity']) => {\n    return severity.charAt(0).toUpperCase() + severity.slice(1);\n  };\n\n  const handleAccordionChange = (suggestionId: string) => (\n    event: React.SyntheticEvent,\n    isExpanded: boolean\n  ) => {\n    setExpandedSuggestion(isExpanded ? suggestionId : false);\n  };\n\n  const sortedSuggestions = [...suggestions].sort((a, b) => {\n    const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n    return severityOrder[a.severity] - severityOrder[b.severity];\n  });\n\n  return (\n    <Dialog\n      open={true}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: '70vh', maxHeight: '90vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">\n            Troubleshooting{service ? `: ${service}` : ''}\n          </Typography>\n          \n          <Tooltip title=\"Close\">\n            <IconButton onClick={onClose} size=\"small\">\n              <CloseIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        {suggestions.length === 0 ? (\n          <Alert severity=\"success\" sx={{ mt: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              No Issues Detected\n            </Typography>\n            <Typography>\n              All services are operating normally. No troubleshooting suggestions are available at this time.\n            </Typography>\n          </Alert>\n        ) : (\n          <>\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\n              <Typography variant=\"body2\">\n                Found {suggestions.length} issue{suggestions.length !== 1 ? 's' : ''} that may require attention. \n                Expand each item below for detailed troubleshooting steps.\n              </Typography>\n            </Alert>\n\n            <Box>\n              {sortedSuggestions.map((suggestion, index) => (\n                <Accordion\n                  key={`${suggestion.issue}-${index}`}\n                  expanded={expandedSuggestion === `${suggestion.issue}-${index}`}\n                  onChange={handleAccordionChange(`${suggestion.issue}-${index}`)}\n                  sx={{ \n                    mb: 1,\n                    border: suggestion.severity === 'critical' ? 2 : 1,\n                    borderColor: suggestion.severity === 'critical' ? 'error.main' : 'divider',\n                  }}\n                >\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    sx={{\n                      backgroundColor: suggestion.severity === 'critical' ? 'error.light' : \n                                     suggestion.severity === 'high' ? 'warning.light' : 'transparent',\n                      '&.Mui-expanded': {\n                        backgroundColor: suggestion.severity === 'critical' ? 'error.light' : \n                                       suggestion.severity === 'high' ? 'warning.light' : 'action.hover',\n                      },\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                      {getSeverityIcon(suggestion.severity)}\n                      \n                      <Box sx={{ flexGrow: 1 }}>\n                        <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                          {suggestion.issue}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {suggestion.description}\n                        </Typography>\n                      </Box>\n                      \n                      <Chip\n                        label={getSeverityText(suggestion.severity)}\n                        color={getSeverityColor(suggestion.severity) as any}\n                        size=\"small\"\n                        variant=\"filled\"\n                      />\n                    </Box>\n                  </AccordionSummary>\n\n                  <AccordionDetails>\n                    <Box sx={{ space: 3 }}>\n                      {/* Possible Causes */}\n                      <Box sx={{ mb: 3 }}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                          <CauseIcon color=\"primary\" />\n                          <Typography variant=\"h6\">Possible Causes</Typography>\n                        </Box>\n                        \n                        <List dense>\n                          {suggestion.possible_causes.map((cause, causeIndex) => (\n                            <ListItem key={causeIndex}>\n                              <ListItemIcon>\n                                <Box\n                                  sx={{\n                                    width: 8,\n                                    height: 8,\n                                    borderRadius: '50%',\n                                    backgroundColor: 'text.secondary',\n                                  }}\n                                />\n                              </ListItemIcon>\n                              <ListItemText primary={cause} />\n                            </ListItem>\n                          ))}\n                        </List>\n                      </Box>\n\n                      {/* Suggested Actions */}\n                      <Box sx={{ mb: 3 }}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                          <SolutionIcon color=\"primary\" />\n                          <Typography variant=\"h6\">Suggested Actions</Typography>\n                        </Box>\n                        \n                        <List dense>\n                          {suggestion.suggested_actions.map((action, actionIndex) => (\n                            <ListItem key={actionIndex}>\n                              <ListItemIcon>\n                                <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\n                                  {actionIndex + 1}.\n                                </Typography>\n                              </ListItemIcon>\n                              <ListItemText primary={action} />\n                            </ListItem>\n                          ))}\n                        </List>\n                      </Box>\n\n                      {/* Documentation Links */}\n                      {suggestion.documentation_links && suggestion.documentation_links.length > 0 && (\n                        <Box>\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                            <DocsIcon color=\"primary\" />\n                            <Typography variant=\"h6\">Documentation</Typography>\n                          </Box>\n                          \n                          <List dense>\n                            {suggestion.documentation_links.map((link, linkIndex) => (\n                              <ListItem key={linkIndex}>\n                                <ListItemIcon>\n                                  <DocsIcon fontSize=\"small\" color=\"action\" />\n                                </ListItemIcon>\n                                <ListItemText\n                                  primary={\n                                    <Link\n                                      href={link}\n                                      target=\"_blank\"\n                                      rel=\"noopener noreferrer\"\n                                      color=\"primary\"\n                                    >\n                                      {link.split('/').pop() || link}\n                                    </Link>\n                                  }\n                                />\n                              </ListItem>\n                            ))}\n                          </List>\n                        </Box>\n                      )}\n                    </Box>\n                  </AccordionDetails>\n                </Accordion>\n              ))}\n            </Box>\n\n            {/* General Troubleshooting Tips */}\n            <Box sx={{ mt: 4 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                General Troubleshooting Tips\n              </Typography>\n              \n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>\n                  <strong>Before making changes:</strong>\n                </Typography>\n                <List dense>\n                  <ListItem sx={{ py: 0 }}>\n                    <ListItemText primary=\"• Check service logs for detailed error messages\" />\n                  </ListItem>\n                  <ListItem sx={{ py: 0 }}>\n                    <ListItemText primary=\"• Verify system resources (CPU, memory, disk space)\" />\n                  </ListItem>\n                  <ListItem sx={{ py: 0 }}>\n                    <ListItemText primary=\"• Test connectivity from different locations\" />\n                  </ListItem>\n                  <ListItem sx={{ py: 0 }}>\n                    <ListItemText primary=\"• Document any changes made for rollback purposes\" />\n                  </ListItem>\n                </List>\n              </Alert>\n\n              <Alert severity=\"warning\">\n                <Typography variant=\"body2\">\n                  <strong>Need additional help?</strong> Contact your system administrator or \n                  check the comprehensive troubleshooting guide in the documentation.\n                </Typography>\n              </Alert>\n            </Box>\n          </>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose} variant=\"contained\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TroubleshootingPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/hooks/useHealthMonitoring.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthCheckResult' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SystemHealthOverview' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lastRefresh' is assigned a value but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Health Monitoring Hook\n * Provides comprehensive health monitoring functionality with auto-refresh and state management\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { \n  useCheckAllServicesHealthQuery,\n  useGetSystemHealthOverviewQuery,\n  healthApiClient,\n} from '@infrastructure/api/health-api';\nimport type { \n  UseHealthMonitoringReturn,\n  HealthCheckResult,\n  SystemHealthOverview,\n  HealthMonitoringConfig,\n} from '../types/health-types';\n\nconst DEFAULT_CONFIG: HealthMonitoringConfig = {\n  auto_refresh: true,\n  refresh_interval: 30, // 30 seconds\n  timeout: 10000, // 10 seconds\n  retry_attempts: 3,\n  alert_thresholds: {\n    response_time_warning: 500,\n    response_time_critical: 1000,\n    uptime_warning: 99.0,\n    uptime_critical: 95.0,\n    error_rate_warning: 5.0,\n    error_rate_critical: 10.0,\n  },\n};\n\nexport const useHealthMonitoring = (\n  customConfig?: Partial<HealthMonitoringConfig>\n): UseHealthMonitoringReturn => {\n  const [config, setConfig] = useState<HealthMonitoringConfig>({\n    ...DEFAULT_CONFIG,\n    ...customConfig,\n  });\n  \n  const [lastRefresh, setLastRefresh] = useState<string | null>(null);\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(config.auto_refresh);\n\n  // RTK Query hooks for data fetching\n  const {\n    data: servicesData,\n    error: servicesError,\n    isLoading: servicesLoading,\n    refetch: refetchServices,\n  } = useCheckAllServicesHealthQuery(undefined, {\n    pollingInterval: autoRefreshEnabled ? config.refresh_interval * 1000 : 0,\n    refetchOnMountOrArgChange: true,\n    refetchOnFocus: true,\n  });\n\n  const {\n    data: overviewData,\n    error: overviewError,\n    isLoading: overviewLoading,\n    refetch: refetchOverview,\n  } = useGetSystemHealthOverviewQuery(undefined, {\n    pollingInterval: autoRefreshEnabled ? config.refresh_interval * 1000 : 0,\n    refetchOnMountOrArgChange: true,\n    refetchOnFocus: true,\n  });\n\n  // Combine loading states\n  const loading = servicesLoading || overviewLoading;\n\n  // Combine error states\n  const error = servicesError || overviewError;\n  const errorMessage = error ? \n    ('data' in error ? (error.data as any)?.message : 'message' in error ? error.message : 'Unknown error') : \n    null;\n\n  // Manual refresh function\n  const refresh = useCallback(async () => {\n    try {\n      await Promise.all([\n        refetchServices(),\n        refetchOverview(),\n      ]);\n      setLastRefresh(new Date().toISOString());\n    } catch (error) {\n      console.error('Failed to refresh health data:', error);\n    }\n  }, [refetchServices, refetchOverview]);\n\n  // Toggle auto-refresh\n  const toggleAutoRefresh = useCallback(() => {\n    setAutoRefreshEnabled(prev => {\n      const newValue = !prev;\n      setConfig(prevConfig => ({\n        ...prevConfig,\n        auto_refresh: newValue,\n      }));\n      return newValue;\n    });\n  }, []);\n\n  // Export report function\n  const exportReport = useCallback(async (\n    type: 'summary' | 'detailed' | 'historical'\n  ): Promise<void> => {\n    try {\n      const report = await healthApiClient.exportHealthReport(type);\n      \n      // Create and download the report\n      const blob = new Blob([JSON.stringify(report, null, 2)], {\n        type: 'application/json',\n      });\n      \n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `health-report-${type}-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Failed to export health report:', error);\n      throw error;\n    }\n  }, []);\n\n  // Update last refresh when data changes\n  useEffect(() => {\n    if (servicesData || overviewData) {\n      setLastRefresh(new Date().toISOString());\n    }\n  }, [servicesData, overviewData]);\n\n  return {\n    services: servicesData || {},\n    overview: overviewData || null,\n    loading,\n    error: errorMessage,\n    refresh,\n    toggleAutoRefresh,\n    exportReport,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/hooks/useServiceHealth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthCheckResult' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1144,1147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1144,1147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Health Hook\n * Provides individual service health monitoring and diagnostics functionality\n */\n\nimport { useState, useCallback } from 'react';\nimport { \n  useCheckServiceHealthQuery,\n  healthApiClient,\n} from '@infrastructure/api/health-api';\nimport type { \n  UseServiceHealthReturn,\n  HealthCheckResult,\n  DiagnosticInfo,\n} from '../types/health-types';\n\nexport const useServiceHealth = (serviceName: string): UseServiceHealthReturn => {\n  const [diagnostics, setDiagnostics] = useState<DiagnosticInfo | null>(null);\n  const [diagnosticsLoading, setDiagnosticsLoading] = useState(false);\n  const [diagnosticsError, setDiagnosticsError] = useState<string | null>(null);\n\n  // RTK Query hook for service health\n  const {\n    data: healthData,\n    error: healthError,\n    isLoading: healthLoading,\n    refetch: refetchHealth,\n  } = useCheckServiceHealthQuery(serviceName, {\n    refetchOnMountOrArgChange: true,\n    refetchOnFocus: true,\n  });\n\n  // Combine error states\n  const error = healthError || diagnosticsError;\n  const errorMessage = error ? \n    (typeof error === 'string' ? error : \n     'data' in error ? (error.data as any)?.message : \n     'message' in error ? error.message : 'Unknown error') : \n    null;\n\n  // Manual refresh function\n  const refresh = useCallback(async () => {\n    try {\n      await refetchHealth();\n    } catch (error) {\n      console.error(`Failed to refresh health data for ${serviceName}:`, error);\n    }\n  }, [refetchHealth, serviceName]);\n\n  // Run diagnostics function\n  const runDiagnostics = useCallback(async () => {\n    setDiagnosticsLoading(true);\n    setDiagnosticsError(null);\n    \n    try {\n      const diagnosticsResult = await healthApiClient.runDiagnostics(serviceName);\n      setDiagnostics(diagnosticsResult);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to run diagnostics';\n      setDiagnosticsError(errorMessage);\n      console.error(`Failed to run diagnostics for ${serviceName}:`, error);\n    } finally {\n      setDiagnosticsLoading(false);\n    }\n  }, [serviceName]);\n\n  return {\n    health: healthData || null,\n    diagnostics,\n    loading: healthLoading || diagnosticsLoading,\n    error: errorMessage,\n    refresh,\n    runDiagnostics,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/pages/SystemHealthPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":28,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TimelineIcon' is defined but never used.","line":29,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exportReport' is assigned a value but never used.","line":49,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6159,6162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6159,6162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":252,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":67}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * System Health Page Component\n * Provides real-time monitoring and diagnostics for all backend services\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Button,\n  IconButton,\n  Switch,\n  FormControlLabel,\n  Alert,\n  Chip,\n  Tooltip,\n  CircularProgress,\n  Divider,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  Settings as SettingsIcon,\n  Timeline as TimelineIcon,\n  BugReport as DiagnosticsIcon,\n} from '@mui/icons-material';\nimport { useHealthMonitoring } from '../hooks/useHealthMonitoring';\nimport { HealthOverview } from '../components/HealthOverview';\nimport { ServiceStatusCard } from '../components/ServiceStatusCard';\nimport { DiagnosticsPanel } from '../components/DiagnosticsPanel';\nimport { TroubleshootingPanel } from '../components/TroubleshootingPanel';\nimport { SERVICE_CONFIGS } from '@infrastructure/api/health-api';\nimport { generateTroubleshootingSuggestions, exportHealthReport } from '../utils/troubleshooting';\nimport type { DiagnosticInfo, TroubleshootingSuggestion } from '../types/health-types';\n\nconst SystemHealthPage: React.FC = () => {\n  const {\n    services,\n    overview,\n    loading,\n    error,\n    refresh,\n    toggleAutoRefresh,\n    exportReport,\n  } = useHealthMonitoring();\n\n  const [selectedService, setSelectedService] = useState<string | null>(null);\n  const [showDiagnostics, setShowDiagnostics] = useState(false);\n  const [showTroubleshooting, setShowTroubleshooting] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [diagnosticsData, setDiagnosticsData] = useState<DiagnosticInfo | null>(null);\n  const [troubleshootingSuggestions, setTroubleshootingSuggestions] = useState<TroubleshootingSuggestion[]>([]);\n\n  // Auto-refresh effect\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(() => {\n        refresh();\n      }, 30000); // 30 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refresh]);\n\n  const handleRefresh = () => {\n    refresh();\n  };\n\n  const handleToggleAutoRefresh = () => {\n    setAutoRefresh(!autoRefresh);\n    toggleAutoRefresh();\n  };\n\n  const handleExportReport = async (type: 'summary' | 'detailed' | 'historical') => {\n    try {\n      await exportHealthReport(type, services, overview, 'json');\n    } catch (error) {\n      console.error('Failed to export report:', error);\n    }\n  };\n\n  const handleViewDiagnostics = async (serviceName: string) => {\n    setSelectedService(serviceName);\n    setShowDiagnostics(true);\n    \n    // In a real implementation, this would call the diagnostics API\n    // For now, we'll simulate diagnostics data\n    const mockDiagnostics: DiagnosticInfo = {\n      service: serviceName,\n      connectivity: {\n        can_reach: services[serviceName]?.status !== 'error',\n        dns_resolution: true,\n        port_open: services[serviceName]?.status !== 'error',\n      },\n      performance: {\n        response_time: services[serviceName]?.responseTime || 0,\n        error_rate: services[serviceName]?.status === 'error' ? 100 : 0,\n      },\n      dependencies: {\n        database: services[serviceName]?.status === 'healthy' ? 'healthy' : 'error',\n        cache: 'healthy',\n      },\n      system_info: {\n        version: services[serviceName]?.data?.version || '1.0.0',\n        uptime: '99.9%',\n        environment: 'production',\n      },\n    };\n    \n    setDiagnosticsData(mockDiagnostics);\n  };\n\n  const handleShowTroubleshooting = () => {\n    setShowTroubleshooting(true);\n\n    // Generate troubleshooting suggestions based on current issues\n    const suggestions = generateTroubleshootingSuggestions(services);\n    setTroubleshootingSuggestions(suggestions);\n  };\n\n  const getOverallStatusColor = () => {\n    if (!overview) return 'default';\n    switch (overview.overall_status) {\n      case 'healthy': return 'success';\n      case 'degraded': return 'warning';\n      case 'error': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getOverallStatusText = () => {\n    if (!overview) return 'Unknown';\n    switch (overview.overall_status) {\n      case 'healthy': return 'All Systems Operational';\n      case 'degraded': return 'Some Issues Detected';\n      case 'error': return 'Critical Issues';\n      default: return 'Status Unknown';\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n      {/* Page Header */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h4\" component=\"h1\" fontWeight=\"bold\">\n            System Health\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefresh}\n                  onChange={handleToggleAutoRefresh}\n                  size=\"small\"\n                />\n              }\n              label=\"Auto-refresh\"\n              sx={{ mr: 2 }}\n            />\n            \n            <Tooltip title=\"Refresh Now\">\n              <IconButton onClick={handleRefresh} disabled={loading}>\n                {loading ? <CircularProgress size={20} /> : <RefreshIcon />}\n              </IconButton>\n            </Tooltip>\n            \n            <Tooltip title=\"View Troubleshooting\">\n              <IconButton onClick={handleShowTroubleshooting}>\n                <DiagnosticsIcon />\n              </IconButton>\n            </Tooltip>\n            \n            <Button\n              variant=\"outlined\"\n              startIcon={<DownloadIcon />}\n              onClick={() => handleExportReport('summary')}\n              size=\"small\"\n            >\n              Export Report\n            </Button>\n          </Box>\n        </Box>\n\n        {/* Overall Status */}\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <Chip\n                label={getOverallStatusText()}\n                color={getOverallStatusColor() as any}\n                variant=\"filled\"\n                size=\"medium\"\n              />\n              \n              {overview && (\n                <>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {overview.healthy_services}/{overview.total_services} services healthy\n                  </Typography>\n                  \n                  <Divider orientation=\"vertical\" flexItem />\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg Response: {overview.average_response_time}ms\n                  </Typography>\n                  \n                  <Divider orientation=\"vertical\" flexItem />\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Uptime: {overview.overall_uptime}%\n                  </Typography>\n                  \n                  <Divider orientation=\"vertical\" flexItem />\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Last Updated: {new Date(overview.last_updated).toLocaleTimeString()}\n                  </Typography>\n                </>\n              )}\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Health Overview */}\n      {overview && (\n        <Box sx={{ mb: 4 }}>\n          <HealthOverview overview={overview} onRefresh={handleRefresh} loading={loading} />\n        </Box>\n      )}\n\n      {/* Service Status Cards */}\n      <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n        Service Status\n      </Typography>\n      \n      <Grid container spacing={3}>\n        {Object.entries(SERVICE_CONFIGS).map(([serviceName, config]) => {\n          const health = services[serviceName];\n          \n          return (\n            <Grid item xs={12} md={6} lg={4} key={serviceName}>\n              <ServiceStatusCard\n                service={serviceName}\n                health={health || {\n                  service: serviceName,\n                  status: 'unknown',\n                  responseTime: 0,\n                  timestamp: new Date().toISOString(),\n                }}\n                onRefresh={() => refresh()}\n                onViewDiagnostics={() => handleViewDiagnostics(serviceName)}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      {/* Diagnostics Panel */}\n      {showDiagnostics && selectedService && diagnosticsData && (\n        <DiagnosticsPanel\n          service={selectedService}\n          diagnostics={diagnosticsData}\n          onClose={() => {\n            setShowDiagnostics(false);\n            setSelectedService(null);\n            setDiagnosticsData(null);\n          }}\n        />\n      )}\n\n      {/* Troubleshooting Panel */}\n      {showTroubleshooting && (\n        <TroubleshootingPanel\n          suggestions={troubleshootingSuggestions}\n          onClose={() => setShowTroubleshooting(false)}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default SystemHealthPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/types/health-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/system-health/utils/troubleshooting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/components/BeforeAfterComparison.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/components/BeforeAfterComparison.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/components/InteractiveDataGrid.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/components/InteractiveDataGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1204,1207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1204,1207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4128,4131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4128,4131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4286,4289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4286,4289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4652,4655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4652,4655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Interactive Data Grid Component\n * Advanced data grid with sorting, filtering, pagination, and inline editing\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Paper,\n  Checkbox,\n  IconButton,\n  TextField,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Tooltip,\n} from '@mui/material';\nimport {\n  ArrowUpward as ArrowUpIcon,\n  ArrowDownward as ArrowDownIcon,\n  FilterList as FilterIcon,\n  Clear as ClearIcon,\n} from '@mui/icons-material';\n\n// Type definitions\nexport interface ErrorReport {\n  id: string;\n  dateReported: Date;\n  status: 'pending' | 'in_review' | 'approved' | 'rejected';\n  category: string;\n  originalText: string;\n  correctedText?: string;\n  reportedBy: string;\n  reviewedBy?: string;\n  priority: 'high' | 'medium' | 'low';\n  comments?: string;\n  position: {\n    startPosition: number;\n    endPosition: number;\n  };\n}\n\nexport interface DataGridColumn {\n  id: string;\n  label: string;\n  sortable: boolean;\n  filterable: boolean;\n  editable: boolean;\n  width?: number;\n  align?: 'left' | 'center' | 'right';\n  format?: (value: any) => string;\n}\n\nexport interface SortConfig {\n  column: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface InteractiveDataGridProps {\n  data: ErrorReport[];\n  columns: DataGridColumn[];\n  onSort: (column: string, direction: 'asc' | 'desc') => void;\n  onFilter: (filters: Record<string, any>) => void;\n  onEdit: (id: string, field: string, value: any) => void;\n  onSelectionChange: (selectedIds: string[]) => void;\n  loading?: boolean;\n  showFilters?: boolean;\n  sortBy?: SortConfig;\n  selectedRows?: string[];\n  pagination?: {\n    page: number;\n    pageSize: number;\n    total: number;\n    onPageChange: (page: number) => void;\n    onPageSizeChange: (pageSize: number) => void;\n  };\n}\n\nexport const InteractiveDataGrid: React.FC<InteractiveDataGridProps> = ({\n  data,\n  columns,\n  onSort,\n  onFilter,\n  onEdit,\n  onSelectionChange,\n  loading = false,\n  showFilters = false,\n  sortBy,\n  selectedRows = [],\n  pagination,\n}) => {\n  const [editingCell, setEditingCell] = useState<{ rowId: string; columnId: string } | null>(null);\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [sortConfig, setSortConfig] = useState<SortConfig | null>(sortBy || null);\n\n  // Handle column sorting\n  const handleSort = useCallback((columnId: string) => {\n    const column = columns.find(col => col.id === columnId);\n    if (!column?.sortable) return;\n\n    let direction: 'asc' | 'desc' = 'asc';\n    if (sortConfig?.column === columnId && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n\n    setSortConfig({ column: columnId, direction });\n    onSort(columnId, direction);\n  }, [columns, sortConfig, onSort]);\n\n  // Handle filtering\n  const handleFilterChange = useCallback((columnId: string, value: string) => {\n    const newFilters = { ...filters, [columnId]: value };\n    if (!value) {\n      delete newFilters[columnId];\n    }\n    setFilters(newFilters);\n    onFilter(newFilters);\n  }, [filters, onFilter]);\n\n  const handleClearFilters = useCallback(() => {\n    setFilters({});\n    onFilter({});\n  }, [onFilter]);\n\n  // Handle row selection\n  const handleRowSelect = useCallback((rowId: string) => {\n    const newSelection = selectedRows.includes(rowId)\n      ? selectedRows.filter(id => id !== rowId)\n      : [...selectedRows, rowId];\n    onSelectionChange(newSelection);\n  }, [selectedRows, onSelectionChange]);\n\n  const handleSelectAll = useCallback(() => {\n    const allSelected = selectedRows.length === data.length;\n    onSelectionChange(allSelected ? [] : data.map(row => row.id));\n  }, [selectedRows, data, onSelectionChange]);\n\n  // Handle inline editing\n  const handleCellDoubleClick = useCallback((rowId: string, columnId: string) => {\n    const column = columns.find(col => col.id === columnId);\n    if (column?.editable) {\n      setEditingCell({ rowId, columnId });\n    }\n  }, [columns]);\n\n  const handleEditComplete = useCallback((rowId: string, columnId: string, value: any) => {\n    setEditingCell(null);\n    onEdit(rowId, columnId, value);\n  }, [onEdit]);\n\n  // Format cell value\n  const formatCellValue = useCallback((value: any, column: DataGridColumn) => {\n    if (column.format) {\n      return column.format(value);\n    }\n    if (value instanceof Date) {\n      return value.toLocaleDateString();\n    }\n    return value?.toString() || '';\n  }, []);\n\n  // Render cell content\n  const renderCellContent = useCallback((row: ErrorReport, column: DataGridColumn) => {\n    const value = (row as any)[column.id];\n    const isEditing = editingCell?.rowId === row.id && editingCell?.columnId === column.id;\n\n    if (isEditing) {\n      if (column.id === 'status') {\n        return (\n          <Select\n            value={value}\n            onChange={(e) => handleEditComplete(row.id, column.id, e.target.value)}\n            onBlur={() => setEditingCell(null)}\n            autoFocus\n            size=\"small\"\n          >\n            <MenuItem value=\"pending\">Pending</MenuItem>\n            <MenuItem value=\"in_review\">In Review</MenuItem>\n            <MenuItem value=\"approved\">Approved</MenuItem>\n            <MenuItem value=\"rejected\">Rejected</MenuItem>\n          </Select>\n        );\n      } else if (column.id === 'priority') {\n        return (\n          <Select\n            value={value}\n            onChange={(e) => handleEditComplete(row.id, column.id, e.target.value)}\n            onBlur={() => setEditingCell(null)}\n            autoFocus\n            size=\"small\"\n          >\n            <MenuItem value=\"high\">High</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"low\">Low</MenuItem>\n          </Select>\n        );\n      } else {\n        return (\n          <TextField\n            value={value || ''}\n            onChange={(e) => handleEditComplete(row.id, column.id, e.target.value)}\n            onBlur={() => setEditingCell(null)}\n            autoFocus\n            size=\"small\"\n            fullWidth\n          />\n        );\n      }\n    }\n\n    return formatCellValue(value, column);\n  }, [editingCell, handleEditComplete, formatCellValue]);\n\n  // Memoized table rows\n  const tableRows = useMemo(() => {\n    return data.map((row) => (\n      <TableRow\n        key={row.id}\n        selected={selectedRows.includes(row.id)}\n        hover\n      >\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            checked={selectedRows.includes(row.id)}\n            onChange={() => handleRowSelect(row.id)}\n            data-testid={`row-checkbox-${row.id}`}\n          />\n        </TableCell>\n        {columns.map((column) => (\n          <TableCell\n            key={column.id}\n            align={column.align || 'left'}\n            style={{ width: column.width }}\n            onDoubleClick={() => handleCellDoubleClick(row.id, column.id)}\n            data-testid={`cell-${row.id}-${column.id}`}\n            tabIndex={0}\n            sx={{\n              cursor: column.editable ? 'pointer' : 'default',\n              '&:focus': {\n                outline: '2px solid',\n                outlineColor: 'primary.main',\n                outlineOffset: -2,\n              },\n            }}\n          >\n            {renderCellContent(row, column)}\n          </TableCell>\n        ))}\n      </TableRow>\n    ));\n  }, [data, columns, selectedRows, handleRowSelect, handleCellDoubleClick, renderCellContent]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={200}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={200}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No data available\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      {/* Filter Controls */}\n      {showFilters && (\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n            <FilterIcon />\n            <Typography variant=\"h6\">Filters</Typography>\n            <Button\n              size=\"small\"\n              onClick={handleClearFilters}\n              startIcon={<ClearIcon />}\n            >\n              Clear Filters\n            </Button>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n            {columns.filter(col => col.filterable).map(column => (\n              <TextField\n                key={column.id}\n                placeholder={`Filter by ${column.label}`}\n                value={filters[column.id] || ''}\n                onChange={(e) => handleFilterChange(column.id, e.target.value)}\n                size=\"small\"\n                sx={{ minWidth: 150 }}\n              />\n            ))}\n          </Box>\n        </Box>\n      )}\n\n      {/* Data Table */}\n      <TableContainer>\n        <Table\n          aria-label=\"Error reports data grid\"\n          stickyHeader\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  indeterminate={selectedRows.length > 0 && selectedRows.length < data.length}\n                  checked={data.length > 0 && selectedRows.length === data.length}\n                  onChange={handleSelectAll}\n                  data-testid=\"select-all-checkbox\"\n                />\n              </TableCell>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align || 'left'}\n                  style={{ width: column.width }}\n                  sortDirection={sortConfig?.column === column.id ? sortConfig.direction : false}\n                >\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      cursor: column.sortable ? 'pointer' : 'default',\n                    }}\n                    onClick={() => handleSort(column.id)}\n                  >\n                    <Typography variant=\"subtitle2\" fontWeight=\"bold\">\n                      {column.label}\n                    </Typography>\n                    {column.sortable && (\n                      <Box sx={{ ml: 1 }}>\n                        {sortConfig?.column === column.id ? (\n                          <Tooltip title={`Sorted ${sortConfig.direction}ending`}>\n                            <IconButton size=\"small\" data-testid={`sort-icon-${column.id}`}>\n                              {sortConfig.direction === 'asc' ? <ArrowUpIcon /> : <ArrowDownIcon />}\n                            </IconButton>\n                          </Tooltip>\n                        ) : (\n                          <IconButton size=\"small\" sx={{ opacity: 0.5 }}>\n                            <ArrowUpIcon />\n                          </IconButton>\n                        )}\n                      </Box>\n                    )}\n                  </Box>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tableRows}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Pagination */}\n      {pagination && (\n        <TablePagination\n          component=\"div\"\n          count={pagination.total}\n          page={pagination.page}\n          onPageChange={(_, newPage) => pagination.onPageChange(newPage)}\n          rowsPerPage={pagination.pageSize}\n          onRowsPerPageChange={(e) => pagination.onPageSizeChange(parseInt(e.target.value, 10))}\n          rowsPerPageOptions={[5, 10, 25, 50]}\n          aria-label=\"pagination navigation\"\n        />\n      )}\n    </Paper>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/pages/VerificationDashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4960,4963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4960,4963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5001,5004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5001,5004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5249,5252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5249,5252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5449,5452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5449,5452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5627,5630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5627,5630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Verification Dashboard Page\n * Demonstrates the interactive data grid and before/after comparison components\n */\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Tabs,\n  Tab,\n  Divider,\n} from '@mui/material';\nimport { InteractiveDataGrid } from '../components/InteractiveDataGrid';\nimport { BeforeAfterComparison } from '../components/BeforeAfterComparison';\nimport type { ErrorReport, DataGridColumn } from '../components/InteractiveDataGrid';\nimport type { TextChange } from '../components/BeforeAfterComparison';\n\n// Sample error reports data\nconst sampleErrorReports: ErrorReport[] = [\n  {\n    id: 'error-001',\n    dateReported: new Date('2024-01-15'),\n    status: 'pending',\n    category: 'Grammar',\n    originalText: 'This are a test sentence with grammatical errors.',\n    correctedText: 'This is a test sentence with grammatical corrections.',\n    reportedBy: 'john.doe@example.com',\n    reviewedBy: undefined,\n    priority: 'high',\n    comments: 'Subject-verb disagreement needs correction',\n    position: { startPosition: 5, endPosition: 8 },\n  },\n  {\n    id: 'error-002',\n    dateReported: new Date('2024-01-14'),\n    status: 'in_review',\n    category: 'Spelling',\n    originalText: 'Recieve the package from the delivery person.',\n    correctedText: 'Receive the package from the delivery person.',\n    reportedBy: 'jane.smith@example.com',\n    reviewedBy: 'qa.supervisor@example.com',\n    priority: 'medium',\n    comments: 'Common spelling error - i before e rule',\n    position: { startPosition: 0, endPosition: 7 },\n  },\n  {\n    id: 'error-003',\n    dateReported: new Date('2024-01-13'),\n    status: 'approved',\n    category: 'Punctuation',\n    originalText: 'Hello world how are you today',\n    correctedText: 'Hello world, how are you today?',\n    reportedBy: 'bob.wilson@example.com',\n    reviewedBy: 'qa.supervisor@example.com',\n    priority: 'low',\n    comments: 'Missing comma and question mark',\n    position: { startPosition: 11, endPosition: 28 },\n  },\n  {\n    id: 'error-004',\n    dateReported: new Date('2024-01-12'),\n    status: 'rejected',\n    category: 'Grammar',\n    originalText: 'The team have completed their work.',\n    correctedText: 'The team has completed their work.',\n    reportedBy: 'alice.brown@example.com',\n    reviewedBy: 'qa.supervisor@example.com',\n    priority: 'medium',\n    comments: 'Collective noun agreement - rejected due to regional variation',\n    position: { startPosition: 9, endPosition: 13 },\n  },\n  {\n    id: 'error-005',\n    dateReported: new Date('2024-01-11'),\n    status: 'pending',\n    category: 'Terminology',\n    originalText: 'The software program is running smoothly.',\n    correctedText: 'The software application is running smoothly.',\n    reportedBy: 'charlie.davis@example.com',\n    reviewedBy: undefined,\n    priority: 'low',\n    comments: 'Prefer \"application\" over \"program\" in this context',\n    position: { startPosition: 13, endPosition: 20 },\n  },\n];\n\n// Data grid columns configuration\nconst columns: DataGridColumn[] = [\n  { id: 'id', label: 'ID', sortable: true, filterable: false, editable: false, width: 100 },\n  { id: 'dateReported', label: 'Date', sortable: true, filterable: true, editable: false, width: 120 },\n  { id: 'status', label: 'Status', sortable: true, filterable: true, editable: true, width: 120 },\n  { id: 'category', label: 'Category', sortable: true, filterable: true, editable: false, width: 120 },\n  { id: 'originalText', label: 'Original Text', sortable: false, filterable: true, editable: false, width: 250 },\n  { id: 'correctedText', label: 'Corrected Text', sortable: false, filterable: false, editable: true, width: 250 },\n  { id: 'priority', label: 'Priority', sortable: true, filterable: true, editable: true, width: 100 },\n  { id: 'reportedBy', label: 'Reporter', sortable: true, filterable: true, editable: false, width: 150 },\n];\n\nconst VerificationDashboardPage: React.FC = () => {\n  const [currentTab, setCurrentTab] = useState(0);\n  const [selectedErrorReport, setSelectedErrorReport] = useState<ErrorReport | null>(null);\n  const [sortedData, setSortedData] = useState(sampleErrorReports);\n  const [selectedRows, setSelectedRows] = useState<string[]>([]);\n\n  // Generate text changes for comparison\n  const generateTextChanges = (original: string, corrected: string): TextChange[] => {\n    // Simple diff algorithm for demonstration\n    if (original === corrected) return [];\n    \n    // For demo purposes, create a basic substitution change\n    return [\n      {\n        type: 'substitution',\n        originalStart: 0,\n        originalEnd: original.length,\n        correctedStart: 0,\n        correctedEnd: corrected.length,\n        originalText: original,\n        correctedText: corrected,\n      },\n    ];\n  };\n\n  // Handle data grid events\n  const handleSort = (column: string, direction: 'asc' | 'desc') => {\n    const sorted = [...sortedData].sort((a, b) => {\n      const aValue = (a as any)[column];\n      const bValue = (b as any)[column];\n      \n      if (direction === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n    setSortedData(sorted);\n  };\n\n  const handleFilter = (filters: Record<string, any>) => {\n    let filtered = sampleErrorReports;\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        filtered = filtered.filter(item => \n          String((item as any)[key]).toLowerCase().includes(value.toLowerCase())\n        );\n      }\n    });\n    \n    setSortedData(filtered);\n  };\n\n  const handleEdit = (id: string, field: string, value: any) => {\n    setSortedData(prev => \n      prev.map(item => \n        item.id === id ? { ...item, [field]: value } : item\n      )\n    );\n  };\n\n  const handleSelectionChange = (selectedIds: string[]) => {\n    setSelectedRows(selectedIds);\n    if (selectedIds.length === 1) {\n      const selected = sortedData.find(item => item.id === selectedIds[0]);\n      setSelectedErrorReport(selected || null);\n    } else {\n      setSelectedErrorReport(null);\n    }\n  };\n\n  // Handle comparison actions\n  const handleApprove = () => {\n    if (selectedErrorReport) {\n      handleEdit(selectedErrorReport.id, 'status', 'approved');\n      setSelectedErrorReport(prev => prev ? { ...prev, status: 'approved' } : null);\n    }\n  };\n\n  const handleReject = () => {\n    if (selectedErrorReport) {\n      handleEdit(selectedErrorReport.id, 'status', 'rejected');\n      setSelectedErrorReport(prev => prev ? { ...prev, status: 'rejected' } : null);\n    }\n  };\n\n  // Memoized text changes\n  const textChanges = useMemo(() => {\n    if (!selectedErrorReport) return [];\n    return generateTextChanges(selectedErrorReport.originalText, selectedErrorReport.correctedText || '');\n  }, [selectedErrorReport]);\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Verification Dashboard\n      </Typography>\n      \n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Review and verify error reports using the interactive data grid and before/after comparison tools.\n        Select a row in the grid to see the detailed comparison view.\n      </Typography>\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n          <Tab label=\"Error Reports Grid\" />\n          <Tab label=\"Comparison View\" disabled={!selectedErrorReport} />\n        </Tabs>\n      </Box>\n\n      {currentTab === 0 && (\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Error Reports Data Grid\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            Interactive grid with sorting, filtering, pagination, and inline editing. \n            Select a row to enable the comparison view.\n          </Typography>\n          \n          <InteractiveDataGrid\n            data={sortedData}\n            columns={columns}\n            onSort={handleSort}\n            onFilter={handleFilter}\n            onEdit={handleEdit}\n            onSelectionChange={handleSelectionChange}\n            selectedRows={selectedRows}\n            showFilters={true}\n            pagination={{\n              page: 0,\n              pageSize: 10,\n              total: sortedData.length,\n              onPageChange: () => {},\n              onPageSizeChange: () => {},\n            }}\n          />\n          \n          {selectedRows.length > 0 && (\n            <Box sx={{ mt: 2, p: 2, backgroundColor: 'action.hover', borderRadius: 1 }}>\n              <Typography variant=\"body2\">\n                <strong>{selectedRows.length}</strong> row(s) selected. \n                {selectedRows.length === 1 && ' Click the \"Comparison View\" tab to see detailed analysis.'}\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      )}\n\n      {currentTab === 1 && selectedErrorReport && (\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Before/After Comparison\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            Side-by-side comparison of original and corrected text with diff highlighting.\n          </Typography>\n          \n          <Box sx={{ mb: 3, p: 2, backgroundColor: 'action.hover', borderRadius: 1 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Error Report Details\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>ID:</strong> {selectedErrorReport.id} | \n              <strong> Category:</strong> {selectedErrorReport.category} | \n              <strong> Priority:</strong> {selectedErrorReport.priority} | \n              <strong> Status:</strong> {selectedErrorReport.status}\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>Reporter:</strong> {selectedErrorReport.reportedBy}\n              {selectedErrorReport.reviewedBy && (\n                <> | <strong>Reviewer:</strong> {selectedErrorReport.reviewedBy}</>\n              )}\n            </Typography>\n            {selectedErrorReport.comments && (\n              <Typography variant=\"body2\">\n                <strong>Comments:</strong> {selectedErrorReport.comments}\n              </Typography>\n            )}\n          </Box>\n\n          <Divider sx={{ my: 2 }} />\n\n          <BeforeAfterComparison\n            originalText={selectedErrorReport.originalText}\n            correctedText={selectedErrorReport.correctedText || ''}\n            changes={textChanges}\n            onApprove={handleApprove}\n            onReject={handleReject}\n            showActions={selectedErrorReport.status === 'pending' || selectedErrorReport.status === 'in_review'}\n            highlightDifferences={true}\n            disabled={selectedErrorReport.status === 'approved' || selectedErrorReport.status === 'rejected'}\n          />\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default VerificationDashboardPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/features/verification/pages/VerificationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/auth-api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/base-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3317,3320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3317,3320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3503,3506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3503,3506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base API configuration for RTK Query\n * Implements Hexagonal Architecture adapter pattern\n */\n\nimport { createApi, fetchBaseQuery, BaseQueryFn, FetchArgs, FetchBaseQueryError } from '@reduxjs/toolkit/query/react';\nimport { RootState } from '@/app/store';\n\n// API configuration\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';\n\n// Base query with authentication\nconst baseQuery = fetchBaseQuery({\n  baseUrl: API_BASE_URL,\n  prepareHeaders: (headers, { getState }) => {\n    const token = (getState() as RootState).auth.token;\n    \n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    \n    headers.set('content-type', 'application/json');\n    return headers;\n  },\n});\n\n// Base query with re-authentication\nconst baseQueryWithReauth: BaseQueryFn<\n  string | FetchArgs,\n  unknown,\n  FetchBaseQueryError\n> = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions);\n  \n  if (result.error && result.error.status === 401) {\n    // Try to get a new token\n    const refreshResult = await baseQuery(\n      {\n        url: '/auth/refresh',\n        method: 'POST',\n        body: {\n          refreshToken: (api.getState() as RootState).auth.refreshToken,\n        },\n      },\n      api,\n      extraOptions\n    );\n    \n    if (refreshResult.data) {\n      // Store the new token\n      api.dispatch({\n        type: 'auth/setCredentials',\n        payload: refreshResult.data,\n      });\n      \n      // Retry the original query\n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      // Refresh failed, logout user\n      api.dispatch({ type: 'auth/logout' });\n    }\n  }\n  \n  return result;\n};\n\n// Create the base API\nexport const baseApi = createApi({\n  reducerPath: 'api',\n  baseQuery: baseQueryWithReauth,\n  tagTypes: ['User', 'ErrorReport', 'Verification', 'Analytics'],\n  endpoints: () => ({}),\n});\n\n// Service endpoints configuration\nexport const SERVICE_ENDPOINTS = {\n  AUTH: '/api/v1/auth',\n  USER_MANAGEMENT: '/api/v1/users',\n  ERROR_REPORTING: '/api/v1/error-reports',\n  VERIFICATION: '/api/v1/verifications',\n  ANALYTICS: '/api/v1/analytics',\n} as const;\n\n// Base API class for class-based API clients\nexport class BaseApi {\n  protected baseURL: string;\n\n  constructor() {\n    this.baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000';\n  }\n\n  protected getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    // Get token from localStorage (this is a simplified approach)\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n  }\n\n  protected async request<T>(\n    url: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const response = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        ...this.getHeaders(),\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  protected async get<T>(url: string): Promise<T> {\n    return this.request<T>(url, { method: 'GET' });\n  }\n\n  protected async post<T>(url: string, data?: any): Promise<T> {\n    return this.request<T>(url, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  protected async put<T>(url: string, data?: any): Promise<T> {\n    return this.request<T>(url, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  protected async delete<T>(url: string): Promise<T> {\n    return this.request<T>(url, { method: 'DELETE' });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/dashboard-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DashboardWidget' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7525,7528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7525,7528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7543,7546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7543,7546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7571,7574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7571,7574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7749,7752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7749,7752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":290,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":290,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard API client for comprehensive system metrics\n */\n\nimport { BaseApi } from './base-api';\nimport {\n  DashboardMetrics,\n  SpeakerBucketStats,\n  SERMetricsSummary,\n  RAGProcessingSummary,\n  MTValidationSummary,\n  TransitionStatisticsSummary,\n  ServicesHealthStatus,\n  DashboardFilters,\n  DashboardLayout,\n  DashboardWidget,\n  DashboardReport,\n  DashboardAlert,\n  PerformanceMetrics,\n  TimeSeriesData,\n  PieChartData,\n  BarChartData,\n} from '@/domain/types/dashboard';\n\nexport class DashboardApi extends BaseApi {\n  private readonly basePath = '/api/v1/speaker-bucket-management/dashboard';\n\n  /**\n   * Get comprehensive dashboard overview\n   */\n  async getDashboardOverview(filters?: DashboardFilters): Promise<DashboardMetrics> {\n    const params = new URLSearchParams();\n    \n    if (filters) {\n      if (filters.dateRange) {\n        params.append('start_date', filters.dateRange.start);\n        params.append('end_date', filters.dateRange.end);\n      }\n      if (filters.speakers?.length) {\n        params.append('speakers', filters.speakers.join(','));\n      }\n      if (filters.buckets?.length) {\n        params.append('buckets', filters.buckets.join(','));\n      }\n    }\n\n    return this.get<DashboardMetrics>(`${this.basePath}/overview?${params.toString()}`);\n  }\n\n  /**\n   * Get speaker bucket statistics\n   */\n  async getSpeakerBucketStats(filters?: DashboardFilters): Promise<SpeakerBucketStats> {\n    const params = this.buildFilterParams(filters);\n    return this.get<SpeakerBucketStats>(`${this.basePath}/speaker-statistics?${params.toString()}`);\n  }\n\n  /**\n   * Get SER metrics summary\n   */\n  async getSERMetricsSummary(filters?: DashboardFilters): Promise<SERMetricsSummary> {\n    const params = this.buildFilterParams(filters);\n    return this.get<SERMetricsSummary>(`${this.basePath}/ser-metrics?${params.toString()}`);\n  }\n\n  /**\n   * Get RAG processing summary\n   */\n  async getRAGProcessingSummary(filters?: DashboardFilters): Promise<RAGProcessingSummary> {\n    const params = this.buildFilterParams(filters);\n    return this.get<RAGProcessingSummary>(`${this.basePath}/rag-processing?${params.toString()}`);\n  }\n\n  /**\n   * Get MT validation summary\n   */\n  async getMTValidationSummary(filters?: DashboardFilters): Promise<MTValidationSummary> {\n    const params = this.buildFilterParams(filters);\n    return this.get<MTValidationSummary>(`${this.basePath}/mt-validation?${params.toString()}`);\n  }\n\n  /**\n   * Get transition statistics\n   */\n  async getTransitionStatistics(filters?: DashboardFilters): Promise<TransitionStatisticsSummary> {\n    const params = this.buildFilterParams(filters);\n    return this.get<TransitionStatisticsSummary>(`${this.basePath}/transition-statistics?${params.toString()}`);\n  }\n\n  /**\n   * Get services health status\n   */\n  async getServicesHealth(): Promise<ServicesHealthStatus> {\n    return this.get<ServicesHealthStatus>(`${this.basePath}/health/comprehensive`);\n  }\n\n  /**\n   * Get time series data for charts\n   */\n  async getTimeSeriesData(\n    metric: string,\n    filters?: DashboardFilters & {\n      granularity?: 'hour' | 'day' | 'week' | 'month';\n      aggregation?: 'sum' | 'avg' | 'min' | 'max' | 'count';\n    }\n  ): Promise<TimeSeriesData> {\n    const params = this.buildFilterParams(filters);\n    \n    if (filters?.granularity) {\n      params.append('granularity', filters.granularity);\n    }\n    if (filters?.aggregation) {\n      params.append('aggregation', filters.aggregation);\n    }\n\n    return this.get<TimeSeriesData>(`${this.basePath}/charts/timeseries/${metric}?${params.toString()}`);\n  }\n\n  /**\n   * Get pie chart data\n   */\n  async getPieChartData(\n    metric: string,\n    filters?: DashboardFilters\n  ): Promise<PieChartData> {\n    const params = this.buildFilterParams(filters);\n    return this.get<PieChartData>(`${this.basePath}/charts/pie/${metric}?${params.toString()}`);\n  }\n\n  /**\n   * Get bar chart data\n   */\n  async getBarChartData(\n    metric: string,\n    filters?: DashboardFilters & {\n      groupBy?: string;\n      limit?: number;\n    }\n  ): Promise<BarChartData> {\n    const params = this.buildFilterParams(filters);\n    \n    if (filters?.groupBy) {\n      params.append('group_by', filters.groupBy);\n    }\n    if (filters?.limit) {\n      params.append('limit', filters.limit.toString());\n    }\n\n    return this.get<BarChartData>(`${this.basePath}/charts/bar/${metric}?${params.toString()}`);\n  }\n\n  /**\n   * Get dashboard layouts\n   */\n  async getDashboardLayouts(): Promise<DashboardLayout[]> {\n    return this.get<DashboardLayout[]>(`${this.basePath}/layouts`);\n  }\n\n  /**\n   * Get specific dashboard layout\n   */\n  async getDashboardLayout(layoutId: string): Promise<DashboardLayout> {\n    return this.get<DashboardLayout>(`${this.basePath}/layouts/${layoutId}`);\n  }\n\n  /**\n   * Save dashboard layout\n   */\n  async saveDashboardLayout(layout: Omit<DashboardLayout, 'id' | 'createdAt' | 'updatedAt'>): Promise<DashboardLayout> {\n    return this.post<DashboardLayout>(`${this.basePath}/layouts`, layout);\n  }\n\n  /**\n   * Update dashboard layout\n   */\n  async updateDashboardLayout(layoutId: string, layout: Partial<DashboardLayout>): Promise<DashboardLayout> {\n    return this.put<DashboardLayout>(`${this.basePath}/layouts/${layoutId}`, layout);\n  }\n\n  /**\n   * Delete dashboard layout\n   */\n  async deleteDashboardLayout(layoutId: string): Promise<void> {\n    await this.delete(`${this.basePath}/layouts/${layoutId}`);\n  }\n\n  /**\n   * Get dashboard alerts\n   */\n  async getDashboardAlerts(filters?: {\n    severity?: string;\n    acknowledged?: boolean;\n    limit?: number;\n  }): Promise<DashboardAlert[]> {\n    const params = new URLSearchParams();\n    \n    if (filters?.severity) {\n      params.append('severity', filters.severity);\n    }\n    if (filters?.acknowledged !== undefined) {\n      params.append('acknowledged', filters.acknowledged.toString());\n    }\n    if (filters?.limit) {\n      params.append('limit', filters.limit.toString());\n    }\n\n    return this.get<DashboardAlert[]>(`${this.basePath}/alerts?${params.toString()}`);\n  }\n\n  /**\n   * Acknowledge dashboard alert\n   */\n  async acknowledgeAlert(alertId: string): Promise<DashboardAlert> {\n    return this.post<DashboardAlert>(`${this.basePath}/alerts/${alertId}/acknowledge`);\n  }\n\n  /**\n   * Get performance metrics\n   */\n  async getPerformanceMetrics(): Promise<PerformanceMetrics> {\n    return this.get<PerformanceMetrics>(`${this.basePath}/performance`);\n  }\n\n  /**\n   * Generate dashboard report\n   */\n  async generateReport(reportConfig: {\n    title: string;\n    filters: DashboardFilters;\n    widgets: string[];\n    format: 'pdf' | 'excel' | 'csv';\n  }): Promise<Blob> {\n    const response = await fetch(\n      `${this.baseURL}${this.basePath}/reports/generate`,\n      {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(reportConfig),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Report generation failed: ${response.statusText}`);\n    }\n\n    return response.blob();\n  }\n\n  /**\n   * Get saved reports\n   */\n  async getSavedReports(): Promise<DashboardReport[]> {\n    return this.get<DashboardReport[]>(`${this.basePath}/reports`);\n  }\n\n  /**\n   * Save report configuration\n   */\n  async saveReportConfig(report: Omit<DashboardReport, 'id' | 'createdAt'>): Promise<DashboardReport> {\n    return this.post<DashboardReport>(`${this.basePath}/reports`, report);\n  }\n\n  /**\n   * Get drill-down data\n   */\n  async getDrillDownData(\n    widget: string,\n    filters: Record<string, any>\n  ): Promise<any> {\n    return this.post<any>(`${this.basePath}/drill-down/${widget}`, { filters });\n  }\n\n  /**\n   * Get real-time updates (WebSocket simulation)\n   */\n  async subscribeToUpdates(\n    callback: (update: any) => void,\n    filters?: DashboardFilters\n  ): Promise<() => void> {\n    // In a real implementation, this would establish a WebSocket connection\n    // For now, we'll simulate with polling\n    const interval = setInterval(async () => {\n      try {\n        const metrics = await this.getDashboardOverview(filters);\n        callback({\n          type: 'dashboard_update',\n          data: metrics,\n          timestamp: new Date().toISOString()\n        });\n      } catch (error) {\n        // Handle error silently or call error callback\n      }\n    }, 30000); // Poll every 30 seconds\n\n    // Return unsubscribe function\n    return () => clearInterval(interval);\n  }\n\n  /**\n   * Export dashboard data\n   */\n  async exportDashboardData(\n    format: 'json' | 'csv' | 'excel',\n    filters?: DashboardFilters\n  ): Promise<Blob> {\n    const params = this.buildFilterParams(filters);\n    params.append('format', format);\n\n    const response = await fetch(\n      `${this.baseURL}${this.basePath}/export?${params.toString()}`,\n      {\n        method: 'GET',\n        headers: this.getHeaders(),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n\n    return response.blob();\n  }\n\n  /**\n   * Get dashboard configuration\n   */\n  async getDashboardConfig(): Promise<{\n    refresh_intervals: number[];\n    available_metrics: string[];\n    chart_types: string[];\n    export_formats: string[];\n  }> {\n    return this.get(`${this.basePath}/config`);\n  }\n\n  /**\n   * Helper method to build filter parameters\n   */\n  private buildFilterParams(filters?: DashboardFilters): URLSearchParams {\n    const params = new URLSearchParams();\n    \n    if (filters) {\n      if (filters.dateRange) {\n        params.append('start_date', filters.dateRange.start);\n        params.append('end_date', filters.dateRange.end);\n        if (filters.dateRange.preset) {\n          params.append('date_preset', filters.dateRange.preset);\n        }\n      }\n      if (filters.speakers?.length) {\n        params.append('speakers', filters.speakers.join(','));\n      }\n      if (filters.buckets?.length) {\n        params.append('buckets', filters.buckets.join(','));\n      }\n      if (filters.services?.length) {\n        params.append('services', filters.services.join(','));\n      }\n      if (filters.mtUsers?.length) {\n        params.append('mt_users', filters.mtUsers.join(','));\n      }\n    }\n\n    return params;\n  }\n}\n\n// Create singleton instance\nexport const dashboardApi = new DashboardApi();\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/error-report-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Report API adapter\n * Implements Hexagonal Architecture adapter pattern for error reporting operations\n */\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { SERVICE_ENDPOINTS } from './base-api';\nimport type {\n  ErrorReport,\n  SubmitErrorReportRequest,\n  SearchErrorsRequest,\n  UpdateErrorReportRequest,\n  PaginatedResponse,\n} from '@domain/types';\n\n// Base query for error report API\nconst baseQuery = fetchBaseQuery({\n  baseUrl: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000',\n  prepareHeaders: (headers, { getState }) => {\n    const token = (getState() as any).auth.token;\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    headers.set('content-type', 'application/json');\n    return headers;\n  },\n});\n\nexport const errorReportApi = createApi({\n  reducerPath: 'errorReportApi',\n  baseQuery,\n  tagTypes: ['ErrorReport'],\n  endpoints: (builder) => ({\n    // Submit error report\n    submitErrorReport: builder.mutation<{ errorId: string }, SubmitErrorReportRequest>({\n      query: (errorReport) => ({\n        url: `${SERVICE_ENDPOINTS.ERROR_REPORTING}`,\n        method: 'POST',\n        body: errorReport,\n      }),\n      invalidatesTags: ['ErrorReport'],\n    }),\n\n    // Search error reports\n    searchErrorReports: builder.query<PaginatedResponse<ErrorReport>, SearchErrorsRequest>({\n      query: (searchRequest) => ({\n        url: `${SERVICE_ENDPOINTS.ERROR_REPORTING}/search`,\n        method: 'POST',\n        body: searchRequest,\n      }),\n      providesTags: ['ErrorReport'],\n    }),\n\n    // Get error report by ID\n    getErrorReport: builder.query<ErrorReport, string>({\n      query: (errorId) => ({\n        url: `${SERVICE_ENDPOINTS.ERROR_REPORTING}/${errorId}`,\n        method: 'GET',\n      }),\n      providesTags: ['ErrorReport'],\n    }),\n\n    // Update error report\n    updateErrorReport: builder.mutation<ErrorReport, UpdateErrorReportRequest>({\n      query: ({ errorId, ...updateData }) => ({\n        url: `${SERVICE_ENDPOINTS.ERROR_REPORTING}/${errorId}`,\n        method: 'PATCH',\n        body: updateData,\n      }),\n      invalidatesTags: ['ErrorReport'],\n    }),\n\n    // Delete error report\n    deleteErrorReport: builder.mutation<void, string>({\n      query: (errorId) => ({\n        url: `${SERVICE_ENDPOINTS.ERROR_REPORTING}/${errorId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['ErrorReport'],\n    }),\n  }),\n});\n\nexport const {\n  useSubmitErrorReportMutation,\n  useSearchErrorReportsQuery,\n  useGetErrorReportQuery,\n  useUpdateErrorReportMutation,\n  useDeleteErrorReportMutation,\n} = errorReportApi;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/health-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthHistoryEntry' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthCheckApiResponse' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SystemHealthApiResponse' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DiagnosticsApiResponse' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthHistoryApiResponse' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":393,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":393,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":455,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":455,"endColumn":23}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Health Check API client\n * Implements Hexagonal Architecture adapter pattern for health monitoring operations\n */\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { BaseApi } from './base-api';\nimport type {\n  ServiceHealthResponse,\n  HealthCheckResult,\n  SystemHealthOverview,\n  DiagnosticInfo,\n  HealthHistoryEntry,\n  ServiceConfig,\n  HealthReportExport,\n  HealthCheckApiResponse,\n  SystemHealthApiResponse,\n  DiagnosticsApiResponse,\n  HealthHistoryApiResponse,\n} from '@features/system-health/types/health-types';\n\n// Service configurations for all backend services\nexport const SERVICE_CONFIGS: Record<string, ServiceConfig> = {\n  'error-reporting': {\n    name: 'error-reporting',\n    displayName: 'Error Reporting Service',\n    url: 'http://localhost:8000',\n    port: 8000,\n    healthEndpoint: '/health',\n    timeout: 5000,\n    expectedResponseTime: 200,\n    criticalResponseTime: 1000,\n  },\n  'user-management': {\n    name: 'user-management',\n    displayName: 'User Management Service',\n    url: 'http://localhost:8001',\n    port: 8001,\n    healthEndpoint: '/health',\n    timeout: 5000,\n    expectedResponseTime: 200,\n    criticalResponseTime: 1000,\n  },\n  'rag-integration': {\n    name: 'rag-integration',\n    displayName: 'RAG Integration Service',\n    url: 'http://localhost:8002',\n    port: 8002,\n    healthEndpoint: '/health',\n    timeout: 5000,\n    expectedResponseTime: 300,\n    criticalResponseTime: 1500,\n  },\n  'correction-engine': {\n    name: 'correction-engine',\n    displayName: 'Correction Engine Service',\n    url: 'http://localhost:8003',\n    port: 8003,\n    healthEndpoint: '/health',\n    timeout: 5000,\n    expectedResponseTime: 250,\n    criticalResponseTime: 1200,\n  },\n  'verification': {\n    name: 'verification',\n    displayName: 'Verification Service',\n    url: 'http://localhost:8004',\n    port: 8004,\n    healthEndpoint: '/health',\n    timeout: 5000,\n    expectedResponseTime: 200,\n    criticalResponseTime: 1000,\n  },\n};\n\n// RTK Query API for health monitoring\nexport const healthApi = createApi({\n  reducerPath: 'healthApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: '',\n    timeout: 10000,\n    prepareHeaders: (headers) => {\n      headers.set('content-type', 'application/json');\n      return headers;\n    },\n  }),\n  tagTypes: ['Health', 'Diagnostics'],\n  endpoints: (builder) => ({\n    // Check health of a specific service\n    checkServiceHealth: builder.query<HealthCheckResult, string>({\n      queryFn: async (serviceName) => {\n        const config = SERVICE_CONFIGS[serviceName];\n        if (!config) {\n          return {\n            error: {\n              status: 'CUSTOM_ERROR',\n              error: `Unknown service: ${serviceName}`,\n            },\n          };\n        }\n\n        const startTime = Date.now();\n        try {\n          const response = await fetch(`${config.url}${config.healthEndpoint}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            signal: AbortSignal.timeout(config.timeout),\n          });\n\n          const responseTime = Date.now() - startTime;\n          \n          if (!response.ok) {\n            return {\n              data: {\n                service: serviceName,\n                status: 'error' as const,\n                responseTime,\n                timestamp: new Date().toISOString(),\n                error: `HTTP ${response.status}: ${response.statusText}`,\n              },\n            };\n          }\n\n          const data: ServiceHealthResponse = await response.json();\n          \n          // Determine status based on response time and service response\n          let status = data.status || 'unknown';\n          if (status === 'healthy' && responseTime > config.criticalResponseTime) {\n            status = 'degraded';\n          }\n\n          return {\n            data: {\n              service: serviceName,\n              status,\n              responseTime,\n              timestamp: new Date().toISOString(),\n              data,\n            },\n          };\n        } catch (error) {\n          const responseTime = Date.now() - startTime;\n          return {\n            data: {\n              service: serviceName,\n              status: 'error' as const,\n              responseTime,\n              timestamp: new Date().toISOString(),\n              error: error instanceof Error ? error.message : 'Unknown error',\n            },\n          };\n        }\n      },\n      providesTags: (result, error, serviceName) => [\n        { type: 'Health', id: serviceName },\n      ],\n    }),\n\n    // Check health of all services\n    checkAllServicesHealth: builder.query<Record<string, HealthCheckResult>, void>({\n      queryFn: async () => {\n        const results: Record<string, HealthCheckResult> = {};\n        \n        // Check all services in parallel\n        const healthChecks = Object.keys(SERVICE_CONFIGS).map(async (serviceName) => {\n          const config = SERVICE_CONFIGS[serviceName];\n          const startTime = Date.now();\n          \n          try {\n            const response = await fetch(`${config.url}${config.healthEndpoint}`, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              signal: AbortSignal.timeout(config.timeout),\n            });\n\n            const responseTime = Date.now() - startTime;\n            \n            if (!response.ok) {\n              results[serviceName] = {\n                service: serviceName,\n                status: 'error',\n                responseTime,\n                timestamp: new Date().toISOString(),\n                error: `HTTP ${response.status}: ${response.statusText}`,\n              };\n              return;\n            }\n\n            const data: ServiceHealthResponse = await response.json();\n            \n            let status = data.status || 'unknown';\n            if (status === 'healthy' && responseTime > config.criticalResponseTime) {\n              status = 'degraded';\n            }\n\n            results[serviceName] = {\n              service: serviceName,\n              status,\n              responseTime,\n              timestamp: new Date().toISOString(),\n              data,\n            };\n          } catch (error) {\n            const responseTime = Date.now() - startTime;\n            results[serviceName] = {\n              service: serviceName,\n              status: 'error',\n              responseTime,\n              timestamp: new Date().toISOString(),\n              error: error instanceof Error ? error.message : 'Unknown error',\n            };\n          }\n        });\n\n        await Promise.all(healthChecks);\n        return { data: results };\n      },\n      providesTags: ['Health'],\n    }),\n\n    // Get system health overview\n    getSystemHealthOverview: builder.query<SystemHealthOverview, void>({\n      queryFn: async (_, { dispatch }) => {\n        // Get all services health first\n        const healthResult = await dispatch(\n          healthApi.endpoints.checkAllServicesHealth.initiate()\n        );\n\n        if (healthResult.error) {\n          return { error: healthResult.error };\n        }\n\n        const services = healthResult.data || {};\n        const servicesList = Object.values(services);\n        \n        const totalServices = servicesList.length;\n        const healthyServices = servicesList.filter(s => s.status === 'healthy').length;\n        const degradedServices = servicesList.filter(s => s.status === 'degraded').length;\n        const errorServices = servicesList.filter(s => s.status === 'error').length;\n        const unknownServices = servicesList.filter(s => s.status === 'unknown').length;\n\n        // Calculate overall status\n        let overallStatus: 'healthy' | 'degraded' | 'error' | 'unknown' = 'healthy';\n        if (errorServices > 0) {\n          overallStatus = 'error';\n        } else if (degradedServices > 0 || unknownServices > 0) {\n          overallStatus = 'degraded';\n        }\n\n        // Calculate average response time\n        const avgResponseTime = servicesList.length > 0\n          ? servicesList.reduce((sum, s) => sum + s.responseTime, 0) / servicesList.length\n          : 0;\n\n        // Calculate overall uptime (simplified - in real implementation this would come from historical data)\n        const overallUptime = totalServices > 0 ? (healthyServices / totalServices) * 100 : 0;\n\n        return {\n          data: {\n            overall_status: overallStatus,\n            total_services: totalServices,\n            healthy_services: healthyServices,\n            degraded_services: degradedServices,\n            error_services: errorServices,\n            unknown_services: unknownServices,\n            last_updated: new Date().toISOString(),\n            average_response_time: Math.round(avgResponseTime),\n            overall_uptime: Math.round(overallUptime * 100) / 100,\n          },\n        };\n      },\n      providesTags: ['Health'],\n    }),\n  }),\n});\n\n// Class-based API client for additional functionality\nexport class HealthApiClient extends BaseApi {\n  /**\n   * Run comprehensive diagnostics for a service\n   */\n  async runDiagnostics(serviceName: string): Promise<DiagnosticInfo> {\n    const config = SERVICE_CONFIGS[serviceName];\n    if (!config) {\n      throw new Error(`Unknown service: ${serviceName}`);\n    }\n\n    const diagnostics: DiagnosticInfo = {\n      service: serviceName,\n      connectivity: {\n        can_reach: false,\n        dns_resolution: false,\n        port_open: false,\n      },\n      performance: {\n        response_time: 0,\n        error_rate: 0,\n      },\n      dependencies: {},\n    };\n\n    try {\n      // Test basic connectivity\n      const startTime = Date.now();\n      const response = await fetch(`${config.url}${config.healthEndpoint}`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(config.timeout),\n      });\n      \n      const responseTime = Date.now() - startTime;\n      \n      diagnostics.connectivity.can_reach = true;\n      diagnostics.connectivity.dns_resolution = true;\n      diagnostics.connectivity.port_open = response.ok || response.status < 500;\n      diagnostics.performance.response_time = responseTime;\n\n      if (response.ok) {\n        const healthData: ServiceHealthResponse = await response.json();\n        diagnostics.system_info = {\n          version: healthData.version,\n          uptime: 'N/A', // Would need additional endpoint\n          environment: 'production', // Would come from service\n        };\n\n        // Extract dependency information if available\n        if (healthData.details) {\n          // Map service-specific details to dependencies\n          if (healthData.details.database_status) {\n            diagnostics.dependencies.database = \n              healthData.details.database_status === 'healthy' ? 'healthy' : 'error';\n          }\n          if (healthData.details.cache_status) {\n            diagnostics.dependencies.cache = \n              healthData.details.cache_status === 'healthy' ? 'healthy' : 'error';\n          }\n        }\n      }\n    } catch (error) {\n      diagnostics.connectivity.can_reach = false;\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        diagnostics.connectivity.dns_resolution = false;\n      }\n    }\n\n    return diagnostics;\n  }\n\n  /**\n   * Export health report\n   */\n  async exportHealthReport(\n    type: 'summary' | 'detailed' | 'historical',\n    timeRange?: { start: string; end: string }\n  ): Promise<HealthReportExport> {\n    // This would typically call a backend endpoint\n    // For now, we'll generate a client-side report\n    \n    const timestamp = new Date().toISOString();\n    \n    // Get current health data\n    const healthChecks = await Promise.all(\n      Object.keys(SERVICE_CONFIGS).map(async (serviceName) => {\n        try {\n          const result = await this.checkServiceHealth(serviceName);\n          return [serviceName, result];\n        } catch (error) {\n          return [serviceName, {\n            service: serviceName,\n            status: 'error' as const,\n            responseTime: 0,\n            timestamp,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          }];\n        }\n      })\n    );\n\n    const services = Object.fromEntries(healthChecks.map(([name, result]) => [\n      name,\n      result.data || {\n        status: result.status,\n        version: 'unknown',\n        timestamp: result.timestamp,\n        service: result.service,\n      }\n    ]));\n\n    // Generate overview\n    const servicesList = Object.values(healthChecks.map(([_, result]) => result));\n    const overview: SystemHealthOverview = {\n      overall_status: servicesList.some(s => s.status === 'error') ? 'error' : \n                     servicesList.some(s => s.status === 'degraded') ? 'degraded' : 'healthy',\n      total_services: servicesList.length,\n      healthy_services: servicesList.filter(s => s.status === 'healthy').length,\n      degraded_services: servicesList.filter(s => s.status === 'degraded').length,\n      error_services: servicesList.filter(s => s.status === 'error').length,\n      unknown_services: servicesList.filter(s => s.status === 'unknown').length,\n      last_updated: timestamp,\n      average_response_time: servicesList.reduce((sum, s) => sum + s.responseTime, 0) / servicesList.length,\n      overall_uptime: 99.5, // Would come from historical data\n    };\n\n    return {\n      generated_at: timestamp,\n      report_type: type,\n      time_range: timeRange,\n      system_overview: overview,\n      services,\n      diagnostics: type === 'detailed' ? await this.getAllDiagnostics() : undefined,\n    };\n  }\n\n  private async checkServiceHealth(serviceName: string): Promise<HealthCheckResult> {\n    const config = SERVICE_CONFIGS[serviceName];\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${config.url}${config.healthEndpoint}`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(config.timeout),\n      });\n\n      const responseTime = Date.now() - startTime;\n      const data: ServiceHealthResponse = await response.json();\n\n      return {\n        service: serviceName,\n        status: data.status || 'unknown',\n        responseTime,\n        timestamp: new Date().toISOString(),\n        data,\n      };\n    } catch (error) {\n      return {\n        service: serviceName,\n        status: 'error',\n        responseTime: Date.now() - startTime,\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private async getAllDiagnostics(): Promise<Record<string, DiagnosticInfo>> {\n    const diagnostics: Record<string, DiagnosticInfo> = {};\n    \n    await Promise.all(\n      Object.keys(SERVICE_CONFIGS).map(async (serviceName) => {\n        try {\n          diagnostics[serviceName] = await this.runDiagnostics(serviceName);\n        } catch (error) {\n          // Skip failed diagnostics\n        }\n      })\n    );\n\n    return diagnostics;\n  }\n}\n\n// Export hooks\nexport const {\n  useCheckServiceHealthQuery,\n  useCheckAllServicesHealthQuery,\n  useGetSystemHealthOverviewQuery,\n  useLazyCheckServiceHealthQuery,\n  useLazyCheckAllServicesHealthQuery,\n  useLazyGetSystemHealthOverviewQuery,\n} = healthApi;\n\n// Export singleton instance\nexport const healthApiClient = new HealthApiClient();\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/mt-validation-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ValidationExportData' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5131,5134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5131,5134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5158,5161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5158,5161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6429,6432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6429,6432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6663,6666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6663,6666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":288,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7571,7574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7571,7574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7802,7805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7802,7805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7822,7825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7822,7825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7983,7986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7983,7986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8200,8203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8200,8203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":328,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":328,"endColumn":21}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MT Validation API client\n */\n\nimport { BaseApi } from './base-api';\nimport {\n  ValidationSession,\n  ValidationTestData,\n  MTFeedback,\n  ValidationItem,\n  StartValidationSessionRequest,\n  SubmitMTFeedbackRequest,\n  CompleteValidationSessionRequest,\n  ValidationSessionSummary,\n  MTUserStatistics,\n  MTValidationFilters,\n  ValidationAnalytics,\n  ValidationExportData,\n  SERComparison\n} from '@/domain/types/mt-validation';\n\nexport class MTValidationApi extends BaseApi {\n  private readonly basePath = '/api/v1/mt-validation';\n\n  /**\n   * Start a new MT validation session\n   */\n  async startValidationSession(request: StartValidationSessionRequest): Promise<ValidationSession> {\n    return this.post<ValidationSession>(`${this.basePath}/sessions`, request);\n  }\n\n  /**\n   * Get validation session by ID\n   */\n  async getValidationSession(sessionId: string): Promise<ValidationSession> {\n    return this.get<ValidationSession>(`${this.basePath}/sessions/${sessionId}`);\n  }\n\n  /**\n   * Get test data for validation session\n   */\n  async getValidationTestData(\n    sessionId: string,\n    limit?: number\n  ): Promise<ValidationTestData[]> {\n    const params = new URLSearchParams();\n    if (limit) params.append('limit', limit.toString());\n    \n    return this.get<ValidationTestData[]>(\n      `${this.basePath}/sessions/${sessionId}/test-data?${params.toString()}`\n    );\n  }\n\n  /**\n   * Submit MT feedback for validation item\n   */\n  async submitMTFeedback(\n    sessionId: string,\n    feedback: SubmitMTFeedbackRequest\n  ): Promise<MTFeedback> {\n    return this.post<MTFeedback>(\n      `${this.basePath}/sessions/${sessionId}/feedback`,\n      feedback\n    );\n  }\n\n  /**\n   * Complete validation session\n   */\n  async completeValidationSession(\n    sessionId: string,\n    request: CompleteValidationSessionRequest\n  ): Promise<ValidationSession> {\n    return this.post<ValidationSession>(\n      `${this.basePath}/sessions/${sessionId}/complete`,\n      request\n    );\n  }\n\n  /**\n   * Get validation sessions with filters\n   */\n  async getValidationSessions(filters: MTValidationFilters = {}): Promise<ValidationSession[]> {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, value.toString());\n      }\n    });\n\n    return this.get<ValidationSession[]>(`${this.basePath}/sessions?${params.toString()}`);\n  }\n\n  /**\n   * Get session feedback\n   */\n  async getSessionFeedback(sessionId: string): Promise<MTFeedback[]> {\n    return this.get<MTFeedback[]>(`${this.basePath}/sessions/${sessionId}/feedback`);\n  }\n\n  /**\n   * Get SER comparison for speaker\n   */\n  async getSERComparison(request: {\n    speaker_id: string;\n    historical_data_ids: string[];\n    include_individual_metrics?: boolean;\n    include_summary_statistics?: boolean;\n  }): Promise<SERComparison> {\n    return this.post<SERComparison>(`${this.basePath}/ser-comparison`, request);\n  }\n\n  /**\n   * Get validation session summary\n   */\n  async getValidationSessionSummary(sessionId: string): Promise<ValidationSessionSummary> {\n    return this.get<ValidationSessionSummary>(`${this.basePath}/sessions/${sessionId}/summary`);\n  }\n\n  /**\n   * Get MT user statistics\n   */\n  async getMTUserStatistics(mtUserId: string): Promise<MTUserStatistics> {\n    return this.get<MTUserStatistics>(`${this.basePath}/statistics/mt-user/${mtUserId}`);\n  }\n\n  /**\n   * Get validation analytics for session\n   */\n  async getValidationAnalytics(sessionId: string): Promise<ValidationAnalytics> {\n    return this.get<ValidationAnalytics>(`${this.basePath}/sessions/${sessionId}/analytics`);\n  }\n\n  /**\n   * Export validation session data\n   */\n  async exportValidationSession(\n    sessionId: string,\n    format: 'csv' | 'excel' | 'pdf' | 'json' = 'csv'\n  ): Promise<Blob> {\n    const response = await fetch(\n      `${this.baseURL}${this.basePath}/sessions/${sessionId}/export?format=${format}`,\n      {\n        method: 'GET',\n        headers: this.getHeaders(),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n\n    return response.blob();\n  }\n\n  /**\n   * Get validation item by ID\n   */\n  async getValidationItem(sessionId: string, itemId: string): Promise<ValidationItem> {\n    return this.get<ValidationItem>(`${this.basePath}/sessions/${sessionId}/items/${itemId}`);\n  }\n\n  /**\n   * Update validation item status\n   */\n  async updateValidationItemStatus(\n    sessionId: string,\n    itemId: string,\n    status: string\n  ): Promise<ValidationItem> {\n    return this.put<ValidationItem>(\n      `${this.basePath}/sessions/${sessionId}/items/${itemId}/status`,\n      { status }\n    );\n  }\n\n  /**\n   * Skip validation item\n   */\n  async skipValidationItem(\n    sessionId: string,\n    itemId: string,\n    reason?: string\n  ): Promise<ValidationItem> {\n    return this.post<ValidationItem>(\n      `${this.basePath}/sessions/${sessionId}/items/${itemId}/skip`,\n      { reason }\n    );\n  }\n\n  /**\n   * Get validation statistics summary\n   */\n  async getValidationStatistics(): Promise<any> {\n    return this.get<any>(`${this.basePath}/statistics/summary`);\n  }\n\n  /**\n   * Pause validation session\n   */\n  async pauseValidationSession(sessionId: string): Promise<ValidationSession> {\n    return this.post<ValidationSession>(`${this.basePath}/sessions/${sessionId}/pause`);\n  }\n\n  /**\n   * Resume validation session\n   */\n  async resumeValidationSession(sessionId: string): Promise<ValidationSession> {\n    return this.post<ValidationSession>(`${this.basePath}/sessions/${sessionId}/resume`);\n  }\n\n  /**\n   * Cancel validation session\n   */\n  async cancelValidationSession(\n    sessionId: string,\n    reason?: string\n  ): Promise<ValidationSession> {\n    return this.post<ValidationSession>(\n      `${this.basePath}/sessions/${sessionId}/cancel`,\n      { reason }\n    );\n  }\n\n  /**\n   * Get validation progress\n   */\n  async getValidationProgress(sessionId: string): Promise<{\n    session_id: string;\n    total_items: number;\n    completed_items: number;\n    progress_percentage: number;\n    estimated_time_remaining_minutes: number;\n    current_item_index: number;\n  }> {\n    return this.get(`${this.basePath}/sessions/${sessionId}/progress`);\n  }\n\n  /**\n   * Save validation preferences\n   */\n  async saveValidationPreferences(\n    mtUserId: string,\n    preferences: Record<string, any>\n  ): Promise<void> {\n    await this.post(`${this.basePath}/users/${mtUserId}/preferences`, preferences);\n  }\n\n  /**\n   * Get validation preferences\n   */\n  async getValidationPreferences(mtUserId: string): Promise<Record<string, any>> {\n    return this.get(`${this.basePath}/users/${mtUserId}/preferences`);\n  }\n\n  /**\n   * Calculate text differences\n   */\n  async calculateTextDifferences(\n    originalText: string,\n    correctedText: string,\n    options?: {\n      algorithm?: 'myers' | 'patience' | 'histogram';\n      context_lines?: number;\n      ignore_whitespace?: boolean;\n    }\n  ): Promise<Array<{\n    type: 'equal' | 'insert' | 'delete' | 'replace';\n    originalText: string;\n    correctedText: string;\n    position: { start: number; end: number };\n  }>> {\n    return this.post(`${this.basePath}/text-differences`, {\n      original_text: originalText,\n      corrected_text: correctedText,\n      options: options || {}\n    });\n  }\n\n  /**\n   * Get validation templates\n   */\n  async getValidationTemplates(): Promise<Array<{\n    template_id: string;\n    name: string;\n    description: string;\n    default_settings: Record<string, any>;\n  }>> {\n    return this.get(`${this.basePath}/templates`);\n  }\n\n  /**\n   * Create validation template\n   */\n  async createValidationTemplate(template: {\n    name: string;\n    description: string;\n    settings: Record<string, any>;\n  }): Promise<any> {\n    return this.post(`${this.basePath}/templates`, template);\n  }\n\n  /**\n   * Health check for MT validation service\n   */\n  async checkHealth(): Promise<any> {\n    return this.get(`${this.basePath}/health/check`);\n  }\n\n  /**\n   * Get real-time session updates (WebSocket simulation)\n   */\n  async subscribeToSessionUpdates(\n    sessionId: string,\n    callback: (update: any) => void\n  ): Promise<() => void> {\n    // In a real implementation, this would establish a WebSocket connection\n    // For now, we'll simulate with polling\n    const interval = setInterval(async () => {\n      try {\n        const progress = await this.getValidationProgress(sessionId);\n        callback({\n          type: 'progress_update',\n          data: progress,\n          timestamp: new Date().toISOString()\n        });\n      } catch (error) {\n        // Handle error silently or call error callback\n      }\n    }, 5000); // Poll every 5 seconds\n\n    // Return unsubscribe function\n    return () => clearInterval(interval);\n  }\n}\n\n// Create singleton instance\nexport const mtValidationApi = new MTValidationApi();\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/speaker-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TransitionRequestFormData' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiResponse' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PaginatedResponse' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5080,5083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5080,5083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5107,5110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5107,5110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6408,6411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6408,6411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6645,6648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6645,6648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6889,6892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6889,6892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6916,6919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6916,6919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7073,7076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7073,7076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7100,7103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7100,7103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7364,7367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7364,7367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Speaker management API client\n */\n\nimport { BaseApi } from './base-api';\nimport {\n  Speaker,\n  SpeakerListResponse,\n  SpeakerSearchParams,\n  SpeakerFormData,\n  BucketTransitionRequest,\n  CreateTransitionRequest,\n  TransitionRequestFormData,\n  SpeakerBucketStats,\n  ComprehensiveSpeakerView,\n  DashboardMetrics,\n  ApiResponse,\n  PaginatedResponse\n} from '@/domain/types/speaker';\n\nexport class SpeakerApi extends BaseApi {\n  private readonly basePath = '/api/v1';\n\n  /**\n   * Search speakers with filters and pagination\n   */\n  async searchSpeakers(params: SpeakerSearchParams = {}): Promise<SpeakerListResponse> {\n    const queryParams = new URLSearchParams();\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        queryParams.append(key, value.toString());\n      }\n    });\n\n    const response = await this.get<SpeakerListResponse>(\n      `${this.basePath}/speakers?${queryParams.toString()}`\n    );\n    \n    return response;\n  }\n\n  /**\n   * Get speaker by ID\n   */\n  async getSpeakerById(speakerId: string): Promise<Speaker> {\n    return this.get<Speaker>(`${this.basePath}/speakers/${speakerId}`);\n  }\n\n  /**\n   * Get speaker by external identifier\n   */\n  async getSpeakerByIdentifier(identifier: string): Promise<Speaker> {\n    return this.get<Speaker>(`${this.basePath}/speakers/identifier/${identifier}`);\n  }\n\n  /**\n   * Create a new speaker\n   */\n  async createSpeaker(speakerData: SpeakerFormData): Promise<Speaker> {\n    return this.post<Speaker>(`${this.basePath}/speakers`, speakerData);\n  }\n\n  /**\n   * Update speaker information\n   */\n  async updateSpeaker(speakerId: string, speakerData: Partial<SpeakerFormData>): Promise<Speaker> {\n    return this.put<Speaker>(`${this.basePath}/speakers/${speakerId}`, speakerData);\n  }\n\n  /**\n   * Get speakers by bucket\n   */\n  async getSpeakersByBucket(bucket: string): Promise<Speaker[]> {\n    return this.get<Speaker[]>(`${this.basePath}/speakers/bucket/${bucket}`);\n  }\n\n  /**\n   * Get speakers needing transition\n   */\n  async getSpeakersNeedingTransition(): Promise<Speaker[]> {\n    return this.get<Speaker[]>(`${this.basePath}/speakers/transitions/needed`);\n  }\n\n  /**\n   * Update speaker statistics\n   */\n  async updateSpeakerStatistics(speakerId: string): Promise<Speaker> {\n    return this.post<Speaker>(`${this.basePath}/speakers/${speakerId}/statistics/update`);\n  }\n\n  /**\n   * Get bucket statistics\n   */\n  async getBucketStatistics(): Promise<SpeakerBucketStats> {\n    return this.get<SpeakerBucketStats>(`${this.basePath}/speakers/statistics/buckets`);\n  }\n\n  // Bucket Transition Management\n\n  /**\n   * Create bucket transition request\n   */\n  async createTransitionRequest(requestData: CreateTransitionRequest): Promise<BucketTransitionRequest> {\n    return this.post<BucketTransitionRequest>(`${this.basePath}/bucket-transitions`, requestData);\n  }\n\n  /**\n   * Get transition requests with filters\n   */\n  async getTransitionRequests(params: {\n    status?: string;\n    speaker_id?: string;\n    urgent_only?: boolean;\n    limit?: number;\n  } = {}): Promise<BucketTransitionRequest[]> {\n    const queryParams = new URLSearchParams();\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        queryParams.append(key, value.toString());\n      }\n    });\n\n    return this.get<BucketTransitionRequest[]>(\n      `${this.basePath}/bucket-transitions?${queryParams.toString()}`\n    );\n  }\n\n  /**\n   * Get pending transition requests\n   */\n  async getPendingTransitionRequests(): Promise<BucketTransitionRequest[]> {\n    return this.get<BucketTransitionRequest[]>(`${this.basePath}/bucket-transitions/pending`);\n  }\n\n  /**\n   * Get transition request by ID\n   */\n  async getTransitionRequestById(requestId: string): Promise<BucketTransitionRequest> {\n    return this.get<BucketTransitionRequest>(`${this.basePath}/bucket-transitions/${requestId}`);\n  }\n\n  /**\n   * Approve transition request\n   */\n  async approveTransitionRequest(\n    requestId: string, \n    approvalData: { approved_by: string; approval_notes?: string }\n  ): Promise<BucketTransitionRequest> {\n    return this.post<BucketTransitionRequest>(\n      `${this.basePath}/bucket-transitions/${requestId}/approve`,\n      approvalData\n    );\n  }\n\n  /**\n   * Reject transition request\n   */\n  async rejectTransitionRequest(\n    requestId: string,\n    rejectionData: { rejected_by: string; rejection_reason: string }\n  ): Promise<BucketTransitionRequest> {\n    return this.post<BucketTransitionRequest>(\n      `${this.basePath}/bucket-transitions/${requestId}/reject`,\n      rejectionData\n    );\n  }\n\n  /**\n   * Get speaker transition history\n   */\n  async getSpeakerTransitionHistory(speakerId: string, limit: number = 50): Promise<BucketTransitionRequest[]> {\n    return this.get<BucketTransitionRequest[]>(\n      `${this.basePath}/bucket-transitions/speaker/${speakerId}/history?limit=${limit}`\n    );\n  }\n\n  /**\n   * Get transition statistics\n   */\n  async getTransitionStatistics(): Promise<any> {\n    return this.get<any>(`${this.basePath}/bucket-transitions/statistics/summary`);\n  }\n\n  // Comprehensive Views and Analytics\n\n  /**\n   * Get comprehensive speaker view (API Gateway)\n   */\n  async getComprehensiveSpeakerView(\n    speakerId: string,\n    options: {\n      include_ser_analysis?: boolean;\n      include_error_patterns?: boolean;\n      include_transition_history?: boolean;\n    } = {}\n  ): Promise<ComprehensiveSpeakerView> {\n    const queryParams = new URLSearchParams();\n    \n    Object.entries(options).forEach(([key, value]) => {\n      if (value !== undefined) {\n        queryParams.append(key, value.toString());\n      }\n    });\n\n    // This would call the API Gateway endpoint\n    return this.get<ComprehensiveSpeakerView>(\n      `/api/v1/speaker-bucket-management/speakers/${speakerId}/comprehensive?${queryParams.toString()}`\n    );\n  }\n\n  /**\n   * Get dashboard overview (API Gateway)\n   */\n  async getDashboardOverview(): Promise<DashboardMetrics> {\n    return this.get<DashboardMetrics>('/api/v1/speaker-bucket-management/dashboard/overview');\n  }\n\n  /**\n   * Complete speaker assessment workflow (API Gateway)\n   */\n  async completeAssessmentWorkflow(\n    speakerId: string,\n    options: {\n      include_mt_validation?: boolean;\n      auto_approve_transitions?: boolean;\n    } = {}\n  ): Promise<any> {\n    const queryParams = new URLSearchParams();\n    \n    Object.entries(options).forEach(([key, value]) => {\n      if (value !== undefined) {\n        queryParams.append(key, value.toString());\n      }\n    });\n\n    return this.post<any>(\n      `/api/v1/speaker-bucket-management/workflows/complete-assessment?speaker_id=${speakerId}&${queryParams.toString()}`\n    );\n  }\n\n  // Health and Status\n\n  /**\n   * Check speaker management health\n   */\n  async checkHealth(): Promise<any> {\n    return this.get<any>(`${this.basePath}/speakers/health/check`);\n  }\n\n  /**\n   * Get comprehensive health check (API Gateway)\n   */\n  async getComprehensiveHealth(): Promise<any> {\n    return this.get<any>('/api/v1/speaker-bucket-management/health/comprehensive');\n  }\n\n  // Utility methods\n\n  /**\n   * Get quick filter options with counts\n   */\n  async getQuickFilterOptions(): Promise<Array<{\n    label: string;\n    value: string;\n    count: number;\n    filters: any;\n  }>> {\n    // This could be implemented as a separate endpoint or computed from bucket statistics\n    const stats = await this.getBucketStatistics();\n    \n    return [\n      {\n        label: 'All Speakers',\n        value: 'all',\n        count: stats.total_speakers,\n        filters: {}\n      },\n      {\n        label: 'High Touch',\n        value: 'high_touch',\n        count: stats.bucket_distribution.HIGH_TOUCH || 0,\n        filters: { bucket: 'HIGH_TOUCH' }\n      },\n      {\n        label: 'Medium Touch',\n        value: 'medium_touch',\n        count: stats.bucket_distribution.MEDIUM_TOUCH || 0,\n        filters: { bucket: 'MEDIUM_TOUCH' }\n      },\n      {\n        label: 'Low Touch',\n        value: 'low_touch',\n        count: stats.bucket_distribution.LOW_TOUCH || 0,\n        filters: { bucket: 'LOW_TOUCH' }\n      },\n      {\n        label: 'No Touch',\n        value: 'no_touch',\n        count: stats.bucket_distribution.NO_TOUCH || 0,\n        filters: { bucket: 'NO_TOUCH' }\n      },\n      {\n        label: 'Needs Transition',\n        value: 'needs_transition',\n        count: stats.transition_metrics.pending_transitions || 0,\n        filters: { should_transition: true }\n      },\n      {\n        label: 'Insufficient Data',\n        value: 'insufficient_data',\n        count: stats.total_speakers - stats.data_quality.speakers_with_sufficient_data,\n        filters: { has_sufficient_data: false }\n      }\n    ];\n  }\n\n  /**\n   * Export speakers data\n   */\n  async exportSpeakers(filters: SpeakerSearchParams = {}): Promise<Blob> {\n    const queryParams = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        queryParams.append(key, value.toString());\n      }\n    });\n\n    // Add export format\n    queryParams.append('format', 'csv');\n\n    const response = await fetch(\n      `${this.baseURL}${this.basePath}/speakers/export?${queryParams.toString()}`,\n      {\n        method: 'GET',\n        headers: this.getHeaders(),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n\n    return response.blob();\n  }\n}\n\n// Create singleton instance\nexport const speakerApi = new SpeakerApi();\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/user-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[606,609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[606,609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[991,994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[991,994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2660,2663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2660,2663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User API adapter\n * Implements Hexagonal Architecture adapter pattern for user management operations\n */\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { SERVICE_ENDPOINTS } from './base-api';\nimport type {\n  User,\n  CreateUserRequest,\n  UpdateUserRequest,\n  ChangePasswordRequest,\n  UserAuditLogEntry,\n  PaginatedResponse,\n} from '@domain/types';\n\n// Base query for user API\nconst baseQuery = fetchBaseQuery({\n  baseUrl: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000',\n  prepareHeaders: (headers, { getState }) => {\n    const token = (getState() as any).auth.token;\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    headers.set('content-type', 'application/json');\n    return headers;\n  },\n});\n\nexport const userApi = createApi({\n  reducerPath: 'userApi',\n  baseQuery,\n  tagTypes: ['User', 'AuditLog'],\n  endpoints: (builder) => ({\n    // Get users\n    getUsers: builder.query<PaginatedResponse<User>, any>({\n      query: (params) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}`,\n        method: 'GET',\n        params,\n      }),\n      providesTags: ['User'],\n    }),\n\n    // Get user by ID\n    getUser: builder.query<User, string>({\n      query: (userId) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}/${userId}`,\n        method: 'GET',\n      }),\n      providesTags: ['User'],\n    }),\n\n    // Create user\n    createUser: builder.mutation<User, CreateUserRequest>({\n      query: (userData) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}`,\n        method: 'POST',\n        body: userData,\n      }),\n      invalidatesTags: ['User'],\n    }),\n\n    // Update user\n    updateUser: builder.mutation<User, UpdateUserRequest>({\n      query: ({ userId, ...updateData }) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}/${userId}`,\n        method: 'PATCH',\n        body: updateData,\n      }),\n      invalidatesTags: ['User'],\n    }),\n\n    // Delete user\n    deleteUser: builder.mutation<void, string>({\n      query: (userId) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}/${userId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['User'],\n    }),\n\n    // Change user password\n    changeUserPassword: builder.mutation<{ success: boolean }, ChangePasswordRequest>({\n      query: ({ userId, ...passwordData }) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}/${userId}/change-password`,\n        method: 'POST',\n        body: passwordData,\n      }),\n      invalidatesTags: ['User'],\n    }),\n\n    // Get user audit log\n    getUserAuditLog: builder.query<PaginatedResponse<UserAuditLogEntry>, { userId: string; params?: any }>({\n      query: ({ userId, params }) => ({\n        url: `${SERVICE_ENDPOINTS.USER_MANAGEMENT}/${userId}/audit-log`,\n        method: 'GET',\n        params,\n      }),\n      providesTags: ['AuditLog'],\n    }),\n  }),\n});\n\nexport const {\n  useGetUsersQuery,\n  useGetUserQuery,\n  useCreateUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation,\n  useChangeUserPasswordMutation,\n  useGetUserAuditLogQuery,\n} = userApi;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/infrastructure/api/verification-api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[637,640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[637,640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1084,1087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1084,1087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2406,2409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2406,2409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Verification API adapter\n * Implements Hexagonal Architecture adapter pattern for verification operations\n */\n\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { SERVICE_ENDPOINTS } from './base-api';\nimport type {\n  VerificationItem,\n  VerificationRequest,\n  VerificationResponse,\n  DashboardSummary,\n  BulkVerificationRequest,\n  PaginatedResponse,\n} from '@domain/types';\n\n// Base query for verification API\nconst baseQuery = fetchBaseQuery({\n  baseUrl: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000',\n  prepareHeaders: (headers, { getState }) => {\n    const token = (getState() as any).auth.token;\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    headers.set('content-type', 'application/json');\n    return headers;\n  },\n});\n\nexport const verificationApi = createApi({\n  reducerPath: 'verificationApi',\n  baseQuery,\n  tagTypes: ['Verification', 'Dashboard'],\n  endpoints: (builder) => ({\n    // Get verification items\n    getVerificationItems: builder.query<PaginatedResponse<VerificationItem>, any>({\n      query: (params) => ({\n        url: `${SERVICE_ENDPOINTS.VERIFICATION}/items`,\n        method: 'GET',\n        params,\n      }),\n      providesTags: ['Verification'],\n    }),\n\n    // Submit verification\n    submitVerification: builder.mutation<VerificationResponse, { itemId: string } & VerificationRequest>({\n      query: ({ itemId, ...verification }) => ({\n        url: `${SERVICE_ENDPOINTS.VERIFICATION}/items/${itemId}/verify`,\n        method: 'POST',\n        body: verification,\n      }),\n      invalidatesTags: ['Verification', 'Dashboard'],\n    }),\n\n    // Bulk verification\n    bulkVerification: builder.mutation<{ processed: number }, BulkVerificationRequest>({\n      query: (bulkRequest) => ({\n        url: `${SERVICE_ENDPOINTS.VERIFICATION}/bulk`,\n        method: 'POST',\n        body: bulkRequest,\n      }),\n      invalidatesTags: ['Verification', 'Dashboard'],\n    }),\n\n    // Get dashboard summary\n    getDashboardSummary: builder.query<DashboardSummary, { period?: string }>({\n      query: ({ period = '7d' }) => ({\n        url: `${SERVICE_ENDPOINTS.VERIFICATION}/dashboard`,\n        method: 'GET',\n        params: { period },\n      }),\n      providesTags: ['Dashboard'],\n    }),\n\n    // Get verification history\n    getVerificationHistory: builder.query<PaginatedResponse<VerificationResponse>, any>({\n      query: (params) => ({\n        url: `${SERVICE_ENDPOINTS.VERIFICATION}/history`,\n        method: 'GET',\n        params,\n      }),\n      providesTags: ['Verification'],\n    }),\n  }),\n});\n\nexport const {\n  useGetVerificationItemsQuery,\n  useSubmitVerificationMutation,\n  useBulkVerificationMutation,\n  useGetDashboardSummaryQuery,\n  useGetVerificationHistoryQuery,\n} = verificationApi;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/components/NotificationProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/components/UserMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User menu component with profile and logout options\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  IconButton,\n  Menu,\n  MenuItem,\n  Avatar,\n  Typography,\n  Divider,\n  ListItemIcon,\n  Box,\n} from '@mui/material';\nimport {\n  AccountCircle as AccountIcon,\n  Settings as SettingsIcon,\n  Logout as LogoutIcon,\n} from '@mui/icons-material';\nimport { useAppDispatch, useAppSelector } from '@/app/hooks';\nimport { selectCurrentUser } from '@features/auth/auth-slice';\nimport { useLogoutMutation } from '@infrastructure/api/auth-api';\nimport { logout } from '@features/auth/auth-slice';\nimport { addNotification } from '@shared/slices/ui-slice';\n\nexport const UserMenu: React.FC = () => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const currentUser = useAppSelector(selectCurrentUser);\n  const [logoutMutation] = useLogoutMutation();\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfile = () => {\n    handleMenuClose();\n    navigate('/profile');\n  };\n\n  const handleSettings = () => {\n    handleMenuClose();\n    navigate('/settings');\n  };\n\n  const handleLogout = async () => {\n    handleMenuClose();\n    \n    try {\n      await logoutMutation().unwrap();\n      dispatch(logout());\n      dispatch(addNotification({\n        type: 'success',\n        message: 'Successfully logged out',\n      }));\n      navigate('/login');\n    } catch (error) {\n      // Even if logout API fails, clear local state\n      dispatch(logout());\n      navigate('/login');\n    }\n  };\n\n  const getInitials = (firstName?: string, lastName?: string): string => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return `${first}${last}`.toUpperCase() || currentUser?.username?.charAt(0)?.toUpperCase() || 'U';\n  };\n\n  if (!currentUser) {\n    return null;\n  }\n\n  return (\n    <>\n      <IconButton\n        size=\"large\"\n        edge=\"end\"\n        aria-label=\"account of current user\"\n        aria-controls=\"user-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleMenuOpen}\n        color=\"inherit\"\n      >\n        <Avatar\n          sx={{\n            width: 32,\n            height: 32,\n            bgcolor: 'secondary.main',\n            fontSize: '0.875rem',\n          }}\n        >\n          {getInitials(currentUser.firstName, currentUser.lastName)}\n        </Avatar>\n      </IconButton>\n      \n      <Menu\n        id=\"user-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        onClick={handleMenuClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            minWidth: 200,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&:before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        {/* User info */}\n        <Box sx={{ px: 2, py: 1 }}>\n          <Typography variant=\"subtitle2\" noWrap>\n            {currentUser.fullName || `${currentUser.firstName || ''} ${currentUser.lastName || ''}`.trim() || currentUser.username}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n            {currentUser.email}\n          </Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {Array.isArray(currentUser.roles) ? currentUser.roles.join(', ') : currentUser.roles || 'User'}\n          </Typography>\n        </Box>\n        \n        <Divider />\n        \n        {/* Menu items */}\n        <MenuItem onClick={handleProfile}>\n          <ListItemIcon>\n            <AccountIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Profile\n        </MenuItem>\n        \n        <MenuItem onClick={handleSettings}>\n          <ListItemIcon>\n            <SettingsIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n        \n        <Divider />\n        \n        <MenuItem onClick={handleLogout}>\n          <ListItemIcon>\n            <LogoutIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/pages/NotFoundPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/slices/ui-slice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2027,2030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2027,2030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UI slice for global UI state management\n */\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  title?: string;\n  duration?: number;\n  persistent?: boolean;\n}\n\ninterface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark' | 'auto';\n  notifications: Notification[];\n  loading: {\n    global: boolean;\n    [key: string]: boolean;\n  };\n  modals: {\n    [key: string]: {\n      open: boolean;\n      data?: any;\n    };\n  };\n}\n\nconst initialState: UIState = {\n  sidebarOpen: true,\n  theme: 'light',\n  notifications: [],\n  loading: {\n    global: false,\n  },\n  modals: {},\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: (state) => {\n      state.sidebarOpen = !state.sidebarOpen;\n    },\n    \n    setSidebarOpen: (state, action: PayloadAction<boolean>) => {\n      state.sidebarOpen = action.payload;\n    },\n    \n    setTheme: (state, action: PayloadAction<'light' | 'dark' | 'auto'>) => {\n      state.theme = action.payload;\n    },\n    \n    addNotification: (state, action: PayloadAction<Omit<Notification, 'id'>>) => {\n      const notification: Notification = {\n        id: Date.now().toString(),\n        ...action.payload,\n      };\n      state.notifications.push(notification);\n    },\n    \n    removeNotification: (state, action: PayloadAction<string>) => {\n      state.notifications = state.notifications.filter(\n        (notification) => notification.id !== action.payload\n      );\n    },\n    \n    clearNotifications: (state) => {\n      state.notifications = [];\n    },\n    \n    setLoading: (state, action: PayloadAction<{ key: string; loading: boolean }>) => {\n      const { key, loading } = action.payload;\n      state.loading[key] = loading;\n    },\n    \n    setGlobalLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading.global = action.payload;\n    },\n    \n    openModal: (state, action: PayloadAction<{ key: string; data?: any }>) => {\n      const { key, data } = action.payload;\n      state.modals[key] = { open: true, data };\n    },\n    \n    closeModal: (state, action: PayloadAction<string>) => {\n      const key = action.payload;\n      if (state.modals[key]) {\n        state.modals[key].open = false;\n        state.modals[key].data = undefined;\n      }\n    },\n  },\n});\n\nexport const {\n  toggleSidebar,\n  setSidebarOpen,\n  setTheme,\n  addNotification,\n  removeNotification,\n  clearNotifications,\n  setLoading,\n  setGlobalLoading,\n  openModal,\n  closeModal,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;\n\n// Selectors\nexport const selectSidebarOpen = (state: { ui: UIState }) => state.ui.sidebarOpen;\nexport const selectTheme = (state: { ui: UIState }) => state.ui.theme;\nexport const selectNotifications = (state: { ui: UIState }) => state.ui.notifications;\nexport const selectLoading = (state: { ui: UIState }) => state.ui.loading;\nexport const selectModals = (state: { ui: UIState }) => state.ui.modals;\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/shared/theme/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[654,657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[654,657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[803,806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[803,806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom'\nimport { vi } from 'vitest'\n\n// Mock Selection API\nObject.defineProperty(window, 'getSelection', {\n  writable: true,\n  value: () => ({\n    toString: () => '',\n    rangeCount: 0,\n    getRangeAt: () => ({\n      startOffset: 0,\n      endOffset: 0,\n      startContainer: { textContent: '' },\n      endContainer: { textContent: '' },\n    }),\n    removeAllRanges: vi.fn(),\n  }),\n})\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  unobserve() {}\n  root = null\n  rootMargin = ''\n  thresholds = []\n  takeRecords() { return [] }\n} as any\n\n// Mock ResizeObserver\nglobal.ResizeObserver = class ResizeObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  unobserve() {}\n} as any\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation((query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(), // deprecated\n    removeListener: vi.fn(), // deprecated\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n})\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/enhanced/before-after-comparison-fixes.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced tests for BeforeAfterComparison component with fixes for failing tests\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { theme } from '@/shared/theme/theme';\nimport { BeforeAfterComparison } from '@/features/verification/components/BeforeAfterComparison';\nimport { TextComparison, ChangeType } from '@/domain/types/verification';\n\n// Mock useMediaQuery for responsive testing\nconst mockUseMediaQuery = jest.fn();\njest.mock('@mui/material/useMediaQuery', () => mockUseMediaQuery);\n\n// Test wrapper\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ThemeProvider theme={theme}>\n    {children}\n  </ThemeProvider>\n);\n\ndescribe('BeforeAfterComparison - Enhanced Tests', () => {\n  const mockComparison: TextComparison = {\n    originalText: 'This is a test sentence with some errors.',\n    correctedText: 'This is a test sentence with some corrections.',\n    changes: [\n      {\n        type: ChangeType.SUBSTITUTION,\n        originalStart: 35,\n        originalEnd: 41,\n        correctedStart: 35,\n        correctedEnd: 47,\n        originalText: 'errors',\n        correctedText: 'corrections',\n        confidence: 0.95\n      }\n    ]\n  };\n\n  const mockComparisonWithMultipleChanges: TextComparison = {\n    originalText: 'This are a test sentence with some errors.',\n    correctedText: 'This is a test sentence with some corrections.',\n    changes: [\n      {\n        type: ChangeType.SUBSTITUTION,\n        originalStart: 5,\n        originalEnd: 8,\n        correctedStart: 5,\n        correctedEnd: 7,\n        originalText: 'are',\n        correctedText: 'is',\n        confidence: 0.98\n      },\n      {\n        type: ChangeType.SUBSTITUTION,\n        originalStart: 35,\n        originalEnd: 41,\n        correctedStart: 35,\n        correctedEnd: 47,\n        originalText: 'errors',\n        correctedText: 'corrections',\n        confidence: 0.95\n      }\n    ]\n  };\n\n  const mockComparisonWithDifferentChangeTypes: TextComparison = {\n    originalText: 'This old text has some content.',\n    correctedText: 'New text has some additional content.',\n    changes: [\n      {\n        type: ChangeType.DELETION,\n        originalStart: 5,\n        originalEnd: 9,\n        correctedStart: 0,\n        correctedEnd: 0,\n        originalText: 'old ',\n        correctedText: '',\n        confidence: 0.90\n      },\n      {\n        type: ChangeType.INSERTION,\n        originalStart: 0,\n        originalEnd: 0,\n        correctedStart: 0,\n        correctedEnd: 4,\n        originalText: '',\n        correctedText: 'New ',\n        confidence: 0.92\n      },\n      {\n        type: ChangeType.INSERTION,\n        originalStart: 22,\n        originalEnd: 22,\n        correctedStart: 22,\n        correctedEnd: 32,\n        originalText: '',\n        correctedText: 'additional ',\n        confidence: 0.88\n      }\n    ]\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Default to desktop view\n    mockUseMediaQuery.mockReturnValue(false);\n  });\n\n  describe('Basic Rendering - Fixed', () => {\n    test('should render both original and corrected text with proper text matching', async () => {\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparison}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Original Text')).toBeInTheDocument();\n      expect(screen.getByText('Corrected Text')).toBeInTheDocument();\n      \n      // Use more flexible text matching for text that might be split by elements\n      expect(screen.getByText((content, element) => {\n        return element?.textContent === mockComparison.originalText;\n      })).toBeInTheDocument();\n      \n      expect(screen.getByText((content, element) => {\n        return element?.textContent === mockComparison.correctedText;\n      })).toBeInTheDocument();\n    });\n\n    test('should show comparison statistics', async () => {\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparisonWithMultipleChanges}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('2 changes')).toBeInTheDocument();\n      expect(screen.getByText('2 substitutions')).toBeInTheDocument();\n    });\n  });\n\n  describe('Diff Highlighting - Fixed', () => {\n    test('should show different colors for different change types', async () => {\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparisonWithDifferentChangeTypes}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      // Wait for component to render\n      await waitFor(() => {\n        expect(screen.getByText('Original Text')).toBeInTheDocument();\n      });\n\n      // Check for insertion element (should be in corrected text)\n      const insertionElement = screen.getByTestId('diff-corrected-0');\n      expect(insertionElement).toHaveClass('diff-insertion');\n\n      // Check for deletion element (should be in original text)\n      const deletionElement = screen.getByTestId('diff-original-0');\n      expect(deletionElement).toHaveClass('diff-deletion');\n    });\n\n    test('should handle cases where not all changes have corresponding elements', async () => {\n      const comparisonWithLimitedChanges: TextComparison = {\n        originalText: 'This old text.',\n        correctedText: 'New text.',\n        changes: [\n          {\n            type: ChangeType.DELETION,\n            originalStart: 5,\n            originalEnd: 9,\n            correctedStart: 0,\n            correctedEnd: 0,\n            originalText: 'old ',\n            correctedText: '',\n            confidence: 0.90\n          },\n          {\n            type: ChangeType.INSERTION,\n            originalStart: 0,\n            originalEnd: 0,\n            correctedStart: 0,\n            correctedEnd: 4,\n            originalText: '',\n            correctedText: 'New ',\n            confidence: 0.92\n          }\n        ]\n      };\n\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={comparisonWithLimitedChanges}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      // Should only have elements that actually exist\n      expect(screen.getByTestId('diff-original-0')).toBeInTheDocument();\n      expect(screen.getByTestId('diff-corrected-0')).toBeInTheDocument();\n      \n      // Should not try to access non-existent elements\n      expect(screen.queryByTestId('diff-original-1')).not.toBeInTheDocument();\n      expect(screen.queryByTestId('diff-corrected-1')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Responsive Design - Fixed', () => {\n    test('should stack vertically on mobile', async () => {\n      // Mock mobile view\n      mockUseMediaQuery.mockReturnValue(true);\n      \n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparison}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      const container = screen.getByTestId('comparison-container');\n      expect(container).toHaveClass('mobile-layout');\n    });\n\n    test('should show side-by-side on desktop', async () => {\n      // Mock desktop view\n      mockUseMediaQuery.mockReturnValue(false);\n      \n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparison}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      const container = screen.getByTestId('comparison-container');\n      expect(container).toHaveClass('desktop-layout');\n    });\n  });\n\n  describe('Change Navigation - Enhanced', () => {\n    test('should navigate between changes correctly', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparisonWithMultipleChanges}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      // Should start at first change\n      expect(screen.getByText('1 of 2')).toBeInTheDocument();\n      \n      // Navigate to next change\n      const nextButton = screen.getByLabelText('Next change');\n      await user.click(nextButton);\n      \n      expect(screen.getByText('2 of 2')).toBeInTheDocument();\n      \n      // Navigate back to previous change\n      const prevButton = screen.getByLabelText('Previous change');\n      await user.click(prevButton);\n      \n      expect(screen.getByText('1 of 2')).toBeInTheDocument();\n    });\n\n    test('should disable navigation buttons appropriately', async () => {\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparisonWithMultipleChanges}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      // Previous button should be disabled at start\n      const prevButton = screen.getByLabelText('Previous change');\n      expect(prevButton).toBeDisabled();\n      \n      // Next button should be enabled\n      const nextButton = screen.getByLabelText('Next change');\n      expect(nextButton).not.toBeDisabled();\n    });\n  });\n\n  describe('Action Buttons', () => {\n    test('should call onApprove when approve button is clicked', async () => {\n      const user = userEvent.setup();\n      const onApprove = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparison}\n            onApprove={onApprove}\n            showActions={true}\n          />\n        </TestWrapper>\n      );\n\n      const approveButton = screen.getByRole('button', { name: /approve/i });\n      await user.click(approveButton);\n      \n      expect(onApprove).toHaveBeenCalledWith(mockComparison);\n    });\n\n    test('should call onReject when reject button is clicked', async () => {\n      const user = userEvent.setup();\n      const onReject = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={mockComparison}\n            onReject={onReject}\n            showActions={true}\n          />\n        </TestWrapper>\n      );\n\n      const rejectButton = screen.getByRole('button', { name: /reject/i });\n      await user.click(rejectButton);\n      \n      expect(onReject).toHaveBeenCalledWith(mockComparison);\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle empty text gracefully', async () => {\n      const emptyComparison: TextComparison = {\n        originalText: '',\n        correctedText: '',\n        changes: []\n      };\n\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={emptyComparison}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Original Text')).toBeInTheDocument();\n      expect(screen.getByText('Corrected Text')).toBeInTheDocument();\n      expect(screen.getByText('0 changes')).toBeInTheDocument();\n    });\n\n    test('should handle invalid change positions', async () => {\n      const invalidComparison: TextComparison = {\n        originalText: 'Short text',\n        correctedText: 'Short text',\n        changes: [\n          {\n            type: ChangeType.SUBSTITUTION,\n            originalStart: 100, // Invalid position\n            originalEnd: 110,\n            correctedStart: 100,\n            correctedEnd: 110,\n            originalText: 'invalid',\n            correctedText: 'invalid',\n            confidence: 0.5\n          }\n        ]\n      };\n\n      render(\n        <TestWrapper>\n          <BeforeAfterComparison \n            comparison={invalidComparison}\n            highlightDifferences={true}\n          />\n        </TestWrapper>\n      );\n\n      // Should render without crashing\n      expect(screen.getByText('Original Text')).toBeInTheDocument();\n      expect(screen.getByText('Corrected Text')).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/enhanced/error-categorization-fixes.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":193,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":384,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":384,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced tests for ErrorCategorization component with fixes for failing tests\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { theme } from '@/shared/theme/theme';\nimport { ErrorCategorization } from '@/features/error-reporting/components/ErrorCategorization';\nimport { ErrorCategory } from '@/domain/types/error-reporting';\n\n// Test wrapper\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ThemeProvider theme={theme}>\n    {children}\n  </ThemeProvider>\n);\n\ndescribe('ErrorCategorization - Enhanced Tests', () => {\n  const mockCategories: ErrorCategory[] = [\n    {\n      id: 'grammar',\n      name: 'Grammar',\n      description: 'Grammatical errors and issues',\n      subcategories: [\n        { id: 'punctuation', name: 'Punctuation', description: 'Punctuation errors' },\n        { id: 'syntax', name: 'Syntax', description: 'Syntax errors' }\n      ]\n    },\n    {\n      id: 'spelling',\n      name: 'Spelling',\n      description: 'Spelling mistakes and typos',\n      subcategories: []\n    },\n    {\n      id: 'style',\n      name: 'Style',\n      description: 'Style and formatting issues',\n      subcategories: [\n        { id: 'tone', name: 'Tone', description: 'Tone and voice issues' },\n        { id: 'clarity', name: 'Clarity', description: 'Clarity and readability' }\n      ]\n    },\n    {\n      id: 'content',\n      name: 'Content',\n      description: 'Content accuracy and relevance',\n      subcategories: []\n    },\n    {\n      id: 'technical',\n      name: 'Technical',\n      description: 'Technical terminology and accuracy',\n      subcategories: []\n    }\n  ];\n\n  const defaultProps = {\n    categories: mockCategories,\n    selectedCategories: [],\n    onSelectionChange: jest.fn(),\n    disabled: false,\n    searchable: true,\n    showSubcategories: true\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Basic Rendering - Fixed', () => {\n    test('should render all available categories', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Grammar')).toBeInTheDocument();\n      expect(screen.getByText('Spelling')).toBeInTheDocument();\n      expect(screen.getByText('Style')).toBeInTheDocument();\n      expect(screen.getByText('Content')).toBeInTheDocument();\n      expect(screen.getByText('Technical')).toBeInTheDocument();\n    });\n\n    test('should show category descriptions on hover with proper tooltip handling', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      // Find the grammar category chip\n      const grammarChip = screen.getByLabelText('Grammatical errors and issues');\n      \n      // Hover over the chip\n      await user.hover(grammarChip);\n      \n      // Wait for tooltip to appear with more flexible text matching\n      await waitFor(() => {\n        const tooltip = screen.getByRole('tooltip', { hidden: true });\n        expect(tooltip).toBeInTheDocument();\n        expect(tooltip).toHaveTextContent('Grammatical errors and issues');\n      }, { timeout: 2000 });\n    });\n\n    test('should be disabled when disabled prop is true', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps} \n            disabled={true}\n          />\n        </TestWrapper>\n      );\n\n      const grammarChip = screen.getByText('Grammar');\n      expect(grammarChip.closest('button')).toBeDisabled();\n    });\n  });\n\n  describe('Category Selection - Enhanced', () => {\n    test('should handle single category selection', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n          />\n        </TestWrapper>\n      );\n\n      const grammarChip = screen.getByText('Grammar');\n      await user.click(grammarChip);\n      \n      expect(onSelectionChange).toHaveBeenCalledWith(['grammar']);\n    });\n\n    test('should handle multiple category selection', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n          />\n        </TestWrapper>\n      );\n\n      const grammarChip = screen.getByText('Grammar');\n      const spellingChip = screen.getByText('Spelling');\n      \n      await user.click(grammarChip);\n      await user.click(spellingChip);\n      \n      expect(onSelectionChange).toHaveBeenCalledTimes(2);\n      expect(onSelectionChange).toHaveBeenNthCalledWith(1, ['grammar']);\n      expect(onSelectionChange).toHaveBeenNthCalledWith(2, ['grammar', 'spelling']);\n    });\n\n    test('should deselect category when clicked again', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar']}\n            onSelectionChange={onSelectionChange}\n          />\n        </TestWrapper>\n      );\n\n      const grammarChip = screen.getByText('Grammar');\n      await user.click(grammarChip);\n      \n      expect(onSelectionChange).toHaveBeenCalledWith([]);\n    });\n  });\n\n  describe('Subcategory Handling', () => {\n    test('should show subcategories when parent is selected', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar']}\n          />\n        </TestWrapper>\n      );\n\n      // Subcategories should be visible\n      expect(screen.getByText('Punctuation')).toBeInTheDocument();\n      expect(screen.getByText('Syntax')).toBeInTheDocument();\n    });\n\n    test('should handle subcategory selection', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar']}\n            onSelectionChange={onSelectionChange}\n          />\n        </TestWrapper>\n      );\n\n      const punctuationChip = screen.getByText('Punctuation');\n      await user.click(punctuationChip);\n      \n      expect(onSelectionChange).toHaveBeenCalledWith(['grammar', 'punctuation']);\n    });\n\n    test('should hide subcategories when parent is deselected', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar', 'punctuation']}\n          />\n        </TestWrapper>\n      );\n\n      // Deselect parent category\n      const grammarChip = screen.getByText('Grammar');\n      await user.click(grammarChip);\n      \n      // Subcategories should be hidden\n      await waitFor(() => {\n        expect(screen.queryByText('Punctuation')).not.toBeInTheDocument();\n        expect(screen.queryByText('Syntax')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Search Functionality', () => {\n    test('should filter categories based on search query', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByPlaceholderText('Search categories...');\n      await user.type(searchInput, 'gram');\n      \n      // Should show only grammar category\n      expect(screen.getByText('Grammar')).toBeInTheDocument();\n      expect(screen.queryByText('Spelling')).not.toBeInTheDocument();\n      expect(screen.queryByText('Style')).not.toBeInTheDocument();\n    });\n\n    test('should clear search when input is cleared', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByPlaceholderText('Search categories...');\n      await user.type(searchInput, 'gram');\n      await user.clear(searchInput);\n      \n      // All categories should be visible again\n      expect(screen.getByText('Grammar')).toBeInTheDocument();\n      expect(screen.getByText('Spelling')).toBeInTheDocument();\n      expect(screen.getByText('Style')).toBeInTheDocument();\n    });\n\n    test('should show no results message when search yields no matches', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      const searchInput = screen.getByPlaceholderText('Search categories...');\n      await user.type(searchInput, 'nonexistent');\n      \n      expect(screen.getByText(/no categories found/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Selection Counter', () => {\n    test('should display correct selection count', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar', 'spelling']}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('2 of 5 categories selected')).toBeInTheDocument();\n    });\n\n    test('should update count when selections change', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar']}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('1 of 5 categories selected')).toBeInTheDocument();\n      \n      const spellingChip = screen.getByText('Spelling');\n      await user.click(spellingChip);\n      \n      await waitFor(() => {\n        expect(screen.getByText('2 of 5 categories selected')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper ARIA labels and roles', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization {...defaultProps} />\n        </TestWrapper>\n      );\n\n      // Check for fieldset with proper legend\n      const fieldset = screen.getByRole('group', { name: /error categories/i });\n      expect(fieldset).toBeInTheDocument();\n      \n      // Check for proper button roles\n      const grammarButton = screen.getByRole('button', { name: /grammatical errors and issues/i });\n      expect(grammarButton).toBeInTheDocument();\n    });\n\n    test('should support keyboard navigation', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n          />\n        </TestWrapper>\n      );\n\n      const grammarChip = screen.getByText('Grammar');\n      grammarChip.focus();\n      \n      // Should be able to activate with Enter or Space\n      await user.keyboard('{Enter}');\n      \n      expect(onSelectionChange).toHaveBeenCalledWith(['grammar']);\n    });\n\n    test('should announce selection changes to screen readers', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['grammar']}\n          />\n        </TestWrapper>\n      );\n\n      // Check for live region that announces changes\n      const liveRegion = screen.getByRole('status');\n      expect(liveRegion).toBeInTheDocument();\n      expect(liveRegion).toHaveTextContent('1 of 5 categories selected');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle empty categories array', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            categories={[]}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(/no categories available/i)).toBeInTheDocument();\n    });\n\n    test('should handle invalid selected categories', async () => {\n      render(\n        <TestWrapper>\n          <ErrorCategorization \n            {...defaultProps}\n            selectedCategories={['nonexistent']}\n          />\n        </TestWrapper>\n      );\n\n      // Should render without crashing and ignore invalid selections\n      expect(screen.getByText('Grammar')).toBeInTheDocument();\n      expect(screen.getByText('0 of 5 categories selected')).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/enhanced/interactive-data-grid-fixes.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'within' is defined but never used.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":178,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced tests for InteractiveDataGrid component with fixes for failing tests\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { theme } from '@/shared/theme/theme';\nimport { InteractiveDataGrid } from '@/features/verification/components/InteractiveDataGrid';\nimport { ErrorReport, ErrorStatus, ErrorSeverity } from '@/domain/types/error-reporting';\n\n// Test wrapper\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ThemeProvider theme={theme}>\n    {children}\n  </ThemeProvider>\n);\n\ndescribe('InteractiveDataGrid - Enhanced Tests', () => {\n  const mockData: ErrorReport[] = [\n    {\n      id: 'error-1',\n      speaker_id: 'speaker-1',\n      original_text: 'This are wrong',\n      corrected_text: 'This is wrong',\n      error_type: 'grammar',\n      severity: ErrorSeverity.MEDIUM,\n      status: ErrorStatus.PENDING,\n      confidence_score: 0.95,\n      created_at: '2024-01-01T10:00:00Z',\n      updated_at: '2024-01-01T10:00:00Z',\n      reviewed_by: null,\n      reviewed_at: null,\n      notes: ''\n    },\n    {\n      id: 'error-2',\n      speaker_id: 'speaker-2',\n      original_text: 'Another eror here',\n      corrected_text: 'Another error here',\n      error_type: 'spelling',\n      severity: ErrorSeverity.LOW,\n      status: ErrorStatus.APPROVED,\n      confidence_score: 0.88,\n      created_at: '2024-01-02T10:00:00Z',\n      updated_at: '2024-01-02T10:00:00Z',\n      reviewed_by: 'reviewer-1',\n      reviewed_at: '2024-01-02T11:00:00Z',\n      notes: 'Approved by reviewer'\n    },\n    {\n      id: 'error-3',\n      speaker_id: 'speaker-3',\n      original_text: 'Third mistake',\n      corrected_text: 'Third correction',\n      error_type: 'style',\n      severity: ErrorSeverity.HIGH,\n      status: ErrorStatus.REJECTED,\n      confidence_score: 0.72,\n      created_at: '2024-01-03T10:00:00Z',\n      updated_at: '2024-01-03T10:00:00Z',\n      reviewed_by: 'reviewer-2',\n      reviewed_at: '2024-01-03T11:00:00Z',\n      notes: 'Rejected due to low confidence'\n    }\n  ];\n\n  const defaultProps = {\n    data: mockData,\n    columns: [\n      { field: 'id', headerName: 'ID', width: 100 },\n      { field: 'created_at', headerName: 'Date', width: 120 },\n      { field: 'original_text', headerName: 'Original Text', width: 200 },\n      { field: 'corrected_text', headerName: 'Corrected Text', width: 200 },\n      { field: 'error_type', headerName: 'Type', width: 100 },\n      { field: 'severity', headerName: 'Severity', width: 100 },\n      { field: 'status', headerName: 'Status', width: 120, editable: true },\n      { field: 'confidence_score', headerName: 'Confidence', width: 100 }\n    ],\n    loading: false,\n    onSelectionChange: jest.fn(),\n    onEdit: jest.fn(),\n    onSort: jest.fn(),\n    onFilter: jest.fn()\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Row Selection - Fixed', () => {\n    test('should handle single row selection', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n            selectable={true}\n          />\n        </TestWrapper>\n      );\n\n      // Wait for grid to render\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Find and click the first row checkbox (not the header checkbox)\n      const firstRowCheckbox = screen.getByTestId('row-checkbox-error-1');\n      await user.click(firstRowCheckbox);\n      \n      expect(onSelectionChange).toHaveBeenCalledWith(['error-1']);\n    });\n\n    test('should handle multiple row selection', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n            selectable={true}\n          />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Select first row\n      const firstRowCheckbox = screen.getByTestId('row-checkbox-error-1');\n      await user.click(firstRowCheckbox);\n      \n      // Select second row\n      const secondRowCheckbox = screen.getByTestId('row-checkbox-error-2');\n      await user.click(secondRowCheckbox);\n      \n      expect(onSelectionChange).toHaveBeenCalledTimes(2);\n      expect(onSelectionChange).toHaveBeenNthCalledWith(1, ['error-1']);\n      expect(onSelectionChange).toHaveBeenNthCalledWith(2, ['error-1', 'error-2']);\n    });\n\n    test('should handle select all functionality', async () => {\n      const user = userEvent.setup();\n      const onSelectionChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onSelectionChange={onSelectionChange}\n            selectable={true}\n          />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Click select all checkbox\n      const selectAllCheckbox = screen.getByTestId('select-all-checkbox');\n      await user.click(selectAllCheckbox);\n      \n      expect(onSelectionChange).toHaveBeenCalledWith(['error-1', 'error-2', 'error-3']);\n    });\n  });\n\n  describe('Inline Editing - Fixed', () => {\n    test('should enable editing for editable cells', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            editable={true}\n          />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Find the status cell for the first row\n      const statusCell = screen.getByTestId('cell-error-1-status');\n      \n      // Double click to enter edit mode\n      fireEvent.doubleClick(statusCell);\n\n      // Should show the edit control (select dropdown for status)\n      await waitFor(() => {\n        const editControls = screen.getAllByRole('combobox');\n        // Filter out pagination combobox by looking for the one in the table\n        const statusCombobox = editControls.find(control => \n          control.closest('[data-testid=\"cell-error-1-status\"]')\n        );\n        expect(statusCombobox).toBeInTheDocument();\n      });\n    });\n\n    test('should call onEdit when cell value is changed', async () => {\n      const user = userEvent.setup();\n      const onEdit = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onEdit={onEdit}\n            editable={true}\n          />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Enter edit mode\n      const statusCell = screen.getByTestId('cell-error-1-status');\n      fireEvent.doubleClick(statusCell);\n\n      await waitFor(() => {\n        const editControls = screen.getAllByRole('combobox');\n        const statusCombobox = editControls.find(control => \n          control.closest('[data-testid=\"cell-error-1-status\"]')\n        );\n        expect(statusCombobox).toBeInTheDocument();\n      });\n\n      // Find the correct select element within the cell\n      const statusCombobox = screen.getAllByRole('combobox').find(control => \n        control.closest('[data-testid=\"cell-error-1-status\"]')\n      );\n      \n      if (statusCombobox) {\n        await user.click(statusCombobox);\n        \n        // Select new value\n        const inReviewOption = screen.getByRole('option', { name: 'In Review' });\n        await user.click(inReviewOption);\n\n        // Verify onEdit was called\n        expect(onEdit).toHaveBeenCalledWith('error-1', 'status', 'In Review');\n      }\n    });\n\n    test('should exit edit mode on blur', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            editable={true}\n          />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n\n      // Enter edit mode\n      const statusCell = screen.getByTestId('cell-error-1-status');\n      fireEvent.doubleClick(statusCell);\n\n      await waitFor(() => {\n        const editControls = screen.getAllByRole('combobox');\n        const statusCombobox = editControls.find(control => \n          control.closest('[data-testid=\"cell-error-1-status\"]')\n        );\n        expect(statusCombobox).toBeInTheDocument();\n      });\n\n      // Click outside to blur\n      await user.click(document.body);\n\n      // Edit control should be removed\n      await waitFor(() => {\n        const editControls = screen.getAllByRole('combobox');\n        const statusCombobox = editControls.find(control => \n          control.closest('[data-testid=\"cell-error-1-status\"]')\n        );\n        expect(statusCombobox).toBeUndefined();\n      });\n    });\n  });\n\n  describe('Sorting and Filtering', () => {\n    test('should handle column sorting', async () => {\n      const user = userEvent.setup();\n      const onSort = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onSort={onSort}\n            sortable={true}\n          />\n        </TestWrapper>\n      );\n\n      // Click on ID column header to sort\n      const idHeader = screen.getByText('ID');\n      await user.click(idHeader);\n      \n      expect(onSort).toHaveBeenCalledWith('id', 'asc');\n    });\n\n    test('should handle filtering', async () => {\n      const user = userEvent.setup();\n      const onFilter = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            onFilter={onFilter}\n            filterable={true}\n          />\n        </TestWrapper>\n      );\n\n      // Open filter menu\n      const filterButton = screen.getByLabelText(/filter/i);\n      await user.click(filterButton);\n\n      // Apply a filter\n      const statusFilter = screen.getByLabelText(/status filter/i);\n      await user.click(statusFilter);\n      \n      const pendingOption = screen.getByRole('option', { name: /pending/i });\n      await user.click(pendingOption);\n\n      expect(onFilter).toHaveBeenCalledWith('status', 'PENDING');\n    });\n  });\n\n  describe('Pagination', () => {\n    test('should display pagination controls', async () => {\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            pagination={true}\n            pageSize={10}\n            totalRows={25}\n          />\n        </TestWrapper>\n      );\n\n      // Check for pagination controls\n      expect(screen.getByText(/rows per page/i)).toBeInTheDocument();\n      expect(screen.getByText(/1–3 of 3/i)).toBeInTheDocument();\n    });\n\n    test('should handle page size changes', async () => {\n      const user = userEvent.setup();\n      const onPageSizeChange = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            pagination={true}\n            pageSize={10}\n            onPageSizeChange={onPageSizeChange}\n          />\n        </TestWrapper>\n      );\n\n      // Find pagination select (not the status edit select)\n      const paginationSelect = screen.getByLabelText(/rows per page/i);\n      await user.click(paginationSelect);\n      \n      const option25 = screen.getByRole('option', { name: '25' });\n      await user.click(option25);\n\n      expect(onPageSizeChange).toHaveBeenCalledWith(25);\n    });\n  });\n\n  describe('Loading and Error States', () => {\n    test('should display loading state', async () => {\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            loading={true}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('data-grid-loading')).toBeInTheDocument();\n    });\n\n    test('should display empty state', async () => {\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            data={[]}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(/no data available/i)).toBeInTheDocument();\n    });\n\n    test('should handle error state', async () => {\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid \n            {...defaultProps}\n            error=\"Failed to load data\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(/failed to load data/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('should have proper ARIA labels', async () => {\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid\n            {...defaultProps}\n            selectable={true}\n          />\n        </TestWrapper>\n      );\n\n      // Check for proper ARIA labels\n      expect(screen.getByLabelText(/error reports data grid/i)).toBeInTheDocument();\n      expect(screen.getByTestId('select-all-checkbox')).toHaveAttribute('aria-label');\n    });\n\n    test('should support keyboard navigation', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid\n            {...defaultProps}\n            selectable={true}\n          />\n        </TestWrapper>\n      );\n\n      // Focus on first checkbox\n      const firstCheckbox = screen.getByTestId('row-checkbox-error-1');\n      firstCheckbox.focus();\n\n      // Should be able to activate with space\n      await user.keyboard(' ');\n\n      expect(defaultProps.onSelectionChange).toHaveBeenCalledWith(['error-1']);\n    });\n  });\n\n  describe('Performance', () => {\n    test('should handle large datasets efficiently', async () => {\n      const largeDataset = Array.from({ length: 1000 }, (_, index) => ({\n        ...mockData[0],\n        id: `error-${index + 1}`,\n        original_text: `Error text ${index + 1}`,\n      }));\n\n      render(\n        <TestWrapper>\n          <InteractiveDataGrid\n            {...defaultProps}\n            data={largeDataset}\n            virtualization={true}\n          />\n        </TestWrapper>\n      );\n\n      // Should render without performance issues\n      await waitFor(() => {\n        expect(screen.getByText('error-1')).toBeInTheDocument();\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/enhanced/speaker-bucket-transitions.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newBucket' is defined but never used.","line":104,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":61},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":350,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":350,"endColumn":69},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":392,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":392,"endColumn":69}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced tests for speaker bucket transitions and CRUD operations\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { theme } from '@/shared/theme/theme';\nimport speakerReducer from '@/features/speaker-management/speaker-slice';\nimport uiReducer from '@/shared/slices/ui-slice';\nimport { SpeakerManagementPage } from '@/features/speaker-management';\nimport { Speaker, SpeakerBucket, QualityTrend } from '@/domain/types/speaker';\n\n// Mock speakers with different bucket scenarios\nconst mockSpeakersForTransition: Speaker[] = [\n  {\n    speaker_id: '1',\n    speaker_identifier: 'SPEAKER_TRANSITION_1',\n    speaker_name: 'Dr. Ready For Transition',\n    current_bucket: SpeakerBucket.HIGH_TOUCH,\n    note_count: 200,\n    average_ser_score: 5.2, // Low score, should transition to LOW_TOUCH\n    quality_trend: QualityTrend.IMPROVING,\n    should_transition: true,\n    has_sufficient_data: true,\n    created_at: '2024-01-01',\n    updated_at: '2024-01-15',\n  },\n  {\n    speaker_id: '2',\n    speaker_identifier: 'SPEAKER_STABLE',\n    speaker_name: 'Dr. Stable Speaker',\n    current_bucket: SpeakerBucket.MEDIUM_TOUCH,\n    note_count: 150,\n    average_ser_score: 12.5,\n    quality_trend: QualityTrend.STABLE,\n    should_transition: false,\n    has_sufficient_data: true,\n    created_at: '2024-01-01',\n    updated_at: '2024-01-10',\n  },\n  {\n    speaker_id: '3',\n    speaker_identifier: 'SPEAKER_INSUFFICIENT_DATA',\n    speaker_name: 'Dr. New Speaker',\n    current_bucket: SpeakerBucket.MEDIUM_TOUCH,\n    note_count: 15, // Insufficient data\n    average_ser_score: 0,\n    quality_trend: QualityTrend.STABLE,\n    should_transition: false,\n    has_sufficient_data: false,\n    created_at: '2024-01-20',\n    updated_at: '2024-01-20',\n  },\n];\n\n// Mock API with enhanced functionality\njest.mock('@/infrastructure/api/speaker-api', () => ({\n  speakerApi: {\n    getSpeakers: jest.fn(() => Promise.resolve({ \n      speakers: mockSpeakersForTransition, \n      total: 3,\n      page: 1,\n      per_page: 10,\n      total_pages: 1\n    })),\n    getSpeaker: jest.fn((id: string) => \n      Promise.resolve(mockSpeakersForTransition.find(s => s.speaker_id === id))\n    ),\n    createSpeaker: jest.fn((data) => \n      Promise.resolve({ \n        ...data, \n        speaker_id: '4', \n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        note_count: 0,\n        average_ser_score: 0,\n        quality_trend: QualityTrend.STABLE,\n        should_transition: false,\n        has_sufficient_data: false\n      })\n    ),\n    updateSpeaker: jest.fn((id: string, data) => \n      Promise.resolve({ \n        ...mockSpeakersForTransition.find(s => s.speaker_id === id), \n        ...data,\n        updated_at: new Date().toISOString()\n      })\n    ),\n    deleteSpeaker: jest.fn(() => Promise.resolve()),\n    transitionSpeaker: jest.fn((id: string, newBucket: SpeakerBucket) => \n      Promise.resolve({\n        ...mockSpeakersForTransition.find(s => s.speaker_id === id),\n        current_bucket: newBucket,\n        should_transition: false,\n        updated_at: new Date().toISOString()\n      })\n    ),\n    bulkTransition: jest.fn((speakerIds: string[], newBucket: SpeakerBucket) => \n      Promise.resolve({\n        success: true,\n        updated_count: speakerIds.length,\n        failed_count: 0\n      })\n    ),\n    searchSpeakers: jest.fn((query: string) => \n      Promise.resolve({\n        speakers: mockSpeakersForTransition.filter(s => \n          s.speaker_name.toLowerCase().includes(query.toLowerCase()) ||\n          s.speaker_identifier.toLowerCase().includes(query.toLowerCase())\n        ),\n        total: 1\n      })\n    ),\n    getSpeakerAnalytics: jest.fn(() => Promise.resolve({\n      performance_metrics: { \n        average_ser_score: 8.9, \n        total_notes: 365,\n        speakers_needing_transition: 1\n      },\n      quality_trends: { improving: 1, stable: 2, declining: 0 },\n      bucket_distribution: { \n        [SpeakerBucket.HIGH_TOUCH]: 1, \n        [SpeakerBucket.MEDIUM_TOUCH]: 2, \n        [SpeakerBucket.LOW_TOUCH]: 0 \n      }\n    })),\n  }\n}));\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const store = configureStore({\n    reducer: {\n      speakers: speakerReducer,\n      ui: uiReducer,\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\ndescribe('Speaker Bucket Transitions - Enhanced Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Bucket Transition Detection', () => {\n    test('should identify speakers needing transition', async () => {\n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Ready For Transition')).toBeInTheDocument();\n      });\n\n      // Check for transition indicator\n      const transitionIndicator = screen.getByTestId('transition-indicator-1');\n      expect(transitionIndicator).toBeInTheDocument();\n      expect(transitionIndicator).toHaveAttribute('aria-label', 'Speaker needs bucket transition');\n    });\n\n    test('should not show transition indicator for stable speakers', async () => {\n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Stable Speaker')).toBeInTheDocument();\n      });\n\n      // Should not have transition indicator\n      expect(screen.queryByTestId('transition-indicator-2')).not.toBeInTheDocument();\n    });\n\n    test('should handle insufficient data scenarios', async () => {\n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. New Speaker')).toBeInTheDocument();\n      });\n\n      // Check for insufficient data indicator\n      const insufficientDataIndicator = screen.getByTestId('insufficient-data-indicator-3');\n      expect(insufficientDataIndicator).toBeInTheDocument();\n      expect(insufficientDataIndicator).toHaveAttribute('aria-label', 'Insufficient data for analysis');\n    });\n  });\n\n  describe('Manual Bucket Transitions', () => {\n    test('should allow manual bucket transition', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Ready For Transition')).toBeInTheDocument();\n      });\n\n      // Open speaker actions menu\n      const speakerCard = screen.getByTestId('speaker-card-1');\n      const actionsButton = within(speakerCard).getByLabelText(/more actions/i);\n      await user.click(actionsButton);\n\n      // Click transition option\n      const transitionOption = screen.getByRole('menuitem', { name: /transition bucket/i });\n      await user.click(transitionOption);\n\n      // Verify transition dialog opens\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n        expect(screen.getByText('Transition Speaker Bucket')).toBeInTheDocument();\n      });\n\n      // Select new bucket\n      const bucketSelect = screen.getByLabelText(/new bucket/i);\n      await user.click(bucketSelect);\n      \n      const lowTouchOption = screen.getByRole('option', { name: /low touch/i });\n      await user.click(lowTouchOption);\n\n      // Add transition reason\n      const reasonInput = screen.getByLabelText(/transition reason/i);\n      await user.type(reasonInput, 'Low SER score indicates speaker improvement');\n\n      // Confirm transition\n      const confirmButton = screen.getByRole('button', { name: /confirm transition/i });\n      await user.click(confirmButton);\n\n      // Verify success message\n      await waitFor(() => {\n        expect(screen.getByText(/speaker bucket updated successfully/i)).toBeInTheDocument();\n      });\n    });\n\n    test('should validate transition rules', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. New Speaker')).toBeInTheDocument();\n      });\n\n      // Try to transition speaker with insufficient data\n      const speakerCard = screen.getByTestId('speaker-card-3');\n      const actionsButton = within(speakerCard).getByLabelText(/more actions/i);\n      await user.click(actionsButton);\n\n      const transitionOption = screen.getByRole('menuitem', { name: /transition bucket/i });\n      await user.click(transitionOption);\n\n      // Should show warning about insufficient data\n      await waitFor(() => {\n        expect(screen.getByText(/insufficient data for reliable transition/i)).toBeInTheDocument();\n      });\n\n      // Transition should be disabled or require confirmation\n      const confirmButton = screen.getByRole('button', { name: /confirm transition/i });\n      expect(confirmButton).toBeDisabled();\n    });\n  });\n\n  describe('Bulk Operations', () => {\n    test('should support bulk bucket transitions', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Ready For Transition')).toBeInTheDocument();\n      });\n\n      // Select multiple speakers\n      const selectAllCheckbox = screen.getByRole('checkbox', { name: /select all/i });\n      await user.click(selectAllCheckbox);\n\n      // Open bulk actions\n      const bulkActionsButton = screen.getByRole('button', { name: /bulk actions/i });\n      await user.click(bulkActionsButton);\n\n      // Select bulk transition\n      const bulkTransitionOption = screen.getByRole('menuitem', { name: /bulk transition/i });\n      await user.click(bulkTransitionOption);\n\n      // Verify bulk transition dialog\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n        expect(screen.getByText('Bulk Bucket Transition')).toBeInTheDocument();\n        expect(screen.getByText(/3 speakers selected/i)).toBeInTheDocument();\n      });\n\n      // Select target bucket\n      const bucketSelect = screen.getByLabelText(/target bucket/i);\n      await user.click(bucketSelect);\n      \n      const mediumTouchOption = screen.getByRole('option', { name: /medium touch/i });\n      await user.click(mediumTouchOption);\n\n      // Confirm bulk transition\n      const confirmButton = screen.getByRole('button', { name: /apply to all/i });\n      await user.click(confirmButton);\n\n      // Verify success message\n      await waitFor(() => {\n        expect(screen.getByText(/bulk transition completed/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle transition API errors', async () => {\n      const user = userEvent.setup();\n      \n      // Mock API error\n      const speakerApi = require('@/infrastructure/api/speaker-api').speakerApi;\n      speakerApi.transitionSpeaker.mockRejectedValueOnce(new Error('Transition failed'));\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Ready For Transition')).toBeInTheDocument();\n      });\n\n      // Attempt transition\n      const speakerCard = screen.getByTestId('speaker-card-1');\n      const actionsButton = within(speakerCard).getByLabelText(/more actions/i);\n      await user.click(actionsButton);\n\n      const transitionOption = screen.getByRole('menuitem', { name: /transition bucket/i });\n      await user.click(transitionOption);\n\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n      });\n\n      const bucketSelect = screen.getByLabelText(/new bucket/i);\n      await user.click(bucketSelect);\n      \n      const lowTouchOption = screen.getByRole('option', { name: /low touch/i });\n      await user.click(lowTouchOption);\n\n      const confirmButton = screen.getByRole('button', { name: /confirm transition/i });\n      await user.click(confirmButton);\n\n      // Verify error message\n      await waitFor(() => {\n        expect(screen.getByText(/failed to transition speaker/i)).toBeInTheDocument();\n      });\n    });\n\n    test('should handle network errors gracefully', async () => {\n      // Mock network error\n      const speakerApi = require('@/infrastructure/api/speaker-api').speakerApi;\n      speakerApi.getSpeakers.mockRejectedValueOnce(new Error('Network error'));\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      // Verify error state\n      await waitFor(() => {\n        expect(screen.getByText(/failed to load speakers/i)).toBeInTheDocument();\n      });\n\n      // Verify retry functionality\n      const retryButton = screen.getByRole('button', { name: /retry/i });\n      expect(retryButton).toBeInTheDocument();\n      \n      // Reset mock for retry\n      speakerApi.getSpeakers.mockResolvedValueOnce({ \n        speakers: mockSpeakersForTransition, \n        total: 3 \n      });\n      \n      await userEvent.setup().click(retryButton);\n      \n      // Verify successful retry\n      await waitFor(() => {\n        expect(screen.getByText('Dr. Ready For Transition')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Analytics Integration', () => {\n    test('should display transition analytics', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <SpeakerManagementPage />\n        </TestWrapper>\n      );\n\n      // Navigate to analytics tab\n      const analyticsTab = screen.getByRole('tab', { name: /analytics/i });\n      await user.click(analyticsTab);\n\n      // Verify analytics data\n      await waitFor(() => {\n        expect(screen.getByText(/speakers needing transition/i)).toBeInTheDocument();\n        expect(screen.getByText('1')).toBeInTheDocument(); // From mock data\n      });\n\n      // Verify bucket distribution\n      expect(screen.getByText(/bucket distribution/i)).toBeInTheDocument();\n      expect(screen.getByText(/high touch: 1/i)).toBeInTheDocument();\n      expect(screen.getByText(/medium touch: 2/i)).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/integration/mt-validation.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'within' is defined but never used.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":52},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":389,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":389,"endColumn":78},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":495,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":495,"endColumn":78}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration tests for MT validation workflow\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { theme } from '@/app/theme';\nimport mtValidationReducer from '@/features/mt-validation/mt-validation-slice';\nimport uiReducer from '@/shared/slices/ui-slice';\nimport { MTValidationPage } from '@/features/mt-validation';\nimport { \n  ValidationSession, \n  ValidationTestData, \n  SessionStatus, \n  ImprovementAssessment \n} from '@/domain/types/mt-validation';\n\n// Mock validation session data\nconst mockValidationSession: ValidationSession = {\n  session_id: 'session-1',\n  speaker_id: 'speaker-1',\n  session_name: 'Test Validation Session',\n  test_data_ids: ['data-1', 'data-2', 'data-3'],\n  mt_user_id: 'user-1',\n  status: SessionStatus.ACTIVE,\n  progress_percentage: 33.33,\n  current_item_index: 1,\n  total_items: 3,\n  created_at: '2024-01-01T10:00:00Z',\n  updated_at: '2024-01-01T10:30:00Z',\n  session_metadata: {\n    priority: 'medium',\n    auto_advance: true,\n    include_ser_metrics: true\n  }\n};\n\nconst mockValidationData: ValidationTestData[] = [\n  {\n    data_id: 'data-1',\n    speaker_id: 'speaker-1',\n    historical_data_id: 'hist-1',\n    original_asr_text: 'The patient has diabetis and high blod pressure.',\n    rag_corrected_text: 'The patient has diabetes and high blood pressure.',\n    final_reference_text: 'The patient has diabetes and high blood pressure.',\n    original_ser_metrics: {\n      ser_score: 18.5,\n      edit_distance: 8,\n      insertions: 2,\n      deletions: 1,\n      substitutions: 3,\n      moves: 2,\n      quality_level: 'medium',\n      is_acceptable_quality: false\n    },\n    corrected_ser_metrics: {\n      ser_score: 2.1,\n      edit_distance: 1,\n      insertions: 0,\n      deletions: 0,\n      substitutions: 1,\n      moves: 0,\n      quality_level: 'high',\n      is_acceptable_quality: true\n    },\n    improvement_metrics: {\n      improvement: 16.4,\n      improvement_percentage: 88.6,\n      is_significant_improvement: true\n    },\n    priority: 'medium',\n    is_used: false,\n    created_at: '2024-01-01T09:00:00Z'\n  },\n  {\n    data_id: 'data-2',\n    speaker_id: 'speaker-1',\n    historical_data_id: 'hist-2',\n    original_asr_text: 'Patient complains of chest pain radiating to left arm.',\n    rag_corrected_text: 'Patient complains of chest pain radiating to left arm.',\n    final_reference_text: 'Patient complains of chest pain radiating to left arm.',\n    original_ser_metrics: {\n      ser_score: 5.2,\n      edit_distance: 2,\n      insertions: 1,\n      deletions: 0,\n      substitutions: 1,\n      moves: 0,\n      quality_level: 'high',\n      is_acceptable_quality: true\n    },\n    corrected_ser_metrics: {\n      ser_score: 5.2,\n      edit_distance: 2,\n      insertions: 1,\n      deletions: 0,\n      substitutions: 1,\n      moves: 0,\n      quality_level: 'high',\n      is_acceptable_quality: true\n    },\n    improvement_metrics: {\n      improvement: 0.0,\n      improvement_percentage: 0.0,\n      is_significant_improvement: false\n    },\n    priority: 'low',\n    is_used: false,\n    created_at: '2024-01-01T09:15:00Z'\n  }\n];\n\n// Mock API\njest.mock('@/infrastructure/api/mt-validation-api', () => ({\n  mtValidationApi: {\n    getValidationSession: jest.fn(() => Promise.resolve(mockValidationSession)),\n    getValidationTestData: jest.fn(() => Promise.resolve({\n      items: mockValidationData,\n      current_index: 0,\n      total_items: mockValidationData.length\n    })),\n    submitMTFeedback: jest.fn(() => Promise.resolve({\n      feedback_id: 'feedback-1',\n      session_id: 'session-1',\n      mt_feedback_rating: 5,\n      improvement_assessment: ImprovementAssessment.SIGNIFICANT,\n      created_at: new Date().toISOString()\n    })),\n    startValidationSession: jest.fn(() => Promise.resolve(mockValidationSession)),\n    completeValidationSession: jest.fn(() => Promise.resolve({\n      ...mockValidationSession,\n      status: SessionStatus.COMPLETED,\n      progress_percentage: 100\n    })),\n    getValidationSessions: jest.fn(() => Promise.resolve({\n      sessions: [mockValidationSession],\n      total: 1\n    })),\n  }\n}));\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const store = configureStore({\n    reducer: {\n      mtValidation: mtValidationReducer,\n      ui: uiReducer,\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\ndescribe('MT Validation Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('should load validation session and display first item', async () => {\n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Verify validation interface is displayed\n    expect(screen.getByText(/original asr text/i)).toBeInTheDocument();\n    expect(screen.getByText(/rag corrected text/i)).toBeInTheDocument();\n    expect(screen.getByText(/final reference text/i)).toBeInTheDocument();\n\n    // Verify first item content\n    expect(screen.getByText(/diabetis and high blod pressure/i)).toBeInTheDocument();\n    expect(screen.getByText(/diabetes and high blood pressure/i)).toBeInTheDocument();\n  });\n\n  test('should display text differences highlighting', async () => {\n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Toggle differences highlighting\n    const differencesToggle = screen.getByRole('button', { name: /toggle differences/i });\n    await userEvent.click(differencesToggle);\n\n    // Verify differences are highlighted\n    await waitFor(() => {\n      expect(screen.getByTestId('text-differences')).toBeInTheDocument();\n    });\n\n    // Verify specific differences are marked\n    expect(screen.getByText('diabetis')).toHaveClass('text-deletion');\n    expect(screen.getByText('diabetes')).toHaveClass('text-insertion');\n  });\n\n  test('should display SER metrics panel', async () => {\n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Verify SER metrics are displayed\n    expect(screen.getByText(/ser metrics/i)).toBeInTheDocument();\n    expect(screen.getByText('18.5')).toBeInTheDocument(); // Original SER score\n    expect(screen.getByText('2.1')).toBeInTheDocument(); // Corrected SER score\n    expect(screen.getByText('88.6%')).toBeInTheDocument(); // Improvement percentage\n  });\n\n  test('should submit feedback and advance to next item', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Rate the validation item\n    const ratingStars = screen.getAllByRole('radio');\n    await user.click(ratingStars[4]); // 5-star rating\n\n    // Select improvement assessment\n    const significantRadio = screen.getByRole('radio', { name: /significant/i });\n    await user.click(significantRadio);\n\n    // Add comments\n    const commentsInput = screen.getByLabelText(/comments/i);\n    await user.type(commentsInput, 'Excellent correction of medical terminology');\n\n    // Submit feedback\n    const submitButton = screen.getByRole('button', { name: /submit feedback/i });\n    await user.click(submitButton);\n\n    // Verify feedback was submitted and advanced to next item\n    await waitFor(() => {\n      expect(screen.getByText(/feedback submitted/i)).toBeInTheDocument();\n    });\n\n    // Verify progress updated\n    expect(screen.getByText(/item 2 of 3/i)).toBeInTheDocument();\n  });\n\n  test('should navigate between validation items', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Navigate to next item\n    const nextButton = screen.getByRole('button', { name: /next item/i });\n    await user.click(nextButton);\n\n    // Verify navigation to second item\n    await waitFor(() => {\n      expect(screen.getByText(/chest pain radiating/i)).toBeInTheDocument();\n    });\n\n    // Navigate back to previous item\n    const prevButton = screen.getByRole('button', { name: /previous item/i });\n    await user.click(prevButton);\n\n    // Verify navigation back to first item\n    await waitFor(() => {\n      expect(screen.getByText(/diabetis and high blod pressure/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should use keyboard shortcuts for navigation', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Use keyboard shortcut to navigate next\n    await user.keyboard('{ArrowRight}');\n\n    // Verify navigation to next item\n    await waitFor(() => {\n      expect(screen.getByText(/chest pain radiating/i)).toBeInTheDocument();\n    });\n\n    // Use keyboard shortcut to navigate back\n    await user.keyboard('{ArrowLeft}');\n\n    // Verify navigation back to first item\n    await waitFor(() => {\n      expect(screen.getByText(/diabetis and high blod pressure/i)).toBeInTheDocument();\n    });\n\n    // Use keyboard shortcut for rating\n    await user.keyboard('5');\n\n    // Verify 5-star rating is selected\n    const fiveStarRadio = screen.getByRole('radio', { name: /5 stars/i });\n    expect(fiveStarRadio).toBeChecked();\n  });\n\n  test('should display keyboard shortcuts helper', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Open keyboard shortcuts helper\n    await user.keyboard('?');\n\n    // Verify shortcuts dialog is displayed\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText(/keyboard shortcuts/i)).toBeInTheDocument();\n    });\n\n    // Verify shortcuts are listed\n    expect(screen.getByText(/arrow keys/i)).toBeInTheDocument();\n    expect(screen.getByText(/1-5/i)).toBeInTheDocument();\n    expect(screen.getByText(/ctrl\\+enter/i)).toBeInTheDocument();\n  });\n\n  test('should handle session completion', async () => {\n    const user = userEvent.setup();\n    \n    // Mock session with all items completed\n    const completedSession = {\n      ...mockValidationSession,\n      progress_percentage: 100,\n      current_item_index: 2\n    };\n\n    const mtValidationApi = require('@/infrastructure/api/mt-validation-api').mtValidationApi;\n    mtValidationApi.getValidationSession.mockResolvedValueOnce(completedSession);\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Complete the session\n    const completeButton = screen.getByRole('button', { name: /complete session/i });\n    await user.click(completeButton);\n\n    // Verify completion dialog\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText(/session completed/i)).toBeInTheDocument();\n    });\n\n    // Add completion notes\n    const notesInput = screen.getByLabelText(/completion notes/i);\n    await user.type(notesInput, 'Session completed successfully with high quality feedback');\n\n    // Confirm completion\n    const confirmButton = screen.getByRole('button', { name: /confirm completion/i });\n    await user.click(confirmButton);\n\n    // Verify session completion\n    await waitFor(() => {\n      expect(screen.getByText(/session completed successfully/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should display session summary', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Open session summary\n    const summaryButton = screen.getByRole('button', { name: /session summary/i });\n    await user.click(summaryButton);\n\n    // Verify summary dialog\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText(/session summary/i)).toBeInTheDocument();\n    });\n\n    // Verify summary statistics\n    expect(screen.getByText(/total items/i)).toBeInTheDocument();\n    expect(screen.getByText(/average rating/i)).toBeInTheDocument();\n    expect(screen.getByText(/improvement distribution/i)).toBeInTheDocument();\n  });\n\n  test('should handle auto-advance setting', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Disable auto-advance\n    const autoAdvanceToggle = screen.getByRole('switch', { name: /auto advance/i });\n    await user.click(autoAdvanceToggle);\n\n    // Submit feedback\n    const ratingStars = screen.getAllByRole('radio');\n    await user.click(ratingStars[3]); // 4-star rating\n\n    const submitButton = screen.getByRole('button', { name: /submit feedback/i });\n    await user.click(submitButton);\n\n    // Verify feedback submitted but didn't auto-advance\n    await waitFor(() => {\n      expect(screen.getByText(/feedback submitted/i)).toBeInTheDocument();\n    });\n\n    // Should still be on the same item\n    expect(screen.getByText(/diabetis and high blod pressure/i)).toBeInTheDocument();\n  });\n\n  test('should handle validation errors gracefully', async () => {\n    const user = userEvent.setup();\n    \n    // Mock API error\n    const mtValidationApi = require('@/infrastructure/api/mt-validation-api').mtValidationApi;\n    mtValidationApi.submitMTFeedback.mockRejectedValueOnce(new Error('Network error'));\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Try to submit feedback\n    const ratingStars = screen.getAllByRole('radio');\n    await user.click(ratingStars[4]); // 5-star rating\n\n    const submitButton = screen.getByRole('button', { name: /submit feedback/i });\n    await user.click(submitButton);\n\n    // Verify error message is displayed\n    await waitFor(() => {\n      expect(screen.getByText(/failed to submit feedback/i)).toBeInTheDocument();\n    });\n\n    // Verify retry option is available\n    expect(screen.getByRole('button', { name: /retry/i })).toBeInTheDocument();\n  });\n\n  test('should save feedback as draft', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <MTValidationPage />\n      </TestWrapper>\n    );\n\n    // Wait for session to load\n    await waitFor(() => {\n      expect(screen.getByText('Test Validation Session')).toBeInTheDocument();\n    });\n\n    // Fill in partial feedback\n    const ratingStars = screen.getAllByRole('radio');\n    await user.click(ratingStars[3]); // 4-star rating\n\n    const commentsInput = screen.getByLabelText(/comments/i);\n    await user.type(commentsInput, 'Work in progress feedback');\n\n    // Save as draft\n    const saveButton = screen.getByRole('button', { name: /save draft/i });\n    await user.click(saveButton);\n\n    // Verify draft saved\n    await waitFor(() => {\n      expect(screen.getByText(/draft saved/i)).toBeInTheDocument();\n    });\n\n    // Navigate away and back\n    const nextButton = screen.getByRole('button', { name: /next item/i });\n    await user.click(nextButton);\n\n    const prevButton = screen.getByRole('button', { name: /previous item/i });\n    await user.click(prevButton);\n\n    // Verify draft is restored\n    await waitFor(() => {\n      const fourStarRadio = screen.getByRole('radio', { name: /4 stars/i });\n      expect(fourStarRadio).toBeChecked();\n      expect(commentsInput).toHaveValue('Work in progress feedback');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/tests/integration/speaker-management.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":363,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":363,"endColumn":67},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":383,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":383,"endColumn":67},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":410,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":410,"endColumn":67}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration tests for speaker management workflow\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { theme } from '@/app/theme';\nimport speakerReducer from '@/features/speaker-management/speaker-slice';\nimport uiReducer from '@/shared/slices/ui-slice';\nimport { SpeakerManagementPage } from '@/features/speaker-management';\nimport { Speaker, SpeakerBucket, QualityTrend } from '@/domain/types/speaker';\n\n// Mock API responses\nconst mockSpeakers: Speaker[] = [\n  {\n    speaker_id: '1',\n    speaker_identifier: 'SPEAKER_001',\n    speaker_name: 'Dr. John Smith',\n    current_bucket: SpeakerBucket.HIGH_TOUCH,\n    note_count: 150,\n    average_ser_score: 18.5,\n    quality_trend: QualityTrend.IMPROVING,\n    should_transition: true,\n    has_sufficient_data: true,\n    created_at: '2024-01-01',\n    updated_at: '2024-01-15',\n  },\n  {\n    speaker_id: '2',\n    speaker_identifier: 'SPEAKER_002',\n    speaker_name: 'Dr. Sarah Johnson',\n    current_bucket: SpeakerBucket.MEDIUM_TOUCH,\n    note_count: 89,\n    average_ser_score: 12.3,\n    quality_trend: QualityTrend.STABLE,\n    should_transition: false,\n    has_sufficient_data: true,\n    created_at: '2024-01-01',\n    updated_at: '2024-01-10',\n  },\n];\n\n// Mock API\njest.mock('@/infrastructure/api/speaker-api', () => ({\n  speakerApi: {\n    getSpeakers: jest.fn(() => Promise.resolve({ speakers: mockSpeakers, total: 2 })),\n    getSpeaker: jest.fn((id: string) => \n      Promise.resolve(mockSpeakers.find(s => s.speaker_id === id))\n    ),\n    createSpeaker: jest.fn((data) => \n      Promise.resolve({ ...data, speaker_id: '3', created_at: new Date().toISOString() })\n    ),\n    updateSpeaker: jest.fn((id: string, data) => \n      Promise.resolve({ ...mockSpeakers.find(s => s.speaker_id === id), ...data })\n    ),\n    deleteSpeaker: jest.fn(() => Promise.resolve()),\n    searchSpeakers: jest.fn((query: string) => \n      Promise.resolve({\n        speakers: mockSpeakers.filter(s => \n          s.speaker_name.toLowerCase().includes(query.toLowerCase())\n        ),\n        total: 1\n      })\n    ),\n    getSpeakerAnalytics: jest.fn(() => Promise.resolve({\n      performance_metrics: { average_ser_score: 15.4, total_notes: 239 },\n      quality_trends: { improving: 1, stable: 1, declining: 0 },\n      ser_distribution: { high: 0, medium: 2, low: 0 }\n    })),\n  }\n}));\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const store = configureStore({\n    reducer: {\n      speakers: speakerReducer,\n      ui: uiReducer,\n    },\n  });\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <ThemeProvider theme={theme}>\n          {children}\n        </ThemeProvider>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\ndescribe('Speaker Management Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('should load and display speakers list', async () => {\n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n      expect(screen.getByText('Dr. Sarah Johnson')).toBeInTheDocument();\n    });\n\n    // Verify speaker details are displayed\n    expect(screen.getByText('SPEAKER_001')).toBeInTheDocument();\n    expect(screen.getByText('SPEAKER_002')).toBeInTheDocument();\n    expect(screen.getByText('HIGH TOUCH')).toBeInTheDocument();\n    expect(screen.getByText('MEDIUM TOUCH')).toBeInTheDocument();\n  });\n\n  test('should filter speakers by bucket', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Open filter menu\n    const filterButton = screen.getByLabelText(/filter speakers/i);\n    await user.click(filterButton);\n\n    // Select HIGH_TOUCH filter\n    const highTouchFilter = screen.getByRole('checkbox', { name: /high touch/i });\n    await user.click(highTouchFilter);\n\n    // Apply filters\n    const applyButton = screen.getByRole('button', { name: /apply filters/i });\n    await user.click(applyButton);\n\n    // Verify only HIGH_TOUCH speakers are shown\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n      expect(screen.queryByText('Dr. Sarah Johnson')).not.toBeInTheDocument();\n    });\n  });\n\n  test('should search speakers by name', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Enter search query\n    const searchInput = screen.getByPlaceholderText(/search speakers/i);\n    await user.type(searchInput, 'John');\n\n    // Wait for search results\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n      expect(screen.queryByText('Dr. Sarah Johnson')).not.toBeInTheDocument();\n    });\n  });\n\n  test('should open speaker details dialog', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Click on speaker card\n    const speakerCard = screen.getByText('Dr. John Smith').closest('[data-testid=\"speaker-card\"]');\n    expect(speakerCard).toBeInTheDocument();\n    await user.click(speakerCard!);\n\n    // Verify details dialog opens\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Speaker Details')).toBeInTheDocument();\n      expect(screen.getByText('SPEAKER_001')).toBeInTheDocument();\n    });\n  });\n\n  test('should create new speaker', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Click add speaker button\n    const addButton = screen.getByRole('button', { name: /add speaker/i });\n    await user.click(addButton);\n\n    // Verify create dialog opens\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Add New Speaker')).toBeInTheDocument();\n    });\n\n    // Fill in speaker details\n    const nameInput = screen.getByLabelText(/speaker name/i);\n    const identifierInput = screen.getByLabelText(/speaker identifier/i);\n    \n    await user.type(nameInput, 'Dr. Test Speaker');\n    await user.type(identifierInput, 'SPEAKER_TEST');\n\n    // Select bucket\n    const bucketSelect = screen.getByLabelText(/current bucket/i);\n    await user.click(bucketSelect);\n    \n    const mediumTouchOption = screen.getByRole('option', { name: /medium touch/i });\n    await user.click(mediumTouchOption);\n\n    // Submit form\n    const submitButton = screen.getByRole('button', { name: /create speaker/i });\n    await user.click(submitButton);\n\n    // Verify success message\n    await waitFor(() => {\n      expect(screen.getByText(/speaker created successfully/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should handle speaker editing', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Open speaker menu\n    const speakerCard = screen.getByText('Dr. John Smith').closest('[data-testid=\"speaker-card\"]');\n    const menuButton = within(speakerCard!).getByLabelText(/more actions/i);\n    await user.click(menuButton);\n\n    // Click edit option\n    const editOption = screen.getByRole('menuitem', { name: /edit/i });\n    await user.click(editOption);\n\n    // Verify edit dialog opens\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Edit Speaker')).toBeInTheDocument();\n    });\n\n    // Update speaker name\n    const nameInput = screen.getByDisplayValue('Dr. John Smith');\n    await user.clear(nameInput);\n    await user.type(nameInput, 'Dr. John Smith Updated');\n\n    // Save changes\n    const saveButton = screen.getByRole('button', { name: /save changes/i });\n    await user.click(saveButton);\n\n    // Verify success message\n    await waitFor(() => {\n      expect(screen.getByText(/speaker updated successfully/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should display speaker analytics', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Click analytics tab\n    const analyticsTab = screen.getByRole('tab', { name: /analytics/i });\n    await user.click(analyticsTab);\n\n    // Verify analytics content loads\n    await waitFor(() => {\n      expect(screen.getByText(/speaker analytics/i)).toBeInTheDocument();\n      expect(screen.getByText(/average ser score/i)).toBeInTheDocument();\n      expect(screen.getByText('15.4')).toBeInTheDocument(); // Mock analytics data\n    });\n  });\n\n  test('should handle bulk operations', async () => {\n    const user = userEvent.setup();\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Select multiple speakers\n    const checkboxes = screen.getAllByRole('checkbox');\n    await user.click(checkboxes[1]); // First speaker\n    await user.click(checkboxes[2]); // Second speaker\n\n    // Verify bulk actions appear\n    await waitFor(() => {\n      expect(screen.getByText(/2 speakers selected/i)).toBeInTheDocument();\n    });\n\n    // Open bulk actions menu\n    const bulkActionsButton = screen.getByRole('button', { name: /bulk actions/i });\n    await user.click(bulkActionsButton);\n\n    // Select bulk update option\n    const bulkUpdateOption = screen.getByRole('menuitem', { name: /bulk update/i });\n    await user.click(bulkUpdateOption);\n\n    // Verify bulk update dialog opens\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Bulk Update Speakers')).toBeInTheDocument();\n    });\n  });\n\n  test('should handle error states gracefully', async () => {\n    // Mock API error\n    const speakerApi = require('@/infrastructure/api/speaker-api').speakerApi;\n    speakerApi.getSpeakers.mockRejectedValueOnce(new Error('Network error'));\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Verify error message is displayed\n    await waitFor(() => {\n      expect(screen.getByText(/failed to load speakers/i)).toBeInTheDocument();\n    });\n\n    // Verify retry button is available\n    expect(screen.getByRole('button', { name: /retry/i })).toBeInTheDocument();\n  });\n\n  test('should handle loading states', async () => {\n    // Mock delayed API response\n    const speakerApi = require('@/infrastructure/api/speaker-api').speakerApi;\n    speakerApi.getSpeakers.mockImplementationOnce(\n      () => new Promise(resolve => setTimeout(() => resolve({ speakers: mockSpeakers, total: 2 }), 1000))\n    );\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Verify loading state is displayed\n    expect(screen.getByTestId('speakers-loading')).toBeInTheDocument();\n\n    // Wait for loading to complete\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    }, { timeout: 2000 });\n\n    // Verify loading state is removed\n    expect(screen.queryByTestId('speakers-loading')).not.toBeInTheDocument();\n  });\n\n  test('should handle pagination', async () => {\n    const user = userEvent.setup();\n    \n    // Mock paginated response\n    const speakerApi = require('@/infrastructure/api/speaker-api').speakerApi;\n    speakerApi.getSpeakers.mockResolvedValueOnce({\n      speakers: mockSpeakers,\n      total: 25,\n      page: 1,\n      per_page: 10,\n      total_pages: 3\n    });\n    \n    render(\n      <TestWrapper>\n        <SpeakerManagementPage />\n      </TestWrapper>\n    );\n\n    // Wait for speakers to load\n    await waitFor(() => {\n      expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n    });\n\n    // Verify pagination controls\n    expect(screen.getByText(/page 1 of 3/i)).toBeInTheDocument();\n    \n    // Test next page\n    const nextButton = screen.getByRole('button', { name: /next page/i });\n    expect(nextButton).toBeInTheDocument();\n    \n    // Mock next page response\n    speakerApi.getSpeakers.mockResolvedValueOnce({\n      speakers: [],\n      total: 25,\n      page: 2,\n      per_page: 10,\n      total_pages: 3\n    });\n    \n    await user.click(nextButton);\n    \n    // Verify page change\n    await waitFor(() => {\n      expect(screen.getByText(/page 2 of 3/i)).toBeInTheDocument();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tan/Documents/augment-projects/rag-interface/frontend/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]